
ROBOT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007250  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a4  08007420  08007420  00008420  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080074c4  080074c4  00009060  2**0
                  CONTENTS
  4 .ARM          00000008  080074c4  080074c4  000084c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080074cc  080074cc  00009060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080074cc  080074cc  000084cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080074d0  080074d0  000084d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  080074d4  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000446c  20000060  08007534  00009060  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200044cc  08007534  000094cc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00009060  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001abf9  00000000  00000000  00009090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003fd3  00000000  00000000  00023c89  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001610  00000000  00000000  00027c60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000110b  00000000  00000000  00029270  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000264a4  00000000  00000000  0002a37b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001bd78  00000000  00000000  0005081f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e80fb  00000000  00000000  0006c597  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00154692  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005d40  00000000  00000000  001546d8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000058  00000000  00000000  0015a418  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000060 	.word	0x20000060
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08007408 	.word	0x08007408

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000064 	.word	0x20000064
 800020c:	08007408 	.word	0x08007408

08000210 <__aeabi_uldivmod>:
 8000210:	b953      	cbnz	r3, 8000228 <__aeabi_uldivmod+0x18>
 8000212:	b94a      	cbnz	r2, 8000228 <__aeabi_uldivmod+0x18>
 8000214:	2900      	cmp	r1, #0
 8000216:	bf08      	it	eq
 8000218:	2800      	cmpeq	r0, #0
 800021a:	bf1c      	itt	ne
 800021c:	f04f 31ff 	movne.w	r1, #4294967295
 8000220:	f04f 30ff 	movne.w	r0, #4294967295
 8000224:	f000 b96a 	b.w	80004fc <__aeabi_idiv0>
 8000228:	f1ad 0c08 	sub.w	ip, sp, #8
 800022c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000230:	f000 f806 	bl	8000240 <__udivmoddi4>
 8000234:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000238:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800023c:	b004      	add	sp, #16
 800023e:	4770      	bx	lr

08000240 <__udivmoddi4>:
 8000240:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000244:	9d08      	ldr	r5, [sp, #32]
 8000246:	460c      	mov	r4, r1
 8000248:	2b00      	cmp	r3, #0
 800024a:	d14e      	bne.n	80002ea <__udivmoddi4+0xaa>
 800024c:	4694      	mov	ip, r2
 800024e:	458c      	cmp	ip, r1
 8000250:	4686      	mov	lr, r0
 8000252:	fab2 f282 	clz	r2, r2
 8000256:	d962      	bls.n	800031e <__udivmoddi4+0xde>
 8000258:	b14a      	cbz	r2, 800026e <__udivmoddi4+0x2e>
 800025a:	f1c2 0320 	rsb	r3, r2, #32
 800025e:	4091      	lsls	r1, r2
 8000260:	fa20 f303 	lsr.w	r3, r0, r3
 8000264:	fa0c fc02 	lsl.w	ip, ip, r2
 8000268:	4319      	orrs	r1, r3
 800026a:	fa00 fe02 	lsl.w	lr, r0, r2
 800026e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000272:	fa1f f68c 	uxth.w	r6, ip
 8000276:	fbb1 f4f7 	udiv	r4, r1, r7
 800027a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800027e:	fb07 1114 	mls	r1, r7, r4, r1
 8000282:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000286:	fb04 f106 	mul.w	r1, r4, r6
 800028a:	4299      	cmp	r1, r3
 800028c:	d90a      	bls.n	80002a4 <__udivmoddi4+0x64>
 800028e:	eb1c 0303 	adds.w	r3, ip, r3
 8000292:	f104 30ff 	add.w	r0, r4, #4294967295
 8000296:	f080 8112 	bcs.w	80004be <__udivmoddi4+0x27e>
 800029a:	4299      	cmp	r1, r3
 800029c:	f240 810f 	bls.w	80004be <__udivmoddi4+0x27e>
 80002a0:	3c02      	subs	r4, #2
 80002a2:	4463      	add	r3, ip
 80002a4:	1a59      	subs	r1, r3, r1
 80002a6:	fa1f f38e 	uxth.w	r3, lr
 80002aa:	fbb1 f0f7 	udiv	r0, r1, r7
 80002ae:	fb07 1110 	mls	r1, r7, r0, r1
 80002b2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002b6:	fb00 f606 	mul.w	r6, r0, r6
 80002ba:	429e      	cmp	r6, r3
 80002bc:	d90a      	bls.n	80002d4 <__udivmoddi4+0x94>
 80002be:	eb1c 0303 	adds.w	r3, ip, r3
 80002c2:	f100 31ff 	add.w	r1, r0, #4294967295
 80002c6:	f080 80fc 	bcs.w	80004c2 <__udivmoddi4+0x282>
 80002ca:	429e      	cmp	r6, r3
 80002cc:	f240 80f9 	bls.w	80004c2 <__udivmoddi4+0x282>
 80002d0:	4463      	add	r3, ip
 80002d2:	3802      	subs	r0, #2
 80002d4:	1b9b      	subs	r3, r3, r6
 80002d6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002da:	2100      	movs	r1, #0
 80002dc:	b11d      	cbz	r5, 80002e6 <__udivmoddi4+0xa6>
 80002de:	40d3      	lsrs	r3, r2
 80002e0:	2200      	movs	r2, #0
 80002e2:	e9c5 3200 	strd	r3, r2, [r5]
 80002e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d905      	bls.n	80002fa <__udivmoddi4+0xba>
 80002ee:	b10d      	cbz	r5, 80002f4 <__udivmoddi4+0xb4>
 80002f0:	e9c5 0100 	strd	r0, r1, [r5]
 80002f4:	2100      	movs	r1, #0
 80002f6:	4608      	mov	r0, r1
 80002f8:	e7f5      	b.n	80002e6 <__udivmoddi4+0xa6>
 80002fa:	fab3 f183 	clz	r1, r3
 80002fe:	2900      	cmp	r1, #0
 8000300:	d146      	bne.n	8000390 <__udivmoddi4+0x150>
 8000302:	42a3      	cmp	r3, r4
 8000304:	d302      	bcc.n	800030c <__udivmoddi4+0xcc>
 8000306:	4290      	cmp	r0, r2
 8000308:	f0c0 80f0 	bcc.w	80004ec <__udivmoddi4+0x2ac>
 800030c:	1a86      	subs	r6, r0, r2
 800030e:	eb64 0303 	sbc.w	r3, r4, r3
 8000312:	2001      	movs	r0, #1
 8000314:	2d00      	cmp	r5, #0
 8000316:	d0e6      	beq.n	80002e6 <__udivmoddi4+0xa6>
 8000318:	e9c5 6300 	strd	r6, r3, [r5]
 800031c:	e7e3      	b.n	80002e6 <__udivmoddi4+0xa6>
 800031e:	2a00      	cmp	r2, #0
 8000320:	f040 8090 	bne.w	8000444 <__udivmoddi4+0x204>
 8000324:	eba1 040c 	sub.w	r4, r1, ip
 8000328:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800032c:	fa1f f78c 	uxth.w	r7, ip
 8000330:	2101      	movs	r1, #1
 8000332:	fbb4 f6f8 	udiv	r6, r4, r8
 8000336:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800033a:	fb08 4416 	mls	r4, r8, r6, r4
 800033e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000342:	fb07 f006 	mul.w	r0, r7, r6
 8000346:	4298      	cmp	r0, r3
 8000348:	d908      	bls.n	800035c <__udivmoddi4+0x11c>
 800034a:	eb1c 0303 	adds.w	r3, ip, r3
 800034e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000352:	d202      	bcs.n	800035a <__udivmoddi4+0x11a>
 8000354:	4298      	cmp	r0, r3
 8000356:	f200 80cd 	bhi.w	80004f4 <__udivmoddi4+0x2b4>
 800035a:	4626      	mov	r6, r4
 800035c:	1a1c      	subs	r4, r3, r0
 800035e:	fa1f f38e 	uxth.w	r3, lr
 8000362:	fbb4 f0f8 	udiv	r0, r4, r8
 8000366:	fb08 4410 	mls	r4, r8, r0, r4
 800036a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800036e:	fb00 f707 	mul.w	r7, r0, r7
 8000372:	429f      	cmp	r7, r3
 8000374:	d908      	bls.n	8000388 <__udivmoddi4+0x148>
 8000376:	eb1c 0303 	adds.w	r3, ip, r3
 800037a:	f100 34ff 	add.w	r4, r0, #4294967295
 800037e:	d202      	bcs.n	8000386 <__udivmoddi4+0x146>
 8000380:	429f      	cmp	r7, r3
 8000382:	f200 80b0 	bhi.w	80004e6 <__udivmoddi4+0x2a6>
 8000386:	4620      	mov	r0, r4
 8000388:	1bdb      	subs	r3, r3, r7
 800038a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800038e:	e7a5      	b.n	80002dc <__udivmoddi4+0x9c>
 8000390:	f1c1 0620 	rsb	r6, r1, #32
 8000394:	408b      	lsls	r3, r1
 8000396:	fa22 f706 	lsr.w	r7, r2, r6
 800039a:	431f      	orrs	r7, r3
 800039c:	fa20 fc06 	lsr.w	ip, r0, r6
 80003a0:	fa04 f301 	lsl.w	r3, r4, r1
 80003a4:	ea43 030c 	orr.w	r3, r3, ip
 80003a8:	40f4      	lsrs	r4, r6
 80003aa:	fa00 f801 	lsl.w	r8, r0, r1
 80003ae:	0c38      	lsrs	r0, r7, #16
 80003b0:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003b4:	fbb4 fef0 	udiv	lr, r4, r0
 80003b8:	fa1f fc87 	uxth.w	ip, r7
 80003bc:	fb00 441e 	mls	r4, r0, lr, r4
 80003c0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003c4:	fb0e f90c 	mul.w	r9, lr, ip
 80003c8:	45a1      	cmp	r9, r4
 80003ca:	fa02 f201 	lsl.w	r2, r2, r1
 80003ce:	d90a      	bls.n	80003e6 <__udivmoddi4+0x1a6>
 80003d0:	193c      	adds	r4, r7, r4
 80003d2:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003d6:	f080 8084 	bcs.w	80004e2 <__udivmoddi4+0x2a2>
 80003da:	45a1      	cmp	r9, r4
 80003dc:	f240 8081 	bls.w	80004e2 <__udivmoddi4+0x2a2>
 80003e0:	f1ae 0e02 	sub.w	lr, lr, #2
 80003e4:	443c      	add	r4, r7
 80003e6:	eba4 0409 	sub.w	r4, r4, r9
 80003ea:	fa1f f983 	uxth.w	r9, r3
 80003ee:	fbb4 f3f0 	udiv	r3, r4, r0
 80003f2:	fb00 4413 	mls	r4, r0, r3, r4
 80003f6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003fa:	fb03 fc0c 	mul.w	ip, r3, ip
 80003fe:	45a4      	cmp	ip, r4
 8000400:	d907      	bls.n	8000412 <__udivmoddi4+0x1d2>
 8000402:	193c      	adds	r4, r7, r4
 8000404:	f103 30ff 	add.w	r0, r3, #4294967295
 8000408:	d267      	bcs.n	80004da <__udivmoddi4+0x29a>
 800040a:	45a4      	cmp	ip, r4
 800040c:	d965      	bls.n	80004da <__udivmoddi4+0x29a>
 800040e:	3b02      	subs	r3, #2
 8000410:	443c      	add	r4, r7
 8000412:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000416:	fba0 9302 	umull	r9, r3, r0, r2
 800041a:	eba4 040c 	sub.w	r4, r4, ip
 800041e:	429c      	cmp	r4, r3
 8000420:	46ce      	mov	lr, r9
 8000422:	469c      	mov	ip, r3
 8000424:	d351      	bcc.n	80004ca <__udivmoddi4+0x28a>
 8000426:	d04e      	beq.n	80004c6 <__udivmoddi4+0x286>
 8000428:	b155      	cbz	r5, 8000440 <__udivmoddi4+0x200>
 800042a:	ebb8 030e 	subs.w	r3, r8, lr
 800042e:	eb64 040c 	sbc.w	r4, r4, ip
 8000432:	fa04 f606 	lsl.w	r6, r4, r6
 8000436:	40cb      	lsrs	r3, r1
 8000438:	431e      	orrs	r6, r3
 800043a:	40cc      	lsrs	r4, r1
 800043c:	e9c5 6400 	strd	r6, r4, [r5]
 8000440:	2100      	movs	r1, #0
 8000442:	e750      	b.n	80002e6 <__udivmoddi4+0xa6>
 8000444:	f1c2 0320 	rsb	r3, r2, #32
 8000448:	fa20 f103 	lsr.w	r1, r0, r3
 800044c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000450:	fa24 f303 	lsr.w	r3, r4, r3
 8000454:	4094      	lsls	r4, r2
 8000456:	430c      	orrs	r4, r1
 8000458:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800045c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000460:	fa1f f78c 	uxth.w	r7, ip
 8000464:	fbb3 f0f8 	udiv	r0, r3, r8
 8000468:	fb08 3110 	mls	r1, r8, r0, r3
 800046c:	0c23      	lsrs	r3, r4, #16
 800046e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000472:	fb00 f107 	mul.w	r1, r0, r7
 8000476:	4299      	cmp	r1, r3
 8000478:	d908      	bls.n	800048c <__udivmoddi4+0x24c>
 800047a:	eb1c 0303 	adds.w	r3, ip, r3
 800047e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000482:	d22c      	bcs.n	80004de <__udivmoddi4+0x29e>
 8000484:	4299      	cmp	r1, r3
 8000486:	d92a      	bls.n	80004de <__udivmoddi4+0x29e>
 8000488:	3802      	subs	r0, #2
 800048a:	4463      	add	r3, ip
 800048c:	1a5b      	subs	r3, r3, r1
 800048e:	b2a4      	uxth	r4, r4
 8000490:	fbb3 f1f8 	udiv	r1, r3, r8
 8000494:	fb08 3311 	mls	r3, r8, r1, r3
 8000498:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800049c:	fb01 f307 	mul.w	r3, r1, r7
 80004a0:	42a3      	cmp	r3, r4
 80004a2:	d908      	bls.n	80004b6 <__udivmoddi4+0x276>
 80004a4:	eb1c 0404 	adds.w	r4, ip, r4
 80004a8:	f101 36ff 	add.w	r6, r1, #4294967295
 80004ac:	d213      	bcs.n	80004d6 <__udivmoddi4+0x296>
 80004ae:	42a3      	cmp	r3, r4
 80004b0:	d911      	bls.n	80004d6 <__udivmoddi4+0x296>
 80004b2:	3902      	subs	r1, #2
 80004b4:	4464      	add	r4, ip
 80004b6:	1ae4      	subs	r4, r4, r3
 80004b8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004bc:	e739      	b.n	8000332 <__udivmoddi4+0xf2>
 80004be:	4604      	mov	r4, r0
 80004c0:	e6f0      	b.n	80002a4 <__udivmoddi4+0x64>
 80004c2:	4608      	mov	r0, r1
 80004c4:	e706      	b.n	80002d4 <__udivmoddi4+0x94>
 80004c6:	45c8      	cmp	r8, r9
 80004c8:	d2ae      	bcs.n	8000428 <__udivmoddi4+0x1e8>
 80004ca:	ebb9 0e02 	subs.w	lr, r9, r2
 80004ce:	eb63 0c07 	sbc.w	ip, r3, r7
 80004d2:	3801      	subs	r0, #1
 80004d4:	e7a8      	b.n	8000428 <__udivmoddi4+0x1e8>
 80004d6:	4631      	mov	r1, r6
 80004d8:	e7ed      	b.n	80004b6 <__udivmoddi4+0x276>
 80004da:	4603      	mov	r3, r0
 80004dc:	e799      	b.n	8000412 <__udivmoddi4+0x1d2>
 80004de:	4630      	mov	r0, r6
 80004e0:	e7d4      	b.n	800048c <__udivmoddi4+0x24c>
 80004e2:	46d6      	mov	lr, sl
 80004e4:	e77f      	b.n	80003e6 <__udivmoddi4+0x1a6>
 80004e6:	4463      	add	r3, ip
 80004e8:	3802      	subs	r0, #2
 80004ea:	e74d      	b.n	8000388 <__udivmoddi4+0x148>
 80004ec:	4606      	mov	r6, r0
 80004ee:	4623      	mov	r3, r4
 80004f0:	4608      	mov	r0, r1
 80004f2:	e70f      	b.n	8000314 <__udivmoddi4+0xd4>
 80004f4:	3e02      	subs	r6, #2
 80004f6:	4463      	add	r3, ip
 80004f8:	e730      	b.n	800035c <__udivmoddi4+0x11c>
 80004fa:	bf00      	nop

080004fc <__aeabi_idiv0>:
 80004fc:	4770      	bx	lr
 80004fe:	bf00      	nop

08000500 <safeDelay>:
#define DHT_BIT0_MAX_TICKS      30U
#define DHT_BIT1_MIN_TICKS      60U
#define DHT_BIT1_MAX_TICKS      80U

static void safeDelay(uint32_t ms)  // MISRA 8.2 - Static for internal use
{
 8000500:	b580      	push	{r7, lr}
 8000502:	b084      	sub	sp, #16
 8000504:	af00      	add	r7, sp, #0
 8000506:	6078      	str	r0, [r7, #4]
    uint32_t start = HAL_GetTick();
 8000508:	f001 fdfe 	bl	8002108 <HAL_GetTick>
 800050c:	60f8      	str	r0, [r7, #12]
    while((HAL_GetTick() - start) < ms) { /* Wait */ }
 800050e:	bf00      	nop
 8000510:	f001 fdfa 	bl	8002108 <HAL_GetTick>
 8000514:	4602      	mov	r2, r0
 8000516:	68fb      	ldr	r3, [r7, #12]
 8000518:	1ad3      	subs	r3, r2, r3
 800051a:	687a      	ldr	r2, [r7, #4]
 800051c:	429a      	cmp	r2, r3
 800051e:	d8f7      	bhi.n	8000510 <safeDelay+0x10>
}
 8000520:	bf00      	nop
 8000522:	bf00      	nop
 8000524:	3710      	adds	r7, #16
 8000526:	46bd      	mov	sp, r7
 8000528:	bd80      	pop	{r7, pc}

0800052a <initDHT>:

void initDHT(dht11_t *dht, TIM_HandleTypeDef *htim, GPIO_TypeDef* port, uint16_t pin)
{
 800052a:	b480      	push	{r7}
 800052c:	b085      	sub	sp, #20
 800052e:	af00      	add	r7, sp, #0
 8000530:	60f8      	str	r0, [r7, #12]
 8000532:	60b9      	str	r1, [r7, #8]
 8000534:	607a      	str	r2, [r7, #4]
 8000536:	807b      	strh	r3, [r7, #2]
    // MISRA 11.3 - No implicit pointer conversion
    dht->htim = (TIM_HandleTypeDef*)htim;
 8000538:	68fb      	ldr	r3, [r7, #12]
 800053a:	68ba      	ldr	r2, [r7, #8]
 800053c:	609a      	str	r2, [r3, #8]
    dht->port = (GPIO_TypeDef*)port;
 800053e:	68fb      	ldr	r3, [r7, #12]
 8000540:	687a      	ldr	r2, [r7, #4]
 8000542:	601a      	str	r2, [r3, #0]
    dht->pin = pin;
 8000544:	68fb      	ldr	r3, [r7, #12]
 8000546:	887a      	ldrh	r2, [r7, #2]
 8000548:	809a      	strh	r2, [r3, #4]
    dht->temperature = 0U;
 800054a:	68fb      	ldr	r3, [r7, #12]
 800054c:	2200      	movs	r2, #0
 800054e:	731a      	strb	r2, [r3, #12]
    dht->humidity = 0U;
 8000550:	68fb      	ldr	r3, [r7, #12]
 8000552:	2200      	movs	r2, #0
 8000554:	735a      	strb	r2, [r3, #13]
}
 8000556:	bf00      	nop
 8000558:	3714      	adds	r7, #20
 800055a:	46bd      	mov	sp, r7
 800055c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000560:	4770      	bx	lr

08000562 <setGPIOMode>:

void setGPIOMode(dht11_t *dht, uint8_t pMode)
{
 8000562:	b580      	push	{r7, lr}
 8000564:	b088      	sub	sp, #32
 8000566:	af00      	add	r7, sp, #0
 8000568:	6078      	str	r0, [r7, #4]
 800056a:	460b      	mov	r3, r1
 800056c:	70fb      	strb	r3, [r7, #3]
    GPIO_InitTypeDef GPIO_InitStruct = {0};  // MISRA 9.3 - Full initialization
 800056e:	f107 030c 	add.w	r3, r7, #12
 8000572:	2200      	movs	r2, #0
 8000574:	601a      	str	r2, [r3, #0]
 8000576:	605a      	str	r2, [r3, #4]
 8000578:	609a      	str	r2, [r3, #8]
 800057a:	60da      	str	r2, [r3, #12]
 800057c:	611a      	str	r2, [r3, #16]
    
    GPIO_InitStruct.Pin = dht->pin;
 800057e:	687b      	ldr	r3, [r7, #4]
 8000580:	889b      	ldrh	r3, [r3, #4]
 8000582:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000584:	2300      	movs	r3, #0
 8000586:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000588:	2303      	movs	r3, #3
 800058a:	61bb      	str	r3, [r7, #24]
    
    // MISRA 14.3 - Single statement per branch
    if (pMode == OUTPUT) {
 800058c:	78fb      	ldrb	r3, [r7, #3]
 800058e:	2b01      	cmp	r3, #1
 8000590:	d102      	bne.n	8000598 <setGPIOMode+0x36>
        GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000592:	2301      	movs	r3, #1
 8000594:	613b      	str	r3, [r7, #16]
 8000596:	e001      	b.n	800059c <setGPIOMode+0x3a>
    } 
    else {  // Default to input if not output
        GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000598:	2300      	movs	r3, #0
 800059a:	613b      	str	r3, [r7, #16]
    }
    
    // MISRA 17.2 - Ignore return value
    (void)HAL_GPIO_Init(dht->port, &GPIO_InitStruct);
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	681b      	ldr	r3, [r3, #0]
 80005a0:	f107 020c 	add.w	r2, r7, #12
 80005a4:	4611      	mov	r1, r2
 80005a6:	4618      	mov	r0, r3
 80005a8:	f002 fa9c 	bl	8002ae4 <HAL_GPIO_Init>
}
 80005ac:	bf00      	nop
 80005ae:	3720      	adds	r7, #32
 80005b0:	46bd      	mov	sp, r7
 80005b2:	bd80      	pop	{r7, pc}

080005b4 <readDHT>:

uint8_t readDHT(dht11_t *dht)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b090      	sub	sp, #64	@ 0x40
 80005b8:	af00      	add	r7, sp, #0
 80005ba:	6078      	str	r0, [r7, #4]
    uint16_t mTime1 = 0U, mTime2 = 0U;  // MISRA 13.1 - Initialize
 80005bc:	2300      	movs	r3, #0
 80005be:	873b      	strh	r3, [r7, #56]	@ 0x38
 80005c0:	2300      	movs	r3, #0
 80005c2:	86fb      	strh	r3, [r7, #54]	@ 0x36
    uint8_t mData[40] = {0};            // MISRA 9.3 - Initialize array
 80005c4:	2300      	movs	r3, #0
 80005c6:	60fb      	str	r3, [r7, #12]
 80005c8:	f107 0310 	add.w	r3, r7, #16
 80005cc:	2224      	movs	r2, #36	@ 0x24
 80005ce:	2100      	movs	r1, #0
 80005d0:	4618      	mov	r0, r3
 80005d2:	f006 fe3f 	bl	8007254 <memset>
    uint8_t humVal = 0U, tempVal = 0U, parityVal = 0U, genParity = 0U;
 80005d6:	2300      	movs	r3, #0
 80005d8:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 80005dc:	2300      	movs	r3, #0
 80005de:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
 80005e2:	2300      	movs	r3, #0
 80005e4:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
 80005e8:	2300      	movs	r3, #0
 80005ea:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    uint8_t result = 0U;  // Return value
 80005ee:	2300      	movs	r3, #0
 80005f0:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
    uint8_t i = 0U;       // Loop counter
 80005f4:	2300      	movs	r3, #0
 80005f6:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
    
    // 1. Start signal
    setGPIOMode(dht, OUTPUT);
 80005fa:	2101      	movs	r1, #1
 80005fc:	6878      	ldr	r0, [r7, #4]
 80005fe:	f7ff ffb0 	bl	8000562 <setGPIOMode>
    HAL_GPIO_WritePin(dht->port, dht->pin, GPIO_PIN_RESET);
 8000602:	687b      	ldr	r3, [r7, #4]
 8000604:	6818      	ldr	r0, [r3, #0]
 8000606:	687b      	ldr	r3, [r7, #4]
 8000608:	889b      	ldrh	r3, [r3, #4]
 800060a:	2200      	movs	r2, #0
 800060c:	4619      	mov	r1, r3
 800060e:	f002 fc15 	bl	8002e3c <HAL_GPIO_WritePin>
    safeDelay(DHT_START_DELAY_MS);
 8000612:	2012      	movs	r0, #18
 8000614:	f7ff ff74 	bl	8000500 <safeDelay>
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000618:	b672      	cpsid	i
}
 800061a:	bf00      	nop
    
    // 2. Prepare for reading
    __disable_irq();
    (void)HAL_TIM_Base_Start(dht->htim);  // MISRA 17.2
 800061c:	687b      	ldr	r3, [r7, #4]
 800061e:	689b      	ldr	r3, [r3, #8]
 8000620:	4618      	mov	r0, r3
 8000622:	f004 f861 	bl	80046e8 <HAL_TIM_Base_Start>
    setGPIOMode(dht, INPUT);
 8000626:	2100      	movs	r1, #0
 8000628:	6878      	ldr	r0, [r7, #4]
 800062a:	f7ff ff9a 	bl	8000562 <setGPIOMode>
    
    // 3. Wait for response low
    __HAL_TIM_SET_COUNTER(dht->htim, 0U);
 800062e:	687b      	ldr	r3, [r7, #4]
 8000630:	689b      	ldr	r3, [r3, #8]
 8000632:	681b      	ldr	r3, [r3, #0]
 8000634:	2200      	movs	r2, #0
 8000636:	625a      	str	r2, [r3, #36]	@ 0x24
    while (HAL_GPIO_ReadPin(dht->port, dht->pin) == GPIO_PIN_SET) 
 8000638:	e008      	b.n	800064c <readDHT+0x98>
    {
        if ((uint16_t)__HAL_TIM_GET_COUNTER(dht->htim) > DHT_TIMEOUT_TICKS) 
 800063a:	687b      	ldr	r3, [r7, #4]
 800063c:	689b      	ldr	r3, [r3, #8]
 800063e:	681b      	ldr	r3, [r3, #0]
 8000640:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000642:	b29b      	uxth	r3, r3
 8000644:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8000648:	f200 811b 	bhi.w	8000882 <readDHT+0x2ce>
    while (HAL_GPIO_ReadPin(dht->port, dht->pin) == GPIO_PIN_SET) 
 800064c:	687b      	ldr	r3, [r7, #4]
 800064e:	681a      	ldr	r2, [r3, #0]
 8000650:	687b      	ldr	r3, [r7, #4]
 8000652:	889b      	ldrh	r3, [r3, #4]
 8000654:	4619      	mov	r1, r3
 8000656:	4610      	mov	r0, r2
 8000658:	f002 fbd8 	bl	8002e0c <HAL_GPIO_ReadPin>
 800065c:	4603      	mov	r3, r0
 800065e:	2b01      	cmp	r3, #1
 8000660:	d0eb      	beq.n	800063a <readDHT+0x86>
            goto cleanup;  // MISRA 15.5 - Single point of exit
        }
    }
    
    // 4. Wait for response high
    __HAL_TIM_SET_COUNTER(dht->htim, 0U);
 8000662:	687b      	ldr	r3, [r7, #4]
 8000664:	689b      	ldr	r3, [r3, #8]
 8000666:	681b      	ldr	r3, [r3, #0]
 8000668:	2200      	movs	r2, #0
 800066a:	625a      	str	r2, [r3, #36]	@ 0x24
    while (HAL_GPIO_ReadPin(dht->port, dht->pin) == GPIO_PIN_RESET) 
 800066c:	e008      	b.n	8000680 <readDHT+0xcc>
    {
        if ((uint16_t)__HAL_TIM_GET_COUNTER(dht->htim) > DHT_TIMEOUT_TICKS) 
 800066e:	687b      	ldr	r3, [r7, #4]
 8000670:	689b      	ldr	r3, [r3, #8]
 8000672:	681b      	ldr	r3, [r3, #0]
 8000674:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000676:	b29b      	uxth	r3, r3
 8000678:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 800067c:	f200 8103 	bhi.w	8000886 <readDHT+0x2d2>
    while (HAL_GPIO_ReadPin(dht->port, dht->pin) == GPIO_PIN_RESET) 
 8000680:	687b      	ldr	r3, [r7, #4]
 8000682:	681a      	ldr	r2, [r3, #0]
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	889b      	ldrh	r3, [r3, #4]
 8000688:	4619      	mov	r1, r3
 800068a:	4610      	mov	r0, r2
 800068c:	f002 fbbe 	bl	8002e0c <HAL_GPIO_ReadPin>
 8000690:	4603      	mov	r3, r0
 8000692:	2b00      	cmp	r3, #0
 8000694:	d0eb      	beq.n	800066e <readDHT+0xba>
            goto cleanup;
        }
    }
    
    // 5. Measure start pulses
    mTime1 = (uint16_t)__HAL_TIM_GET_COUNTER(dht->htim);
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	689b      	ldr	r3, [r3, #8]
 800069a:	681b      	ldr	r3, [r3, #0]
 800069c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800069e:	873b      	strh	r3, [r7, #56]	@ 0x38
    __HAL_TIM_SET_COUNTER(dht->htim, 0U);
 80006a0:	687b      	ldr	r3, [r7, #4]
 80006a2:	689b      	ldr	r3, [r3, #8]
 80006a4:	681b      	ldr	r3, [r3, #0]
 80006a6:	2200      	movs	r2, #0
 80006a8:	625a      	str	r2, [r3, #36]	@ 0x24
    while (HAL_GPIO_ReadPin(dht->port, dht->pin) == GPIO_PIN_SET) 
 80006aa:	e008      	b.n	80006be <readDHT+0x10a>
    {
        if ((uint16_t)__HAL_TIM_GET_COUNTER(dht->htim) > DHT_TIMEOUT_TICKS) 
 80006ac:	687b      	ldr	r3, [r7, #4]
 80006ae:	689b      	ldr	r3, [r3, #8]
 80006b0:	681b      	ldr	r3, [r3, #0]
 80006b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80006b4:	b29b      	uxth	r3, r3
 80006b6:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80006ba:	f200 80e6 	bhi.w	800088a <readDHT+0x2d6>
    while (HAL_GPIO_ReadPin(dht->port, dht->pin) == GPIO_PIN_SET) 
 80006be:	687b      	ldr	r3, [r7, #4]
 80006c0:	681a      	ldr	r2, [r3, #0]
 80006c2:	687b      	ldr	r3, [r7, #4]
 80006c4:	889b      	ldrh	r3, [r3, #4]
 80006c6:	4619      	mov	r1, r3
 80006c8:	4610      	mov	r0, r2
 80006ca:	f002 fb9f 	bl	8002e0c <HAL_GPIO_ReadPin>
 80006ce:	4603      	mov	r3, r0
 80006d0:	2b01      	cmp	r3, #1
 80006d2:	d0eb      	beq.n	80006ac <readDHT+0xf8>
        {
            goto cleanup;
        }
    }
    mTime2 = (uint16_t)__HAL_TIM_GET_COUNTER(dht->htim);
 80006d4:	687b      	ldr	r3, [r7, #4]
 80006d6:	689b      	ldr	r3, [r3, #8]
 80006d8:	681b      	ldr	r3, [r3, #0]
 80006da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80006dc:	86fb      	strh	r3, [r7, #54]	@ 0x36
    
    // 6. Validate start pulses
    if ((mTime1 < DHT_START_MIN_TICKS) || (mTime1 > DHT_START_MAX_TICKS) ||
 80006de:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 80006e0:	2b4a      	cmp	r3, #74	@ 0x4a
 80006e2:	f240 80d4 	bls.w	800088e <readDHT+0x2da>
 80006e6:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 80006e8:	2b55      	cmp	r3, #85	@ 0x55
 80006ea:	f200 80d0 	bhi.w	800088e <readDHT+0x2da>
 80006ee:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80006f0:	2b4a      	cmp	r3, #74	@ 0x4a
 80006f2:	f240 80cc 	bls.w	800088e <readDHT+0x2da>
        (mTime2 < DHT_START_MIN_TICKS) || (mTime2 > DHT_START_MAX_TICKS)) 
 80006f6:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80006f8:	2b55      	cmp	r3, #85	@ 0x55
 80006fa:	f200 80c8 	bhi.w	800088e <readDHT+0x2da>
    {
        goto cleanup;
    }
    
    // 7. Read 40 bits of data
    for (i = 0U; i < 40U; i++) 
 80006fe:	2300      	movs	r3, #0
 8000700:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
 8000704:	e04c      	b.n	80007a0 <readDHT+0x1ec>
    {
        __HAL_TIM_SET_COUNTER(dht->htim, 0U);
 8000706:	687b      	ldr	r3, [r7, #4]
 8000708:	689b      	ldr	r3, [r3, #8]
 800070a:	681b      	ldr	r3, [r3, #0]
 800070c:	2200      	movs	r2, #0
 800070e:	625a      	str	r2, [r3, #36]	@ 0x24
        while (HAL_GPIO_ReadPin(dht->port, dht->pin) == GPIO_PIN_RESET) 
 8000710:	e008      	b.n	8000724 <readDHT+0x170>
        {
            if ((uint16_t)__HAL_TIM_GET_COUNTER(dht->htim) > DHT_TIMEOUT_TICKS) 
 8000712:	687b      	ldr	r3, [r7, #4]
 8000714:	689b      	ldr	r3, [r3, #8]
 8000716:	681b      	ldr	r3, [r3, #0]
 8000718:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800071a:	b29b      	uxth	r3, r3
 800071c:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8000720:	f200 80b7 	bhi.w	8000892 <readDHT+0x2de>
        while (HAL_GPIO_ReadPin(dht->port, dht->pin) == GPIO_PIN_RESET) 
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	681a      	ldr	r2, [r3, #0]
 8000728:	687b      	ldr	r3, [r7, #4]
 800072a:	889b      	ldrh	r3, [r3, #4]
 800072c:	4619      	mov	r1, r3
 800072e:	4610      	mov	r0, r2
 8000730:	f002 fb6c 	bl	8002e0c <HAL_GPIO_ReadPin>
 8000734:	4603      	mov	r3, r0
 8000736:	2b00      	cmp	r3, #0
 8000738:	d0eb      	beq.n	8000712 <readDHT+0x15e>
            {
                goto cleanup;
            }
        }
        
        __HAL_TIM_SET_COUNTER(dht->htim, 0U);
 800073a:	687b      	ldr	r3, [r7, #4]
 800073c:	689b      	ldr	r3, [r3, #8]
 800073e:	681b      	ldr	r3, [r3, #0]
 8000740:	2200      	movs	r2, #0
 8000742:	625a      	str	r2, [r3, #36]	@ 0x24
        while (HAL_GPIO_ReadPin(dht->port, dht->pin) == GPIO_PIN_SET) 
 8000744:	e008      	b.n	8000758 <readDHT+0x1a4>
        {
            if ((uint16_t)__HAL_TIM_GET_COUNTER(dht->htim) > DHT_TIMEOUT_TICKS) 
 8000746:	687b      	ldr	r3, [r7, #4]
 8000748:	689b      	ldr	r3, [r3, #8]
 800074a:	681b      	ldr	r3, [r3, #0]
 800074c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800074e:	b29b      	uxth	r3, r3
 8000750:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8000754:	f200 809f 	bhi.w	8000896 <readDHT+0x2e2>
        while (HAL_GPIO_ReadPin(dht->port, dht->pin) == GPIO_PIN_SET) 
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	681a      	ldr	r2, [r3, #0]
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	889b      	ldrh	r3, [r3, #4]
 8000760:	4619      	mov	r1, r3
 8000762:	4610      	mov	r0, r2
 8000764:	f002 fb52 	bl	8002e0c <HAL_GPIO_ReadPin>
 8000768:	4603      	mov	r3, r0
 800076a:	2b01      	cmp	r3, #1
 800076c:	d0eb      	beq.n	8000746 <readDHT+0x192>
            {
                goto cleanup;
            }
        }
        
        mTime1 = (uint16_t)__HAL_TIM_GET_COUNTER(dht->htim);
 800076e:	687b      	ldr	r3, [r7, #4]
 8000770:	689b      	ldr	r3, [r3, #8]
 8000772:	681b      	ldr	r3, [r3, #0]
 8000774:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000776:	873b      	strh	r3, [r7, #56]	@ 0x38
        mData[i] = ((mTime1 > DHT_BIT1_MIN_TICKS) && (mTime1 < DHT_BIT1_MAX_TICKS)) ? 1U : 0U;
 8000778:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 800077a:	2b3c      	cmp	r3, #60	@ 0x3c
 800077c:	d904      	bls.n	8000788 <readDHT+0x1d4>
 800077e:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8000780:	2b4f      	cmp	r3, #79	@ 0x4f
 8000782:	d801      	bhi.n	8000788 <readDHT+0x1d4>
 8000784:	2201      	movs	r2, #1
 8000786:	e000      	b.n	800078a <readDHT+0x1d6>
 8000788:	2200      	movs	r2, #0
 800078a:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 800078e:	3340      	adds	r3, #64	@ 0x40
 8000790:	443b      	add	r3, r7
 8000792:	f803 2c34 	strb.w	r2, [r3, #-52]
    for (i = 0U; i < 40U; i++) 
 8000796:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 800079a:	3301      	adds	r3, #1
 800079c:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
 80007a0:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 80007a4:	2b27      	cmp	r3, #39	@ 0x27
 80007a6:	d9ae      	bls.n	8000706 <readDHT+0x152>
    }
    
    // 8. Process data
    for (i = 0U; i < 8U; i++) 
 80007a8:	2300      	movs	r3, #0
 80007aa:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
 80007ae:	e013      	b.n	80007d8 <readDHT+0x224>
    {
        humVal = (humVal << 1U) | mData[i];
 80007b0:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80007b4:	005b      	lsls	r3, r3, #1
 80007b6:	b25a      	sxtb	r2, r3
 80007b8:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 80007bc:	3340      	adds	r3, #64	@ 0x40
 80007be:	443b      	add	r3, r7
 80007c0:	f813 3c34 	ldrb.w	r3, [r3, #-52]
 80007c4:	b25b      	sxtb	r3, r3
 80007c6:	4313      	orrs	r3, r2
 80007c8:	b25b      	sxtb	r3, r3
 80007ca:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
    for (i = 0U; i < 8U; i++) 
 80007ce:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 80007d2:	3301      	adds	r3, #1
 80007d4:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
 80007d8:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 80007dc:	2b07      	cmp	r3, #7
 80007de:	d9e7      	bls.n	80007b0 <readDHT+0x1fc>
    }
    
    for (i = 16U; i < 24U; i++) 
 80007e0:	2310      	movs	r3, #16
 80007e2:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
 80007e6:	e013      	b.n	8000810 <readDHT+0x25c>
    {
        tempVal = (tempVal << 1U) | mData[i];
 80007e8:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 80007ec:	005b      	lsls	r3, r3, #1
 80007ee:	b25a      	sxtb	r2, r3
 80007f0:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 80007f4:	3340      	adds	r3, #64	@ 0x40
 80007f6:	443b      	add	r3, r7
 80007f8:	f813 3c34 	ldrb.w	r3, [r3, #-52]
 80007fc:	b25b      	sxtb	r3, r3
 80007fe:	4313      	orrs	r3, r2
 8000800:	b25b      	sxtb	r3, r3
 8000802:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
    for (i = 16U; i < 24U; i++) 
 8000806:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 800080a:	3301      	adds	r3, #1
 800080c:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
 8000810:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 8000814:	2b17      	cmp	r3, #23
 8000816:	d9e7      	bls.n	80007e8 <readDHT+0x234>
    }
    
    for (i = 32U; i < 40U; i++) 
 8000818:	2320      	movs	r3, #32
 800081a:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
 800081e:	e013      	b.n	8000848 <readDHT+0x294>
    {
        parityVal = (parityVal << 1U) | mData[i];
 8000820:	f897 303d 	ldrb.w	r3, [r7, #61]	@ 0x3d
 8000824:	005b      	lsls	r3, r3, #1
 8000826:	b25a      	sxtb	r2, r3
 8000828:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 800082c:	3340      	adds	r3, #64	@ 0x40
 800082e:	443b      	add	r3, r7
 8000830:	f813 3c34 	ldrb.w	r3, [r3, #-52]
 8000834:	b25b      	sxtb	r3, r3
 8000836:	4313      	orrs	r3, r2
 8000838:	b25b      	sxtb	r3, r3
 800083a:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
    for (i = 32U; i < 40U; i++) 
 800083e:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 8000842:	3301      	adds	r3, #1
 8000844:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
 8000848:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 800084c:	2b27      	cmp	r3, #39	@ 0x27
 800084e:	d9e7      	bls.n	8000820 <readDHT+0x26c>
    }
    
    // 9. Validate checksum
    genParity = humVal + tempVal;
 8000850:	f897 203f 	ldrb.w	r2, [r7, #63]	@ 0x3f
 8000854:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8000858:	4413      	add	r3, r2
 800085a:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    if (parityVal == genParity) 
 800085e:	f897 203d 	ldrb.w	r2, [r7, #61]	@ 0x3d
 8000862:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8000866:	429a      	cmp	r2, r3
 8000868:	d117      	bne.n	800089a <readDHT+0x2e6>
    {
        dht->temperature = tempVal;
 800086a:	687b      	ldr	r3, [r7, #4]
 800086c:	f897 203e 	ldrb.w	r2, [r7, #62]	@ 0x3e
 8000870:	731a      	strb	r2, [r3, #12]
        dht->humidity = humVal;
 8000872:	687b      	ldr	r3, [r7, #4]
 8000874:	f897 203f 	ldrb.w	r2, [r7, #63]	@ 0x3f
 8000878:	735a      	strb	r2, [r3, #13]
        result = 1U;
 800087a:	2301      	movs	r3, #1
 800087c:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
 8000880:	e00c      	b.n	800089c <readDHT+0x2e8>
            goto cleanup;  // MISRA 15.5 - Single point of exit
 8000882:	bf00      	nop
 8000884:	e00a      	b.n	800089c <readDHT+0x2e8>
            goto cleanup;
 8000886:	bf00      	nop
 8000888:	e008      	b.n	800089c <readDHT+0x2e8>
            goto cleanup;
 800088a:	bf00      	nop
 800088c:	e006      	b.n	800089c <readDHT+0x2e8>
        goto cleanup;
 800088e:	bf00      	nop
 8000890:	e004      	b.n	800089c <readDHT+0x2e8>
                goto cleanup;
 8000892:	bf00      	nop
 8000894:	e002      	b.n	800089c <readDHT+0x2e8>
                goto cleanup;
 8000896:	bf00      	nop
 8000898:	e000      	b.n	800089c <readDHT+0x2e8>
    }
    
cleanup:
 800089a:	bf00      	nop
    (void)HAL_TIM_Base_Stop(dht->htim);  // MISRA 17.2
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	689b      	ldr	r3, [r3, #8]
 80008a0:	4618      	mov	r0, r3
 80008a2:	f003 ff89 	bl	80047b8 <HAL_TIM_Base_Stop>
  __ASM volatile ("cpsie i" : : : "memory");
 80008a6:	b662      	cpsie	i
}
 80008a8:	bf00      	nop
    __enable_irq();
    return result;
 80008aa:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 80008ae:	4618      	mov	r0, r3
 80008b0:	3740      	adds	r7, #64	@ 0x40
 80008b2:	46bd      	mov	sp, r7
 80008b4:	bd80      	pop	{r7, pc}
	...

080008b8 <CS_Select>:

#define NRF24_CSN_PORT   GPIOA
#define NRF24_CSN_PIN    GPIO_PIN_8

void CS_Select (void)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(NRF24_CSN_PORT, NRF24_CSN_PIN, GPIO_PIN_RESET);
 80008bc:	2200      	movs	r2, #0
 80008be:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80008c2:	4802      	ldr	r0, [pc, #8]	@ (80008cc <CS_Select+0x14>)
 80008c4:	f002 faba 	bl	8002e3c <HAL_GPIO_WritePin>
}
 80008c8:	bf00      	nop
 80008ca:	bd80      	pop	{r7, pc}
 80008cc:	40020000 	.word	0x40020000

080008d0 <CS_UnSelect>:

void CS_UnSelect (void)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(NRF24_CSN_PORT, NRF24_CSN_PIN, GPIO_PIN_SET);
 80008d4:	2201      	movs	r2, #1
 80008d6:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80008da:	4802      	ldr	r0, [pc, #8]	@ (80008e4 <CS_UnSelect+0x14>)
 80008dc:	f002 faae 	bl	8002e3c <HAL_GPIO_WritePin>
}
 80008e0:	bf00      	nop
 80008e2:	bd80      	pop	{r7, pc}
 80008e4:	40020000 	.word	0x40020000

080008e8 <CE_Enable>:

void CE_Enable (void)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(NRF24_CE_PORT, NRF24_CE_PIN, GPIO_PIN_SET);
 80008ec:	2201      	movs	r2, #1
 80008ee:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80008f2:	4802      	ldr	r0, [pc, #8]	@ (80008fc <CE_Enable+0x14>)
 80008f4:	f002 faa2 	bl	8002e3c <HAL_GPIO_WritePin>
}
 80008f8:	bf00      	nop
 80008fa:	bd80      	pop	{r7, pc}
 80008fc:	40020000 	.word	0x40020000

08000900 <CE_Disable>:

void CE_Disable (void)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(NRF24_CE_PORT, NRF24_CE_PIN, GPIO_PIN_RESET);
 8000904:	2200      	movs	r2, #0
 8000906:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800090a:	4802      	ldr	r0, [pc, #8]	@ (8000914 <CE_Disable+0x14>)
 800090c:	f002 fa96 	bl	8002e3c <HAL_GPIO_WritePin>
}
 8000910:	bf00      	nop
 8000912:	bd80      	pop	{r7, pc}
 8000914:	40020000 	.word	0x40020000

08000918 <nrf24_WriteReg>:

// write a single byte to the particular register
void nrf24_WriteReg (uint8_t Reg, uint8_t Data)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	b084      	sub	sp, #16
 800091c:	af00      	add	r7, sp, #0
 800091e:	4603      	mov	r3, r0
 8000920:	460a      	mov	r2, r1
 8000922:	71fb      	strb	r3, [r7, #7]
 8000924:	4613      	mov	r3, r2
 8000926:	71bb      	strb	r3, [r7, #6]
	uint8_t buf[2];
	buf[0] = Reg|1<<5;
 8000928:	79fb      	ldrb	r3, [r7, #7]
 800092a:	f043 0320 	orr.w	r3, r3, #32
 800092e:	b2db      	uxtb	r3, r3
 8000930:	733b      	strb	r3, [r7, #12]
	buf[1] = Data;
 8000932:	79bb      	ldrb	r3, [r7, #6]
 8000934:	737b      	strb	r3, [r7, #13]

	// Pull the CS Pin LOW to select the device
	CS_Select();
 8000936:	f7ff ffbf 	bl	80008b8 <CS_Select>

	HAL_SPI_Transmit(NRF24_SPI, buf, 2, 1000);
 800093a:	f107 010c 	add.w	r1, r7, #12
 800093e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000942:	2202      	movs	r2, #2
 8000944:	4804      	ldr	r0, [pc, #16]	@ (8000958 <nrf24_WriteReg+0x40>)
 8000946:	f003 f936 	bl	8003bb6 <HAL_SPI_Transmit>

	// Pull the CS HIGH to release the device
	CS_UnSelect();
 800094a:	f7ff ffc1 	bl	80008d0 <CS_UnSelect>
}
 800094e:	bf00      	nop
 8000950:	3710      	adds	r7, #16
 8000952:	46bd      	mov	sp, r7
 8000954:	bd80      	pop	{r7, pc}
 8000956:	bf00      	nop
 8000958:	20000364 	.word	0x20000364

0800095c <nrf24_WriteRegMulti>:

//write multiple bytes starting from a particular register
void nrf24_WriteRegMulti (uint8_t Reg, uint8_t *data, int size)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	b086      	sub	sp, #24
 8000960:	af00      	add	r7, sp, #0
 8000962:	4603      	mov	r3, r0
 8000964:	60b9      	str	r1, [r7, #8]
 8000966:	607a      	str	r2, [r7, #4]
 8000968:	73fb      	strb	r3, [r7, #15]
	uint8_t buf[2];
	buf[0] = Reg|1<<5;
 800096a:	7bfb      	ldrb	r3, [r7, #15]
 800096c:	f043 0320 	orr.w	r3, r3, #32
 8000970:	b2db      	uxtb	r3, r3
 8000972:	753b      	strb	r3, [r7, #20]
//	buf[1] = Data;

	// Pull the CS Pin LOW to select the device
	CS_Select();
 8000974:	f7ff ffa0 	bl	80008b8 <CS_Select>

	HAL_SPI_Transmit(NRF24_SPI, buf, 1, 100);
 8000978:	f107 0114 	add.w	r1, r7, #20
 800097c:	2364      	movs	r3, #100	@ 0x64
 800097e:	2201      	movs	r2, #1
 8000980:	4808      	ldr	r0, [pc, #32]	@ (80009a4 <nrf24_WriteRegMulti+0x48>)
 8000982:	f003 f918 	bl	8003bb6 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(NRF24_SPI, data, size, 1000);
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	b29a      	uxth	r2, r3
 800098a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800098e:	68b9      	ldr	r1, [r7, #8]
 8000990:	4804      	ldr	r0, [pc, #16]	@ (80009a4 <nrf24_WriteRegMulti+0x48>)
 8000992:	f003 f910 	bl	8003bb6 <HAL_SPI_Transmit>

	// Pull the CS HIGH to release the device
	CS_UnSelect();
 8000996:	f7ff ff9b 	bl	80008d0 <CS_UnSelect>
}
 800099a:	bf00      	nop
 800099c:	3718      	adds	r7, #24
 800099e:	46bd      	mov	sp, r7
 80009a0:	bd80      	pop	{r7, pc}
 80009a2:	bf00      	nop
 80009a4:	20000364 	.word	0x20000364

080009a8 <nrf24_ReadReg>:

uint8_t nrf24_ReadReg (uint8_t Reg)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	b084      	sub	sp, #16
 80009ac:	af00      	add	r7, sp, #0
 80009ae:	4603      	mov	r3, r0
 80009b0:	71fb      	strb	r3, [r7, #7]
	uint8_t data=0;
 80009b2:	2300      	movs	r3, #0
 80009b4:	73fb      	strb	r3, [r7, #15]

	// Pull the CS Pin LOW to select the device
	CS_Select();
 80009b6:	f7ff ff7f 	bl	80008b8 <CS_Select>

	HAL_SPI_Transmit(NRF24_SPI, &Reg, 1, 100);
 80009ba:	1df9      	adds	r1, r7, #7
 80009bc:	2364      	movs	r3, #100	@ 0x64
 80009be:	2201      	movs	r2, #1
 80009c0:	4808      	ldr	r0, [pc, #32]	@ (80009e4 <nrf24_ReadReg+0x3c>)
 80009c2:	f003 f8f8 	bl	8003bb6 <HAL_SPI_Transmit>
	HAL_SPI_Receive(NRF24_SPI, &data, 1, 100);
 80009c6:	f107 010f 	add.w	r1, r7, #15
 80009ca:	2364      	movs	r3, #100	@ 0x64
 80009cc:	2201      	movs	r2, #1
 80009ce:	4805      	ldr	r0, [pc, #20]	@ (80009e4 <nrf24_ReadReg+0x3c>)
 80009d0:	f003 fa35 	bl	8003e3e <HAL_SPI_Receive>

	// Pull the CS HIGH to release the device
	CS_UnSelect();
 80009d4:	f7ff ff7c 	bl	80008d0 <CS_UnSelect>

	return data;
 80009d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80009da:	4618      	mov	r0, r3
 80009dc:	3710      	adds	r7, #16
 80009de:	46bd      	mov	sp, r7
 80009e0:	bd80      	pop	{r7, pc}
 80009e2:	bf00      	nop
 80009e4:	20000364 	.word	0x20000364

080009e8 <nrf24_reset>:
	// Pull the CS HIGH to release the device
	CS_UnSelect();
}

void nrf24_reset(uint8_t REG)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	b088      	sub	sp, #32
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	4603      	mov	r3, r0
 80009f0:	71fb      	strb	r3, [r7, #7]
	if (REG == STATUS)
 80009f2:	79fb      	ldrb	r3, [r7, #7]
 80009f4:	2b07      	cmp	r3, #7
 80009f6:	d104      	bne.n	8000a02 <nrf24_reset+0x1a>
	{
		nrf24_WriteReg(STATUS, 0x00);
 80009f8:	2100      	movs	r1, #0
 80009fa:	2007      	movs	r0, #7
 80009fc:	f7ff ff8c 	bl	8000918 <nrf24_WriteReg>
	nrf24_WriteReg(RX_PW_P5, 0);
	nrf24_WriteReg(FIFO_STATUS, 0x11);
	nrf24_WriteReg(DYNPD, 0);
	nrf24_WriteReg(FEATURE, 0);
	}
}
 8000a00:	e090      	b.n	8000b24 <nrf24_reset+0x13c>
	else if (REG == FIFO_STATUS)
 8000a02:	79fb      	ldrb	r3, [r7, #7]
 8000a04:	2b17      	cmp	r3, #23
 8000a06:	d104      	bne.n	8000a12 <nrf24_reset+0x2a>
		nrf24_WriteReg(FIFO_STATUS, 0x11);
 8000a08:	2111      	movs	r1, #17
 8000a0a:	2017      	movs	r0, #23
 8000a0c:	f7ff ff84 	bl	8000918 <nrf24_WriteReg>
}
 8000a10:	e088      	b.n	8000b24 <nrf24_reset+0x13c>
	nrf24_WriteReg(CONFIG, 0x08);
 8000a12:	2108      	movs	r1, #8
 8000a14:	2000      	movs	r0, #0
 8000a16:	f7ff ff7f 	bl	8000918 <nrf24_WriteReg>
	nrf24_WriteReg(EN_AA, 0x3F);
 8000a1a:	213f      	movs	r1, #63	@ 0x3f
 8000a1c:	2001      	movs	r0, #1
 8000a1e:	f7ff ff7b 	bl	8000918 <nrf24_WriteReg>
	nrf24_WriteReg(EN_RXADDR, 0x03);
 8000a22:	2103      	movs	r1, #3
 8000a24:	2002      	movs	r0, #2
 8000a26:	f7ff ff77 	bl	8000918 <nrf24_WriteReg>
	nrf24_WriteReg(SETUP_AW, 0x03);
 8000a2a:	2103      	movs	r1, #3
 8000a2c:	2003      	movs	r0, #3
 8000a2e:	f7ff ff73 	bl	8000918 <nrf24_WriteReg>
	nrf24_WriteReg(SETUP_RETR, 0x03);
 8000a32:	2103      	movs	r1, #3
 8000a34:	2004      	movs	r0, #4
 8000a36:	f7ff ff6f 	bl	8000918 <nrf24_WriteReg>
	nrf24_WriteReg(RF_CH, 0x02);
 8000a3a:	2102      	movs	r1, #2
 8000a3c:	2005      	movs	r0, #5
 8000a3e:	f7ff ff6b 	bl	8000918 <nrf24_WriteReg>
	nrf24_WriteReg(RF_SETUP, 0x0E);
 8000a42:	210e      	movs	r1, #14
 8000a44:	2006      	movs	r0, #6
 8000a46:	f7ff ff67 	bl	8000918 <nrf24_WriteReg>
	nrf24_WriteReg(STATUS, 0x00);
 8000a4a:	2100      	movs	r1, #0
 8000a4c:	2007      	movs	r0, #7
 8000a4e:	f7ff ff63 	bl	8000918 <nrf24_WriteReg>
	nrf24_WriteReg(OBSERVE_TX, 0x00);
 8000a52:	2100      	movs	r1, #0
 8000a54:	2008      	movs	r0, #8
 8000a56:	f7ff ff5f 	bl	8000918 <nrf24_WriteReg>
	nrf24_WriteReg(CD, 0x00);
 8000a5a:	2100      	movs	r1, #0
 8000a5c:	2009      	movs	r0, #9
 8000a5e:	f7ff ff5b 	bl	8000918 <nrf24_WriteReg>
	uint8_t rx_addr_p0_def[5] = {0xE7, 0xE7, 0xE7, 0xE7, 0xE7};
 8000a62:	4a32      	ldr	r2, [pc, #200]	@ (8000b2c <nrf24_reset+0x144>)
 8000a64:	f107 0318 	add.w	r3, r7, #24
 8000a68:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000a6c:	6018      	str	r0, [r3, #0]
 8000a6e:	3304      	adds	r3, #4
 8000a70:	7019      	strb	r1, [r3, #0]
	nrf24_WriteRegMulti(RX_ADDR_P0, rx_addr_p0_def, 5);
 8000a72:	f107 0318 	add.w	r3, r7, #24
 8000a76:	2205      	movs	r2, #5
 8000a78:	4619      	mov	r1, r3
 8000a7a:	200a      	movs	r0, #10
 8000a7c:	f7ff ff6e 	bl	800095c <nrf24_WriteRegMulti>
	uint8_t rx_addr_p1_def[5] = {0xC2, 0xC2, 0xC2, 0xC2, 0xC2};
 8000a80:	4a2b      	ldr	r2, [pc, #172]	@ (8000b30 <nrf24_reset+0x148>)
 8000a82:	f107 0310 	add.w	r3, r7, #16
 8000a86:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000a8a:	6018      	str	r0, [r3, #0]
 8000a8c:	3304      	adds	r3, #4
 8000a8e:	7019      	strb	r1, [r3, #0]
	nrf24_WriteRegMulti(RX_ADDR_P1, rx_addr_p1_def, 5);
 8000a90:	f107 0310 	add.w	r3, r7, #16
 8000a94:	2205      	movs	r2, #5
 8000a96:	4619      	mov	r1, r3
 8000a98:	200b      	movs	r0, #11
 8000a9a:	f7ff ff5f 	bl	800095c <nrf24_WriteRegMulti>
	nrf24_WriteReg(RX_ADDR_P2, 0xC3);
 8000a9e:	21c3      	movs	r1, #195	@ 0xc3
 8000aa0:	200c      	movs	r0, #12
 8000aa2:	f7ff ff39 	bl	8000918 <nrf24_WriteReg>
	nrf24_WriteReg(RX_ADDR_P3, 0xC4);
 8000aa6:	21c4      	movs	r1, #196	@ 0xc4
 8000aa8:	200d      	movs	r0, #13
 8000aaa:	f7ff ff35 	bl	8000918 <nrf24_WriteReg>
	nrf24_WriteReg(RX_ADDR_P4, 0xC5);
 8000aae:	21c5      	movs	r1, #197	@ 0xc5
 8000ab0:	200e      	movs	r0, #14
 8000ab2:	f7ff ff31 	bl	8000918 <nrf24_WriteReg>
	nrf24_WriteReg(RX_ADDR_P5, 0xC6);
 8000ab6:	21c6      	movs	r1, #198	@ 0xc6
 8000ab8:	200f      	movs	r0, #15
 8000aba:	f7ff ff2d 	bl	8000918 <nrf24_WriteReg>
	uint8_t tx_addr_def[5] = {0xE7, 0xE7, 0xE7, 0xE7, 0xE7};
 8000abe:	4a1b      	ldr	r2, [pc, #108]	@ (8000b2c <nrf24_reset+0x144>)
 8000ac0:	f107 0308 	add.w	r3, r7, #8
 8000ac4:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000ac8:	6018      	str	r0, [r3, #0]
 8000aca:	3304      	adds	r3, #4
 8000acc:	7019      	strb	r1, [r3, #0]
	nrf24_WriteRegMulti(TX_ADDR, tx_addr_def, 5);
 8000ace:	f107 0308 	add.w	r3, r7, #8
 8000ad2:	2205      	movs	r2, #5
 8000ad4:	4619      	mov	r1, r3
 8000ad6:	2010      	movs	r0, #16
 8000ad8:	f7ff ff40 	bl	800095c <nrf24_WriteRegMulti>
	nrf24_WriteReg(RX_PW_P0, 0);
 8000adc:	2100      	movs	r1, #0
 8000ade:	2011      	movs	r0, #17
 8000ae0:	f7ff ff1a 	bl	8000918 <nrf24_WriteReg>
	nrf24_WriteReg(RX_PW_P1, 0);
 8000ae4:	2100      	movs	r1, #0
 8000ae6:	2012      	movs	r0, #18
 8000ae8:	f7ff ff16 	bl	8000918 <nrf24_WriteReg>
	nrf24_WriteReg(RX_PW_P2, 0);
 8000aec:	2100      	movs	r1, #0
 8000aee:	2013      	movs	r0, #19
 8000af0:	f7ff ff12 	bl	8000918 <nrf24_WriteReg>
	nrf24_WriteReg(RX_PW_P3, 0);
 8000af4:	2100      	movs	r1, #0
 8000af6:	2014      	movs	r0, #20
 8000af8:	f7ff ff0e 	bl	8000918 <nrf24_WriteReg>
	nrf24_WriteReg(RX_PW_P4, 0);
 8000afc:	2100      	movs	r1, #0
 8000afe:	2015      	movs	r0, #21
 8000b00:	f7ff ff0a 	bl	8000918 <nrf24_WriteReg>
	nrf24_WriteReg(RX_PW_P5, 0);
 8000b04:	2100      	movs	r1, #0
 8000b06:	2016      	movs	r0, #22
 8000b08:	f7ff ff06 	bl	8000918 <nrf24_WriteReg>
	nrf24_WriteReg(FIFO_STATUS, 0x11);
 8000b0c:	2111      	movs	r1, #17
 8000b0e:	2017      	movs	r0, #23
 8000b10:	f7ff ff02 	bl	8000918 <nrf24_WriteReg>
	nrf24_WriteReg(DYNPD, 0);
 8000b14:	2100      	movs	r1, #0
 8000b16:	201c      	movs	r0, #28
 8000b18:	f7ff fefe 	bl	8000918 <nrf24_WriteReg>
	nrf24_WriteReg(FEATURE, 0);
 8000b1c:	2100      	movs	r1, #0
 8000b1e:	201d      	movs	r0, #29
 8000b20:	f7ff fefa 	bl	8000918 <nrf24_WriteReg>
}
 8000b24:	bf00      	nop
 8000b26:	3720      	adds	r7, #32
 8000b28:	46bd      	mov	sp, r7
 8000b2a:	bd80      	pop	{r7, pc}
 8000b2c:	08007420 	.word	0x08007420
 8000b30:	08007428 	.word	0x08007428

08000b34 <NRF24_Init>:

void NRF24_Init (void)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	af00      	add	r7, sp, #0
	// disable the chip before configuring the device
	CE_Disable();
 8000b38:	f7ff fee2 	bl	8000900 <CE_Disable>


	// reset everything
	nrf24_reset (0);
 8000b3c:	2000      	movs	r0, #0
 8000b3e:	f7ff ff53 	bl	80009e8 <nrf24_reset>

	nrf24_WriteReg(CONFIG, 0);  // will be configured later
 8000b42:	2100      	movs	r1, #0
 8000b44:	2000      	movs	r0, #0
 8000b46:	f7ff fee7 	bl	8000918 <nrf24_WriteReg>

	nrf24_WriteReg(EN_AA, 0);  // No Auto ACK
 8000b4a:	2100      	movs	r1, #0
 8000b4c:	2001      	movs	r0, #1
 8000b4e:	f7ff fee3 	bl	8000918 <nrf24_WriteReg>

	nrf24_WriteReg (EN_RXADDR, 0);  // Not Enabling any data pipe right now
 8000b52:	2100      	movs	r1, #0
 8000b54:	2002      	movs	r0, #2
 8000b56:	f7ff fedf 	bl	8000918 <nrf24_WriteReg>

	nrf24_WriteReg (SETUP_AW, 0x03);  // 5 Bytes for the TX/RX address
 8000b5a:	2103      	movs	r1, #3
 8000b5c:	2003      	movs	r0, #3
 8000b5e:	f7ff fedb 	bl	8000918 <nrf24_WriteReg>

	nrf24_WriteReg (SETUP_RETR, 0);   // No retransmission
 8000b62:	2100      	movs	r1, #0
 8000b64:	2004      	movs	r0, #4
 8000b66:	f7ff fed7 	bl	8000918 <nrf24_WriteReg>

	nrf24_WriteReg (RF_CH, 0);  // will be setup during Tx or RX
 8000b6a:	2100      	movs	r1, #0
 8000b6c:	2005      	movs	r0, #5
 8000b6e:	f7ff fed3 	bl	8000918 <nrf24_WriteReg>

	nrf24_WriteReg (RF_SETUP, 0x0E);   // Power= 0db, data rate = 2Mbps
 8000b72:	210e      	movs	r1, #14
 8000b74:	2006      	movs	r0, #6
 8000b76:	f7ff fecf 	bl	8000918 <nrf24_WriteReg>

	// Enable the chip after configuring the device
	CE_Enable();
 8000b7a:	f7ff feb5 	bl	80008e8 <CE_Enable>

}
 8000b7e:	bf00      	nop
 8000b80:	bd80      	pop	{r7, pc}

08000b82 <NRF24_RxMode>:

	return 0;
}

void NRF24_RxMode (uint8_t *Address, uint8_t channel)
{
 8000b82:	b580      	push	{r7, lr}
 8000b84:	b084      	sub	sp, #16
 8000b86:	af00      	add	r7, sp, #0
 8000b88:	6078      	str	r0, [r7, #4]
 8000b8a:	460b      	mov	r3, r1
 8000b8c:	70fb      	strb	r3, [r7, #3]
	// disable the chip before configuring the device
	CE_Disable();
 8000b8e:	f7ff feb7 	bl	8000900 <CE_Disable>

	nrf24_reset (STATUS);
 8000b92:	2007      	movs	r0, #7
 8000b94:	f7ff ff28 	bl	80009e8 <nrf24_reset>

	nrf24_WriteReg (RF_CH, channel);  // select the channel
 8000b98:	78fb      	ldrb	r3, [r7, #3]
 8000b9a:	4619      	mov	r1, r3
 8000b9c:	2005      	movs	r0, #5
 8000b9e:	f7ff febb 	bl	8000918 <nrf24_WriteReg>

	// select data pipe 2
	uint8_t en_rxaddr = nrf24_ReadReg(EN_RXADDR);
 8000ba2:	2002      	movs	r0, #2
 8000ba4:	f7ff ff00 	bl	80009a8 <nrf24_ReadReg>
 8000ba8:	4603      	mov	r3, r0
 8000baa:	73fb      	strb	r3, [r7, #15]
	en_rxaddr = en_rxaddr | (1<<2);
 8000bac:	7bfb      	ldrb	r3, [r7, #15]
 8000bae:	f043 0304 	orr.w	r3, r3, #4
 8000bb2:	73fb      	strb	r3, [r7, #15]
	nrf24_WriteReg (EN_RXADDR, en_rxaddr);
 8000bb4:	7bfb      	ldrb	r3, [r7, #15]
 8000bb6:	4619      	mov	r1, r3
 8000bb8:	2002      	movs	r0, #2
 8000bba:	f7ff fead 	bl	8000918 <nrf24_WriteReg>
	 * Pipe 1 ADDR = 0xAABBCCDD11
	 * Pipe 2 ADDR = 0xAABBCCDD22
	 * Pipe 3 ADDR = 0xAABBCCDD33
	 *
	 */
	nrf24_WriteRegMulti(RX_ADDR_P1, Address, 5);  // Write the Pipe1 address
 8000bbe:	2205      	movs	r2, #5
 8000bc0:	6879      	ldr	r1, [r7, #4]
 8000bc2:	200b      	movs	r0, #11
 8000bc4:	f7ff feca 	bl	800095c <nrf24_WriteRegMulti>
	nrf24_WriteReg(RX_ADDR_P2, 0xEE);  // Write the Pipe2 LSB address
 8000bc8:	21ee      	movs	r1, #238	@ 0xee
 8000bca:	200c      	movs	r0, #12
 8000bcc:	f7ff fea4 	bl	8000918 <nrf24_WriteReg>

	nrf24_WriteReg (RX_PW_P2, 32);   // 32 bit payload size for pipe 2
 8000bd0:	2120      	movs	r1, #32
 8000bd2:	2013      	movs	r0, #19
 8000bd4:	f7ff fea0 	bl	8000918 <nrf24_WriteReg>


	// power up the device in Rx mode
	uint8_t config = nrf24_ReadReg(CONFIG);
 8000bd8:	2000      	movs	r0, #0
 8000bda:	f7ff fee5 	bl	80009a8 <nrf24_ReadReg>
 8000bde:	4603      	mov	r3, r0
 8000be0:	73bb      	strb	r3, [r7, #14]
	config = config | (1<<1) | (1<<0);
 8000be2:	7bbb      	ldrb	r3, [r7, #14]
 8000be4:	f043 0303 	orr.w	r3, r3, #3
 8000be8:	73bb      	strb	r3, [r7, #14]
	nrf24_WriteReg (CONFIG, config);
 8000bea:	7bbb      	ldrb	r3, [r7, #14]
 8000bec:	4619      	mov	r1, r3
 8000bee:	2000      	movs	r0, #0
 8000bf0:	f7ff fe92 	bl	8000918 <nrf24_WriteReg>

	// Enable the chip after configuring the device
	CE_Enable();
 8000bf4:	f7ff fe78 	bl	80008e8 <CE_Enable>
}
 8000bf8:	bf00      	nop
 8000bfa:	3710      	adds	r7, #16
 8000bfc:	46bd      	mov	sp, r7
 8000bfe:	bd80      	pop	{r7, pc}

08000c00 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000c00:	b480      	push	{r7}
 8000c02:	b085      	sub	sp, #20
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	60f8      	str	r0, [r7, #12]
 8000c08:	60b9      	str	r1, [r7, #8]
 8000c0a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000c0c:	68fb      	ldr	r3, [r7, #12]
 8000c0e:	4a07      	ldr	r2, [pc, #28]	@ (8000c2c <vApplicationGetIdleTaskMemory+0x2c>)
 8000c10:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000c12:	68bb      	ldr	r3, [r7, #8]
 8000c14:	4a06      	ldr	r2, [pc, #24]	@ (8000c30 <vApplicationGetIdleTaskMemory+0x30>)
 8000c16:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	2280      	movs	r2, #128	@ 0x80
 8000c1c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000c1e:	bf00      	nop
 8000c20:	3714      	adds	r7, #20
 8000c22:	46bd      	mov	sp, r7
 8000c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c28:	4770      	bx	lr
 8000c2a:	bf00      	nop
 8000c2c:	2000007c 	.word	0x2000007c
 8000c30:	2000011c 	.word	0x2000011c

08000c34 <initGripper>:
 */

#include "gripper.h"

void initGripper(gripper_t *gripper, TIM_HandleTypeDef *htim, uint32_t channel)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	b084      	sub	sp, #16
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	60f8      	str	r0, [r7, #12]
 8000c3c:	60b9      	str	r1, [r7, #8]
 8000c3e:	607a      	str	r2, [r7, #4]
    // MISRA 11.3 - No implicit pointer conversion
    initServo(&gripper->servo, (TIM_HandleTypeDef*)htim, channel);
 8000c40:	68fb      	ldr	r3, [r7, #12]
 8000c42:	687a      	ldr	r2, [r7, #4]
 8000c44:	68b9      	ldr	r1, [r7, #8]
 8000c46:	4618      	mov	r0, r3
 8000c48:	f000 fe1c 	bl	8001884 <initServo>
    
    // MISRA 17.2 - Ignore return value (release returns void but rule applies generally)
    (void)release(gripper);  // Initialize to released position
 8000c4c:	68f8      	ldr	r0, [r7, #12]
 8000c4e:	f000 f811 	bl	8000c74 <release>
}
 8000c52:	bf00      	nop
 8000c54:	3710      	adds	r7, #16
 8000c56:	46bd      	mov	sp, r7
 8000c58:	bd80      	pop	{r7, pc}

08000c5a <grip>:

void grip(gripper_t *gripper)
{
 8000c5a:	b580      	push	{r7, lr}
 8000c5c:	b082      	sub	sp, #8
 8000c5e:	af00      	add	r7, sp, #0
 8000c60:	6078      	str	r0, [r7, #4]
    // MISRA 10.1 - Literal matches parameter type (setAngleServo expects int16_t)
    setAngleServo(&gripper->servo, (int16_t)180);  // MISRA 11.3 - Proper parameter passing
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	21b4      	movs	r1, #180	@ 0xb4
 8000c66:	4618      	mov	r0, r3
 8000c68:	f000 fe28 	bl	80018bc <setAngleServo>
}
 8000c6c:	bf00      	nop
 8000c6e:	3708      	adds	r7, #8
 8000c70:	46bd      	mov	sp, r7
 8000c72:	bd80      	pop	{r7, pc}

08000c74 <release>:

void release(gripper_t *gripper)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	b082      	sub	sp, #8
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	6078      	str	r0, [r7, #4]
    setAngleServo(&gripper->servo, (int16_t)0);  // MISRA 10.1/11.3 - Type safety
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	2100      	movs	r1, #0
 8000c80:	4618      	mov	r0, r3
 8000c82:	f000 fe1b 	bl	80018bc <setAngleServo>
 8000c86:	bf00      	nop
 8000c88:	3708      	adds	r7, #8
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	bd80      	pop	{r7, pc}
	...

08000c90 <processJoystick>:
dht11_t dht;
soil_moisture_t soilSensor;

/* USER CODE BEGIN 0 */
void processJoystick(uint8_t *data)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b086      	sub	sp, #24
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	6078      	str	r0, [r7, #4]
    /* MISRA 10.3 - Cast to uint16_t to ensure correct type */
    uint16_t RY = (uint16_t)((data[0] << 8) | data[1]);  
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	781b      	ldrb	r3, [r3, #0]
 8000c9c:	021b      	lsls	r3, r3, #8
 8000c9e:	b21a      	sxth	r2, r3
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	3301      	adds	r3, #1
 8000ca4:	781b      	ldrb	r3, [r3, #0]
 8000ca6:	b21b      	sxth	r3, r3
 8000ca8:	4313      	orrs	r3, r2
 8000caa:	b21b      	sxth	r3, r3
 8000cac:	82fb      	strh	r3, [r7, #22]
    uint16_t RX = (uint16_t)((data[2] << 8) | data[3]);
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	3302      	adds	r3, #2
 8000cb2:	781b      	ldrb	r3, [r3, #0]
 8000cb4:	021b      	lsls	r3, r3, #8
 8000cb6:	b21a      	sxth	r2, r3
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	3303      	adds	r3, #3
 8000cbc:	781b      	ldrb	r3, [r3, #0]
 8000cbe:	b21b      	sxth	r3, r3
 8000cc0:	4313      	orrs	r3, r2
 8000cc2:	b21b      	sxth	r3, r3
 8000cc4:	82bb      	strh	r3, [r7, #20]
    uint16_t LY = (uint16_t)((data[4] << 8) | data[5]);
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	3304      	adds	r3, #4
 8000cca:	781b      	ldrb	r3, [r3, #0]
 8000ccc:	021b      	lsls	r3, r3, #8
 8000cce:	b21a      	sxth	r2, r3
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	3305      	adds	r3, #5
 8000cd4:	781b      	ldrb	r3, [r3, #0]
 8000cd6:	b21b      	sxth	r3, r3
 8000cd8:	4313      	orrs	r3, r2
 8000cda:	b21b      	sxth	r3, r3
 8000cdc:	827b      	strh	r3, [r7, #18]
    uint16_t LX = (uint16_t)((data[6] << 8) | data[7]);
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	3306      	adds	r3, #6
 8000ce2:	781b      	ldrb	r3, [r3, #0]
 8000ce4:	021b      	lsls	r3, r3, #8
 8000ce6:	b21a      	sxth	r2, r3
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	3307      	adds	r3, #7
 8000cec:	781b      	ldrb	r3, [r3, #0]
 8000cee:	b21b      	sxth	r3, r3
 8000cf0:	4313      	orrs	r3, r2
 8000cf2:	b21b      	sxth	r3, r3
 8000cf4:	823b      	strh	r3, [r7, #16]
    uint8_t RB = data[8];  // Original type preserved
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	7a1b      	ldrb	r3, [r3, #8]
 8000cfa:	73fb      	strb	r3, [r7, #15]
    uint8_t LB = data[9];
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	7a5b      	ldrb	r3, [r3, #9]
 8000d00:	73bb      	strb	r3, [r7, #14]

    /* Original logic exactly preserved */
    if (LY > 3000) {  // MISRA 10.1 - Literal remains same
 8000d02:	8a7b      	ldrh	r3, [r7, #18]
 8000d04:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 8000d08:	4293      	cmp	r3, r2
 8000d0a:	d902      	bls.n	8000d12 <processJoystick+0x82>
        moveForward();
 8000d0c:	f000 fc8c 	bl	8001628 <moveForward>
 8000d10:	e017      	b.n	8000d42 <processJoystick+0xb2>
    } else if (LY < 1000) {
 8000d12:	8a7b      	ldrh	r3, [r7, #18]
 8000d14:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8000d18:	d202      	bcs.n	8000d20 <processJoystick+0x90>
        moveBackward();
 8000d1a:	f000 fca9 	bl	8001670 <moveBackward>
 8000d1e:	e010      	b.n	8000d42 <processJoystick+0xb2>
    } else if (RX > 3000) {
 8000d20:	8abb      	ldrh	r3, [r7, #20]
 8000d22:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 8000d26:	4293      	cmp	r3, r2
 8000d28:	d902      	bls.n	8000d30 <processJoystick+0xa0>
        turnRight();
 8000d2a:	f000 fce9 	bl	8001700 <turnRight>
 8000d2e:	e008      	b.n	8000d42 <processJoystick+0xb2>
    } else if (RX < 1000) {
 8000d30:	8abb      	ldrh	r3, [r7, #20]
 8000d32:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8000d36:	d202      	bcs.n	8000d3e <processJoystick+0xae>
        turnLeft();
 8000d38:	f000 fcbe 	bl	80016b8 <turnLeft>
 8000d3c:	e001      	b.n	8000d42 <processJoystick+0xb2>
    } else {
        stopMotors();
 8000d3e:	f000 fd03 	bl	8001748 <stopMotors>
    }

    if (RB) {  
 8000d42:	7bfb      	ldrb	r3, [r7, #15]
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	d003      	beq.n	8000d50 <processJoystick+0xc0>
        grip(&gripper);
 8000d48:	4806      	ldr	r0, [pc, #24]	@ (8000d64 <processJoystick+0xd4>)
 8000d4a:	f7ff ff86 	bl	8000c5a <grip>
    } else if (LB) {
        release(&gripper);
    }
}
 8000d4e:	e005      	b.n	8000d5c <processJoystick+0xcc>
    } else if (LB) {
 8000d50:	7bbb      	ldrb	r3, [r7, #14]
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	d002      	beq.n	8000d5c <processJoystick+0xcc>
        release(&gripper);
 8000d56:	4803      	ldr	r0, [pc, #12]	@ (8000d64 <processJoystick+0xd4>)
 8000d58:	f7ff ff8c 	bl	8000c74 <release>
}
 8000d5c:	bf00      	nop
 8000d5e:	3718      	adds	r7, #24
 8000d60:	46bd      	mov	sp, r7
 8000d62:	bd80      	pop	{r7, pc}
 8000d64:	20000584 	.word	0x20000584

08000d68 <checkSoilAndPump>:

void checkSoilAndPump()
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	af00      	add	r7, sp, #0
	  readMoisture(&soilSensor);  
 8000d6c:	4807      	ldr	r0, [pc, #28]	@ (8000d8c <checkSoilAndPump+0x24>)
 8000d6e:	f000 fe1d 	bl	80019ac <readMoisture>
    if (soilSensor.moisture < 40) {  
 8000d72:	4b06      	ldr	r3, [pc, #24]	@ (8000d8c <checkSoilAndPump+0x24>)
 8000d74:	889b      	ldrh	r3, [r3, #4]
 8000d76:	2b27      	cmp	r3, #39	@ 0x27
 8000d78:	d803      	bhi.n	8000d82 <checkSoilAndPump+0x1a>
        setPump(ON);
 8000d7a:	2001      	movs	r0, #1
 8000d7c:	f000 fd70 	bl	8001860 <setPump>
    } else {
        setPump(OFF);
    }
}
 8000d80:	e002      	b.n	8000d88 <checkSoilAndPump+0x20>
        setPump(OFF);
 8000d82:	2000      	movs	r0, #0
 8000d84:	f000 fd6c 	bl	8001860 <setPump>
}
 8000d88:	bf00      	nop
 8000d8a:	bd80      	pop	{r7, pc}
 8000d8c:	200005a0 	.word	0x200005a0

08000d90 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d90:	b5b0      	push	{r4, r5, r7, lr}
 8000d92:	b096      	sub	sp, #88	@ 0x58
 8000d94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
	NRF24_Init();
 8000d96:	f7ff fecd 	bl	8000b34 <NRF24_Init>
	NRF24_RxMode((uint8_t*)rxAddress, 52); // MISRA 11.3 - Added cast
 8000d9a:	2134      	movs	r1, #52	@ 0x34
 8000d9c:	4833      	ldr	r0, [pc, #204]	@ (8000e6c <main+0xdc>)
 8000d9e:	f7ff fef0 	bl	8000b82 <NRF24_RxMode>
	initAllMotors();
 8000da2:	f000 fc1b 	bl	80015dc <initAllMotors>
	initGripper(&gripper, &htim2, TIM_CHANNEL_1);
 8000da6:	2200      	movs	r2, #0
 8000da8:	4931      	ldr	r1, [pc, #196]	@ (8000e70 <main+0xe0>)
 8000daa:	4832      	ldr	r0, [pc, #200]	@ (8000e74 <main+0xe4>)
 8000dac:	f7ff ff42 	bl	8000c34 <initGripper>
	initDHT(&dht, &htim3, GPIOB, GPIO_PIN_1);
 8000db0:	2302      	movs	r3, #2
 8000db2:	4a31      	ldr	r2, [pc, #196]	@ (8000e78 <main+0xe8>)
 8000db4:	4931      	ldr	r1, [pc, #196]	@ (8000e7c <main+0xec>)
 8000db6:	4832      	ldr	r0, [pc, #200]	@ (8000e80 <main+0xf0>)
 8000db8:	f7ff fbb7 	bl	800052a <initDHT>
	initSoilMoisture(&soilSensor, &hadc3);
 8000dbc:	4931      	ldr	r1, [pc, #196]	@ (8000e84 <main+0xf4>)
 8000dbe:	4832      	ldr	r0, [pc, #200]	@ (8000e88 <main+0xf8>)
 8000dc0:	f000 fdcc 	bl	800195c <initSoilMoisture>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000dc4:	f001 f96a 	bl	800209c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000dc8:	f000 f86c 	bl	8000ea4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000dcc:	f000 fb36 	bl	800143c <MX_GPIO_Init>
  MX_ADC3_Init();
 8000dd0:	f000 f8d6 	bl	8000f80 <MX_ADC3_Init>
  MX_TIM2_Init();
 8000dd4:	f000 f958 	bl	8001088 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000dd8:	f000 f9cc 	bl	8001174 <MX_TIM3_Init>
  MX_TIM10_Init();
 8000ddc:	f000 fa18 	bl	8001210 <MX_TIM10_Init>
  MX_TIM11_Init();
 8000de0:	f000 fa64 	bl	80012ac <MX_TIM11_Init>
  MX_TIM12_Init();
 8000de4:	f000 fab0 	bl	8001348 <MX_TIM12_Init>
  MX_USART2_UART_Init();
 8000de8:	f000 fafe 	bl	80013e8 <MX_USART2_UART_Init>
  MX_SPI3_Init();
 8000dec:	f000 f91a 	bl	8001024 <MX_SPI3_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of TASK1 */
  osThreadDef(TASK1, TASK1_Init, osPriorityNormal, 0, 128);
 8000df0:	4b26      	ldr	r3, [pc, #152]	@ (8000e8c <main+0xfc>)
 8000df2:	f107 043c 	add.w	r4, r7, #60	@ 0x3c
 8000df6:	461d      	mov	r5, r3
 8000df8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000dfa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000dfc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000e00:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  TASK1Handle = osThreadCreate(osThread(TASK1), NULL);
 8000e04:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8000e08:	2100      	movs	r1, #0
 8000e0a:	4618      	mov	r0, r3
 8000e0c:	f004 ffb5 	bl	8005d7a <osThreadCreate>
 8000e10:	4603      	mov	r3, r0
 8000e12:	4a1f      	ldr	r2, [pc, #124]	@ (8000e90 <main+0x100>)
 8000e14:	6013      	str	r3, [r2, #0]

  /* definition and creation of TASK2 */
  osThreadDef(TASK2, TASK2_Init, osPriorityNormal, 0, 128);
 8000e16:	4b1f      	ldr	r3, [pc, #124]	@ (8000e94 <main+0x104>)
 8000e18:	f107 0420 	add.w	r4, r7, #32
 8000e1c:	461d      	mov	r5, r3
 8000e1e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000e20:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000e22:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000e26:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  TASK2Handle = osThreadCreate(osThread(TASK2), NULL);
 8000e2a:	f107 0320 	add.w	r3, r7, #32
 8000e2e:	2100      	movs	r1, #0
 8000e30:	4618      	mov	r0, r3
 8000e32:	f004 ffa2 	bl	8005d7a <osThreadCreate>
 8000e36:	4603      	mov	r3, r0
 8000e38:	4a17      	ldr	r2, [pc, #92]	@ (8000e98 <main+0x108>)
 8000e3a:	6013      	str	r3, [r2, #0]

  /* definition and creation of TASK3 */
  osThreadDef(TASK3, TASK3_Init, osPriorityNormal, 0, 128);
 8000e3c:	4b17      	ldr	r3, [pc, #92]	@ (8000e9c <main+0x10c>)
 8000e3e:	1d3c      	adds	r4, r7, #4
 8000e40:	461d      	mov	r5, r3
 8000e42:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000e44:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000e46:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000e4a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  TASK3Handle = osThreadCreate(osThread(TASK3), NULL);
 8000e4e:	1d3b      	adds	r3, r7, #4
 8000e50:	2100      	movs	r1, #0
 8000e52:	4618      	mov	r0, r3
 8000e54:	f004 ff91 	bl	8005d7a <osThreadCreate>
 8000e58:	4603      	mov	r3, r0
 8000e5a:	4a11      	ldr	r2, [pc, #68]	@ (8000ea0 <main+0x110>)
 8000e5c:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000e5e:	f004 ff85 	bl	8005d6c <osKernelStart>
  while (1) // MISRA 15.4 - Exception for main loop
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		HAL_Delay(100);  
 8000e62:	2064      	movs	r0, #100	@ 0x64
 8000e64:	f001 f95c 	bl	8002120 <HAL_Delay>
 8000e68:	e7fb      	b.n	8000e62 <main+0xd2>
 8000e6a:	bf00      	nop
 8000e6c:	080074a4 	.word	0x080074a4
 8000e70:	200003bc 	.word	0x200003bc
 8000e74:	20000584 	.word	0x20000584
 8000e78:	40020400 	.word	0x40020400
 8000e7c:	20000404 	.word	0x20000404
 8000e80:	20000590 	.word	0x20000590
 8000e84:	2000031c 	.word	0x2000031c
 8000e88:	200005a0 	.word	0x200005a0
 8000e8c:	08007438 	.word	0x08007438
 8000e90:	2000056c 	.word	0x2000056c
 8000e94:	0800745c 	.word	0x0800745c
 8000e98:	20000570 	.word	0x20000570
 8000e9c:	08007480 	.word	0x08007480
 8000ea0:	20000574 	.word	0x20000574

08000ea4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b094      	sub	sp, #80	@ 0x50
 8000ea8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000eaa:	f107 031c 	add.w	r3, r7, #28
 8000eae:	2234      	movs	r2, #52	@ 0x34
 8000eb0:	2100      	movs	r1, #0
 8000eb2:	4618      	mov	r0, r3
 8000eb4:	f006 f9ce 	bl	8007254 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000eb8:	f107 0308 	add.w	r3, r7, #8
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	601a      	str	r2, [r3, #0]
 8000ec0:	605a      	str	r2, [r3, #4]
 8000ec2:	609a      	str	r2, [r3, #8]
 8000ec4:	60da      	str	r2, [r3, #12]
 8000ec6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ec8:	2300      	movs	r3, #0
 8000eca:	607b      	str	r3, [r7, #4]
 8000ecc:	4b2a      	ldr	r3, [pc, #168]	@ (8000f78 <SystemClock_Config+0xd4>)
 8000ece:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ed0:	4a29      	ldr	r2, [pc, #164]	@ (8000f78 <SystemClock_Config+0xd4>)
 8000ed2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000ed6:	6413      	str	r3, [r2, #64]	@ 0x40
 8000ed8:	4b27      	ldr	r3, [pc, #156]	@ (8000f78 <SystemClock_Config+0xd4>)
 8000eda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000edc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000ee0:	607b      	str	r3, [r7, #4]
 8000ee2:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	603b      	str	r3, [r7, #0]
 8000ee8:	4b24      	ldr	r3, [pc, #144]	@ (8000f7c <SystemClock_Config+0xd8>)
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000ef0:	4a22      	ldr	r2, [pc, #136]	@ (8000f7c <SystemClock_Config+0xd8>)
 8000ef2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000ef6:	6013      	str	r3, [r2, #0]
 8000ef8:	4b20      	ldr	r3, [pc, #128]	@ (8000f7c <SystemClock_Config+0xd8>)
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000f00:	603b      	str	r3, [r7, #0]
 8000f02:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000f04:	2302      	movs	r3, #2
 8000f06:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f08:	2301      	movs	r3, #1
 8000f0a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000f0c:	2310      	movs	r3, #16
 8000f0e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f10:	2302      	movs	r3, #2
 8000f12:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000f14:	2300      	movs	r3, #0
 8000f16:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000f18:	2310      	movs	r3, #16
 8000f1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000f1c:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8000f20:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000f22:	2304      	movs	r3, #4
 8000f24:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000f26:	2302      	movs	r3, #2
 8000f28:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000f2a:	2302      	movs	r3, #2
 8000f2c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f2e:	f107 031c 	add.w	r3, r7, #28
 8000f32:	4618      	mov	r0, r3
 8000f34:	f002 fb18 	bl	8003568 <HAL_RCC_OscConfig>
 8000f38:	4603      	mov	r3, r0
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d001      	beq.n	8000f42 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000f3e:	f000 fb47 	bl	80015d0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f42:	230f      	movs	r3, #15
 8000f44:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f46:	2302      	movs	r3, #2
 8000f48:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000f4e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000f52:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f54:	2300      	movs	r3, #0
 8000f56:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000f58:	f107 0308 	add.w	r3, r7, #8
 8000f5c:	2102      	movs	r1, #2
 8000f5e:	4618      	mov	r0, r3
 8000f60:	f001 ff86 	bl	8002e70 <HAL_RCC_ClockConfig>
 8000f64:	4603      	mov	r3, r0
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d001      	beq.n	8000f6e <SystemClock_Config+0xca>
  {
    Error_Handler();
 8000f6a:	f000 fb31 	bl	80015d0 <Error_Handler>
  }
}
 8000f6e:	bf00      	nop
 8000f70:	3750      	adds	r7, #80	@ 0x50
 8000f72:	46bd      	mov	sp, r7
 8000f74:	bd80      	pop	{r7, pc}
 8000f76:	bf00      	nop
 8000f78:	40023800 	.word	0x40023800
 8000f7c:	40007000 	.word	0x40007000

08000f80 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b084      	sub	sp, #16
 8000f84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000f86:	463b      	mov	r3, r7
 8000f88:	2200      	movs	r2, #0
 8000f8a:	601a      	str	r2, [r3, #0]
 8000f8c:	605a      	str	r2, [r3, #4]
 8000f8e:	609a      	str	r2, [r3, #8]
 8000f90:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC3_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 8000f92:	4b21      	ldr	r3, [pc, #132]	@ (8001018 <MX_ADC3_Init+0x98>)
 8000f94:	4a21      	ldr	r2, [pc, #132]	@ (800101c <MX_ADC3_Init+0x9c>)
 8000f96:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV6;
 8000f98:	4b1f      	ldr	r3, [pc, #124]	@ (8001018 <MX_ADC3_Init+0x98>)
 8000f9a:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8000f9e:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8000fa0:	4b1d      	ldr	r3, [pc, #116]	@ (8001018 <MX_ADC3_Init+0x98>)
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = DISABLE;
 8000fa6:	4b1c      	ldr	r3, [pc, #112]	@ (8001018 <MX_ADC3_Init+0x98>)
 8000fa8:	2200      	movs	r2, #0
 8000faa:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = ENABLE;
 8000fac:	4b1a      	ldr	r3, [pc, #104]	@ (8001018 <MX_ADC3_Init+0x98>)
 8000fae:	2201      	movs	r2, #1
 8000fb0:	761a      	strb	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000fb2:	4b19      	ldr	r3, [pc, #100]	@ (8001018 <MX_ADC3_Init+0x98>)
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000fba:	4b17      	ldr	r3, [pc, #92]	@ (8001018 <MX_ADC3_Init+0x98>)
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000fc0:	4b15      	ldr	r3, [pc, #84]	@ (8001018 <MX_ADC3_Init+0x98>)
 8000fc2:	4a17      	ldr	r2, [pc, #92]	@ (8001020 <MX_ADC3_Init+0xa0>)
 8000fc4:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000fc6:	4b14      	ldr	r3, [pc, #80]	@ (8001018 <MX_ADC3_Init+0x98>)
 8000fc8:	2200      	movs	r2, #0
 8000fca:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 8000fcc:	4b12      	ldr	r3, [pc, #72]	@ (8001018 <MX_ADC3_Init+0x98>)
 8000fce:	2201      	movs	r2, #1
 8000fd0:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8000fd2:	4b11      	ldr	r3, [pc, #68]	@ (8001018 <MX_ADC3_Init+0x98>)
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000fda:	4b0f      	ldr	r3, [pc, #60]	@ (8001018 <MX_ADC3_Init+0x98>)
 8000fdc:	2201      	movs	r2, #1
 8000fde:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000fe0:	480d      	ldr	r0, [pc, #52]	@ (8001018 <MX_ADC3_Init+0x98>)
 8000fe2:	f001 f8c1 	bl	8002168 <HAL_ADC_Init>
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d001      	beq.n	8000ff0 <MX_ADC3_Init+0x70>
  {
    Error_Handler();
 8000fec:	f000 faf0 	bl	80015d0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8000ff0:	230c      	movs	r3, #12
 8000ff2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000ff4:	2301      	movs	r3, #1
 8000ff6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000ffc:	463b      	mov	r3, r7
 8000ffe:	4619      	mov	r1, r3
 8001000:	4805      	ldr	r0, [pc, #20]	@ (8001018 <MX_ADC3_Init+0x98>)
 8001002:	f001 fa5f 	bl	80024c4 <HAL_ADC_ConfigChannel>
 8001006:	4603      	mov	r3, r0
 8001008:	2b00      	cmp	r3, #0
 800100a:	d001      	beq.n	8001010 <MX_ADC3_Init+0x90>
  {
    Error_Handler();
 800100c:	f000 fae0 	bl	80015d0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8001010:	bf00      	nop
 8001012:	3710      	adds	r7, #16
 8001014:	46bd      	mov	sp, r7
 8001016:	bd80      	pop	{r7, pc}
 8001018:	2000031c 	.word	0x2000031c
 800101c:	40012200 	.word	0x40012200
 8001020:	0f000001 	.word	0x0f000001

08001024 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8001028:	4b15      	ldr	r3, [pc, #84]	@ (8001080 <MX_SPI3_Init+0x5c>)
 800102a:	4a16      	ldr	r2, [pc, #88]	@ (8001084 <MX_SPI3_Init+0x60>)
 800102c:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_SLAVE;
 800102e:	4b14      	ldr	r3, [pc, #80]	@ (8001080 <MX_SPI3_Init+0x5c>)
 8001030:	2200      	movs	r2, #0
 8001032:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8001034:	4b12      	ldr	r3, [pc, #72]	@ (8001080 <MX_SPI3_Init+0x5c>)
 8001036:	2200      	movs	r2, #0
 8001038:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 800103a:	4b11      	ldr	r3, [pc, #68]	@ (8001080 <MX_SPI3_Init+0x5c>)
 800103c:	2200      	movs	r2, #0
 800103e:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001040:	4b0f      	ldr	r3, [pc, #60]	@ (8001080 <MX_SPI3_Init+0x5c>)
 8001042:	2200      	movs	r2, #0
 8001044:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001046:	4b0e      	ldr	r3, [pc, #56]	@ (8001080 <MX_SPI3_Init+0x5c>)
 8001048:	2200      	movs	r2, #0
 800104a:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 800104c:	4b0c      	ldr	r3, [pc, #48]	@ (8001080 <MX_SPI3_Init+0x5c>)
 800104e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001052:	619a      	str	r2, [r3, #24]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001054:	4b0a      	ldr	r3, [pc, #40]	@ (8001080 <MX_SPI3_Init+0x5c>)
 8001056:	2200      	movs	r2, #0
 8001058:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 800105a:	4b09      	ldr	r3, [pc, #36]	@ (8001080 <MX_SPI3_Init+0x5c>)
 800105c:	2200      	movs	r2, #0
 800105e:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001060:	4b07      	ldr	r3, [pc, #28]	@ (8001080 <MX_SPI3_Init+0x5c>)
 8001062:	2200      	movs	r2, #0
 8001064:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 10;
 8001066:	4b06      	ldr	r3, [pc, #24]	@ (8001080 <MX_SPI3_Init+0x5c>)
 8001068:	220a      	movs	r2, #10
 800106a:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 800106c:	4804      	ldr	r0, [pc, #16]	@ (8001080 <MX_SPI3_Init+0x5c>)
 800106e:	f002 fd19 	bl	8003aa4 <HAL_SPI_Init>
 8001072:	4603      	mov	r3, r0
 8001074:	2b00      	cmp	r3, #0
 8001076:	d001      	beq.n	800107c <MX_SPI3_Init+0x58>
  {
    Error_Handler();
 8001078:	f000 faaa 	bl	80015d0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 800107c:	bf00      	nop
 800107e:	bd80      	pop	{r7, pc}
 8001080:	20000364 	.word	0x20000364
 8001084:	40003c00 	.word	0x40003c00

08001088 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	b08e      	sub	sp, #56	@ 0x38
 800108c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800108e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001092:	2200      	movs	r2, #0
 8001094:	601a      	str	r2, [r3, #0]
 8001096:	605a      	str	r2, [r3, #4]
 8001098:	609a      	str	r2, [r3, #8]
 800109a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800109c:	f107 0320 	add.w	r3, r7, #32
 80010a0:	2200      	movs	r2, #0
 80010a2:	601a      	str	r2, [r3, #0]
 80010a4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80010a6:	1d3b      	adds	r3, r7, #4
 80010a8:	2200      	movs	r2, #0
 80010aa:	601a      	str	r2, [r3, #0]
 80010ac:	605a      	str	r2, [r3, #4]
 80010ae:	609a      	str	r2, [r3, #8]
 80010b0:	60da      	str	r2, [r3, #12]
 80010b2:	611a      	str	r2, [r3, #16]
 80010b4:	615a      	str	r2, [r3, #20]
 80010b6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80010b8:	4b2d      	ldr	r3, [pc, #180]	@ (8001170 <MX_TIM2_Init+0xe8>)
 80010ba:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80010be:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 839;
 80010c0:	4b2b      	ldr	r3, [pc, #172]	@ (8001170 <MX_TIM2_Init+0xe8>)
 80010c2:	f240 3247 	movw	r2, #839	@ 0x347
 80010c6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010c8:	4b29      	ldr	r3, [pc, #164]	@ (8001170 <MX_TIM2_Init+0xe8>)
 80010ca:	2200      	movs	r2, #0
 80010cc:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1999;
 80010ce:	4b28      	ldr	r3, [pc, #160]	@ (8001170 <MX_TIM2_Init+0xe8>)
 80010d0:	f240 72cf 	movw	r2, #1999	@ 0x7cf
 80010d4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010d6:	4b26      	ldr	r3, [pc, #152]	@ (8001170 <MX_TIM2_Init+0xe8>)
 80010d8:	2200      	movs	r2, #0
 80010da:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010dc:	4b24      	ldr	r3, [pc, #144]	@ (8001170 <MX_TIM2_Init+0xe8>)
 80010de:	2200      	movs	r2, #0
 80010e0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80010e2:	4823      	ldr	r0, [pc, #140]	@ (8001170 <MX_TIM2_Init+0xe8>)
 80010e4:	f003 fab0 	bl	8004648 <HAL_TIM_Base_Init>
 80010e8:	4603      	mov	r3, r0
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d001      	beq.n	80010f2 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 80010ee:	f000 fa6f 	bl	80015d0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80010f2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80010f6:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80010f8:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80010fc:	4619      	mov	r1, r3
 80010fe:	481c      	ldr	r0, [pc, #112]	@ (8001170 <MX_TIM2_Init+0xe8>)
 8001100:	f003 febc 	bl	8004e7c <HAL_TIM_ConfigClockSource>
 8001104:	4603      	mov	r3, r0
 8001106:	2b00      	cmp	r3, #0
 8001108:	d001      	beq.n	800110e <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 800110a:	f000 fa61 	bl	80015d0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800110e:	4818      	ldr	r0, [pc, #96]	@ (8001170 <MX_TIM2_Init+0xe8>)
 8001110:	f003 fbea 	bl	80048e8 <HAL_TIM_PWM_Init>
 8001114:	4603      	mov	r3, r0
 8001116:	2b00      	cmp	r3, #0
 8001118:	d001      	beq.n	800111e <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 800111a:	f000 fa59 	bl	80015d0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800111e:	2300      	movs	r3, #0
 8001120:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001122:	2300      	movs	r3, #0
 8001124:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001126:	f107 0320 	add.w	r3, r7, #32
 800112a:	4619      	mov	r1, r3
 800112c:	4810      	ldr	r0, [pc, #64]	@ (8001170 <MX_TIM2_Init+0xe8>)
 800112e:	f004 fab1 	bl	8005694 <HAL_TIMEx_MasterConfigSynchronization>
 8001132:	4603      	mov	r3, r0
 8001134:	2b00      	cmp	r3, #0
 8001136:	d001      	beq.n	800113c <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8001138:	f000 fa4a 	bl	80015d0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800113c:	2360      	movs	r3, #96	@ 0x60
 800113e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001140:	2300      	movs	r3, #0
 8001142:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001144:	2300      	movs	r3, #0
 8001146:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001148:	2300      	movs	r3, #0
 800114a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800114c:	1d3b      	adds	r3, r7, #4
 800114e:	2200      	movs	r2, #0
 8001150:	4619      	mov	r1, r3
 8001152:	4807      	ldr	r0, [pc, #28]	@ (8001170 <MX_TIM2_Init+0xe8>)
 8001154:	f003 fdd0 	bl	8004cf8 <HAL_TIM_PWM_ConfigChannel>
 8001158:	4603      	mov	r3, r0
 800115a:	2b00      	cmp	r3, #0
 800115c:	d001      	beq.n	8001162 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 800115e:	f000 fa37 	bl	80015d0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001162:	4803      	ldr	r0, [pc, #12]	@ (8001170 <MX_TIM2_Init+0xe8>)
 8001164:	f000 fdcc 	bl	8001d00 <HAL_TIM_MspPostInit>

}
 8001168:	bf00      	nop
 800116a:	3738      	adds	r7, #56	@ 0x38
 800116c:	46bd      	mov	sp, r7
 800116e:	bd80      	pop	{r7, pc}
 8001170:	200003bc 	.word	0x200003bc

08001174 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	b086      	sub	sp, #24
 8001178:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800117a:	f107 0308 	add.w	r3, r7, #8
 800117e:	2200      	movs	r2, #0
 8001180:	601a      	str	r2, [r3, #0]
 8001182:	605a      	str	r2, [r3, #4]
 8001184:	609a      	str	r2, [r3, #8]
 8001186:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001188:	463b      	mov	r3, r7
 800118a:	2200      	movs	r2, #0
 800118c:	601a      	str	r2, [r3, #0]
 800118e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001190:	4b1d      	ldr	r3, [pc, #116]	@ (8001208 <MX_TIM3_Init+0x94>)
 8001192:	4a1e      	ldr	r2, [pc, #120]	@ (800120c <MX_TIM3_Init+0x98>)
 8001194:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 84-1;
 8001196:	4b1c      	ldr	r3, [pc, #112]	@ (8001208 <MX_TIM3_Init+0x94>)
 8001198:	2253      	movs	r2, #83	@ 0x53
 800119a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800119c:	4b1a      	ldr	r3, [pc, #104]	@ (8001208 <MX_TIM3_Init+0x94>)
 800119e:	2200      	movs	r2, #0
 80011a0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535-1;
 80011a2:	4b19      	ldr	r3, [pc, #100]	@ (8001208 <MX_TIM3_Init+0x94>)
 80011a4:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 80011a8:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011aa:	4b17      	ldr	r3, [pc, #92]	@ (8001208 <MX_TIM3_Init+0x94>)
 80011ac:	2200      	movs	r2, #0
 80011ae:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011b0:	4b15      	ldr	r3, [pc, #84]	@ (8001208 <MX_TIM3_Init+0x94>)
 80011b2:	2200      	movs	r2, #0
 80011b4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80011b6:	4814      	ldr	r0, [pc, #80]	@ (8001208 <MX_TIM3_Init+0x94>)
 80011b8:	f003 fa46 	bl	8004648 <HAL_TIM_Base_Init>
 80011bc:	4603      	mov	r3, r0
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d001      	beq.n	80011c6 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 80011c2:	f000 fa05 	bl	80015d0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80011c6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80011ca:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80011cc:	f107 0308 	add.w	r3, r7, #8
 80011d0:	4619      	mov	r1, r3
 80011d2:	480d      	ldr	r0, [pc, #52]	@ (8001208 <MX_TIM3_Init+0x94>)
 80011d4:	f003 fe52 	bl	8004e7c <HAL_TIM_ConfigClockSource>
 80011d8:	4603      	mov	r3, r0
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d001      	beq.n	80011e2 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 80011de:	f000 f9f7 	bl	80015d0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011e2:	2300      	movs	r3, #0
 80011e4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011e6:	2300      	movs	r3, #0
 80011e8:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80011ea:	463b      	mov	r3, r7
 80011ec:	4619      	mov	r1, r3
 80011ee:	4806      	ldr	r0, [pc, #24]	@ (8001208 <MX_TIM3_Init+0x94>)
 80011f0:	f004 fa50 	bl	8005694 <HAL_TIMEx_MasterConfigSynchronization>
 80011f4:	4603      	mov	r3, r0
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d001      	beq.n	80011fe <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 80011fa:	f000 f9e9 	bl	80015d0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80011fe:	bf00      	nop
 8001200:	3718      	adds	r7, #24
 8001202:	46bd      	mov	sp, r7
 8001204:	bd80      	pop	{r7, pc}
 8001206:	bf00      	nop
 8001208:	20000404 	.word	0x20000404
 800120c:	40000400 	.word	0x40000400

08001210 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	b088      	sub	sp, #32
 8001214:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM10_Init 0 */

  /* USER CODE END TIM10_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8001216:	1d3b      	adds	r3, r7, #4
 8001218:	2200      	movs	r2, #0
 800121a:	601a      	str	r2, [r3, #0]
 800121c:	605a      	str	r2, [r3, #4]
 800121e:	609a      	str	r2, [r3, #8]
 8001220:	60da      	str	r2, [r3, #12]
 8001222:	611a      	str	r2, [r3, #16]
 8001224:	615a      	str	r2, [r3, #20]
 8001226:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8001228:	4b1e      	ldr	r3, [pc, #120]	@ (80012a4 <MX_TIM10_Init+0x94>)
 800122a:	4a1f      	ldr	r2, [pc, #124]	@ (80012a8 <MX_TIM10_Init+0x98>)
 800122c:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 83;
 800122e:	4b1d      	ldr	r3, [pc, #116]	@ (80012a4 <MX_TIM10_Init+0x94>)
 8001230:	2253      	movs	r2, #83	@ 0x53
 8001232:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001234:	4b1b      	ldr	r3, [pc, #108]	@ (80012a4 <MX_TIM10_Init+0x94>)
 8001236:	2200      	movs	r2, #0
 8001238:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 999;
 800123a:	4b1a      	ldr	r3, [pc, #104]	@ (80012a4 <MX_TIM10_Init+0x94>)
 800123c:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001240:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001242:	4b18      	ldr	r3, [pc, #96]	@ (80012a4 <MX_TIM10_Init+0x94>)
 8001244:	2200      	movs	r2, #0
 8001246:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001248:	4b16      	ldr	r3, [pc, #88]	@ (80012a4 <MX_TIM10_Init+0x94>)
 800124a:	2200      	movs	r2, #0
 800124c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 800124e:	4815      	ldr	r0, [pc, #84]	@ (80012a4 <MX_TIM10_Init+0x94>)
 8001250:	f003 f9fa 	bl	8004648 <HAL_TIM_Base_Init>
 8001254:	4603      	mov	r3, r0
 8001256:	2b00      	cmp	r3, #0
 8001258:	d001      	beq.n	800125e <MX_TIM10_Init+0x4e>
  {
    Error_Handler();
 800125a:	f000 f9b9 	bl	80015d0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim10) != HAL_OK)
 800125e:	4811      	ldr	r0, [pc, #68]	@ (80012a4 <MX_TIM10_Init+0x94>)
 8001260:	f003 fb42 	bl	80048e8 <HAL_TIM_PWM_Init>
 8001264:	4603      	mov	r3, r0
 8001266:	2b00      	cmp	r3, #0
 8001268:	d001      	beq.n	800126e <MX_TIM10_Init+0x5e>
  {
    Error_Handler();
 800126a:	f000 f9b1 	bl	80015d0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800126e:	2360      	movs	r3, #96	@ 0x60
 8001270:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001272:	2300      	movs	r3, #0
 8001274:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001276:	2300      	movs	r3, #0
 8001278:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800127a:	2300      	movs	r3, #0
 800127c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim10, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800127e:	1d3b      	adds	r3, r7, #4
 8001280:	2200      	movs	r2, #0
 8001282:	4619      	mov	r1, r3
 8001284:	4807      	ldr	r0, [pc, #28]	@ (80012a4 <MX_TIM10_Init+0x94>)
 8001286:	f003 fd37 	bl	8004cf8 <HAL_TIM_PWM_ConfigChannel>
 800128a:	4603      	mov	r3, r0
 800128c:	2b00      	cmp	r3, #0
 800128e:	d001      	beq.n	8001294 <MX_TIM10_Init+0x84>
  {
    Error_Handler();
 8001290:	f000 f99e 	bl	80015d0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */
  HAL_TIM_MspPostInit(&htim10);
 8001294:	4803      	ldr	r0, [pc, #12]	@ (80012a4 <MX_TIM10_Init+0x94>)
 8001296:	f000 fd33 	bl	8001d00 <HAL_TIM_MspPostInit>

}
 800129a:	bf00      	nop
 800129c:	3720      	adds	r7, #32
 800129e:	46bd      	mov	sp, r7
 80012a0:	bd80      	pop	{r7, pc}
 80012a2:	bf00      	nop
 80012a4:	2000044c 	.word	0x2000044c
 80012a8:	40014400 	.word	0x40014400

080012ac <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b088      	sub	sp, #32
 80012b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM11_Init 0 */

  /* USER CODE END TIM11_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80012b2:	1d3b      	adds	r3, r7, #4
 80012b4:	2200      	movs	r2, #0
 80012b6:	601a      	str	r2, [r3, #0]
 80012b8:	605a      	str	r2, [r3, #4]
 80012ba:	609a      	str	r2, [r3, #8]
 80012bc:	60da      	str	r2, [r3, #12]
 80012be:	611a      	str	r2, [r3, #16]
 80012c0:	615a      	str	r2, [r3, #20]
 80012c2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 80012c4:	4b1e      	ldr	r3, [pc, #120]	@ (8001340 <MX_TIM11_Init+0x94>)
 80012c6:	4a1f      	ldr	r2, [pc, #124]	@ (8001344 <MX_TIM11_Init+0x98>)
 80012c8:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 83;
 80012ca:	4b1d      	ldr	r3, [pc, #116]	@ (8001340 <MX_TIM11_Init+0x94>)
 80012cc:	2253      	movs	r2, #83	@ 0x53
 80012ce:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012d0:	4b1b      	ldr	r3, [pc, #108]	@ (8001340 <MX_TIM11_Init+0x94>)
 80012d2:	2200      	movs	r2, #0
 80012d4:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 999;
 80012d6:	4b1a      	ldr	r3, [pc, #104]	@ (8001340 <MX_TIM11_Init+0x94>)
 80012d8:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80012dc:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012de:	4b18      	ldr	r3, [pc, #96]	@ (8001340 <MX_TIM11_Init+0x94>)
 80012e0:	2200      	movs	r2, #0
 80012e2:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012e4:	4b16      	ldr	r3, [pc, #88]	@ (8001340 <MX_TIM11_Init+0x94>)
 80012e6:	2200      	movs	r2, #0
 80012e8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 80012ea:	4815      	ldr	r0, [pc, #84]	@ (8001340 <MX_TIM11_Init+0x94>)
 80012ec:	f003 f9ac 	bl	8004648 <HAL_TIM_Base_Init>
 80012f0:	4603      	mov	r3, r0
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d001      	beq.n	80012fa <MX_TIM11_Init+0x4e>
  {
    Error_Handler();
 80012f6:	f000 f96b 	bl	80015d0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim11) != HAL_OK)
 80012fa:	4811      	ldr	r0, [pc, #68]	@ (8001340 <MX_TIM11_Init+0x94>)
 80012fc:	f003 faf4 	bl	80048e8 <HAL_TIM_PWM_Init>
 8001300:	4603      	mov	r3, r0
 8001302:	2b00      	cmp	r3, #0
 8001304:	d001      	beq.n	800130a <MX_TIM11_Init+0x5e>
  {
    Error_Handler();
 8001306:	f000 f963 	bl	80015d0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800130a:	2360      	movs	r3, #96	@ 0x60
 800130c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800130e:	2300      	movs	r3, #0
 8001310:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001312:	2300      	movs	r3, #0
 8001314:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001316:	2300      	movs	r3, #0
 8001318:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim11, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800131a:	1d3b      	adds	r3, r7, #4
 800131c:	2200      	movs	r2, #0
 800131e:	4619      	mov	r1, r3
 8001320:	4807      	ldr	r0, [pc, #28]	@ (8001340 <MX_TIM11_Init+0x94>)
 8001322:	f003 fce9 	bl	8004cf8 <HAL_TIM_PWM_ConfigChannel>
 8001326:	4603      	mov	r3, r0
 8001328:	2b00      	cmp	r3, #0
 800132a:	d001      	beq.n	8001330 <MX_TIM11_Init+0x84>
  {
    Error_Handler();
 800132c:	f000 f950 	bl	80015d0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */
  HAL_TIM_MspPostInit(&htim11);
 8001330:	4803      	ldr	r0, [pc, #12]	@ (8001340 <MX_TIM11_Init+0x94>)
 8001332:	f000 fce5 	bl	8001d00 <HAL_TIM_MspPostInit>

}
 8001336:	bf00      	nop
 8001338:	3720      	adds	r7, #32
 800133a:	46bd      	mov	sp, r7
 800133c:	bd80      	pop	{r7, pc}
 800133e:	bf00      	nop
 8001340:	20000494 	.word	0x20000494
 8001344:	40014800 	.word	0x40014800

08001348 <MX_TIM12_Init>:
  * @brief TIM12 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM12_Init(void)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	b088      	sub	sp, #32
 800134c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800134e:	1d3b      	adds	r3, r7, #4
 8001350:	2200      	movs	r2, #0
 8001352:	601a      	str	r2, [r3, #0]
 8001354:	605a      	str	r2, [r3, #4]
 8001356:	609a      	str	r2, [r3, #8]
 8001358:	60da      	str	r2, [r3, #12]
 800135a:	611a      	str	r2, [r3, #16]
 800135c:	615a      	str	r2, [r3, #20]
 800135e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 8001360:	4b1f      	ldr	r3, [pc, #124]	@ (80013e0 <MX_TIM12_Init+0x98>)
 8001362:	4a20      	ldr	r2, [pc, #128]	@ (80013e4 <MX_TIM12_Init+0x9c>)
 8001364:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 83;
 8001366:	4b1e      	ldr	r3, [pc, #120]	@ (80013e0 <MX_TIM12_Init+0x98>)
 8001368:	2253      	movs	r2, #83	@ 0x53
 800136a:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 800136c:	4b1c      	ldr	r3, [pc, #112]	@ (80013e0 <MX_TIM12_Init+0x98>)
 800136e:	2200      	movs	r2, #0
 8001370:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 999;
 8001372:	4b1b      	ldr	r3, [pc, #108]	@ (80013e0 <MX_TIM12_Init+0x98>)
 8001374:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001378:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800137a:	4b19      	ldr	r3, [pc, #100]	@ (80013e0 <MX_TIM12_Init+0x98>)
 800137c:	2200      	movs	r2, #0
 800137e:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001380:	4b17      	ldr	r3, [pc, #92]	@ (80013e0 <MX_TIM12_Init+0x98>)
 8001382:	2200      	movs	r2, #0
 8001384:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 8001386:	4816      	ldr	r0, [pc, #88]	@ (80013e0 <MX_TIM12_Init+0x98>)
 8001388:	f003 faae 	bl	80048e8 <HAL_TIM_PWM_Init>
 800138c:	4603      	mov	r3, r0
 800138e:	2b00      	cmp	r3, #0
 8001390:	d001      	beq.n	8001396 <MX_TIM12_Init+0x4e>
  {
    Error_Handler();
 8001392:	f000 f91d 	bl	80015d0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001396:	2360      	movs	r3, #96	@ 0x60
 8001398:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800139a:	2300      	movs	r3, #0
 800139c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800139e:	2300      	movs	r3, #0
 80013a0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80013a2:	2300      	movs	r3, #0
 80013a4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80013a6:	1d3b      	adds	r3, r7, #4
 80013a8:	2200      	movs	r2, #0
 80013aa:	4619      	mov	r1, r3
 80013ac:	480c      	ldr	r0, [pc, #48]	@ (80013e0 <MX_TIM12_Init+0x98>)
 80013ae:	f003 fca3 	bl	8004cf8 <HAL_TIM_PWM_ConfigChannel>
 80013b2:	4603      	mov	r3, r0
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d001      	beq.n	80013bc <MX_TIM12_Init+0x74>
  {
    Error_Handler();
 80013b8:	f000 f90a 	bl	80015d0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80013bc:	1d3b      	adds	r3, r7, #4
 80013be:	2204      	movs	r2, #4
 80013c0:	4619      	mov	r1, r3
 80013c2:	4807      	ldr	r0, [pc, #28]	@ (80013e0 <MX_TIM12_Init+0x98>)
 80013c4:	f003 fc98 	bl	8004cf8 <HAL_TIM_PWM_ConfigChannel>
 80013c8:	4603      	mov	r3, r0
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d001      	beq.n	80013d2 <MX_TIM12_Init+0x8a>
  {
    Error_Handler();
 80013ce:	f000 f8ff 	bl	80015d0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 80013d2:	4803      	ldr	r0, [pc, #12]	@ (80013e0 <MX_TIM12_Init+0x98>)
 80013d4:	f000 fc94 	bl	8001d00 <HAL_TIM_MspPostInit>

}
 80013d8:	bf00      	nop
 80013da:	3720      	adds	r7, #32
 80013dc:	46bd      	mov	sp, r7
 80013de:	bd80      	pop	{r7, pc}
 80013e0:	200004dc 	.word	0x200004dc
 80013e4:	40001800 	.word	0x40001800

080013e8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80013ec:	4b11      	ldr	r3, [pc, #68]	@ (8001434 <MX_USART2_UART_Init+0x4c>)
 80013ee:	4a12      	ldr	r2, [pc, #72]	@ (8001438 <MX_USART2_UART_Init+0x50>)
 80013f0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80013f2:	4b10      	ldr	r3, [pc, #64]	@ (8001434 <MX_USART2_UART_Init+0x4c>)
 80013f4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80013f8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80013fa:	4b0e      	ldr	r3, [pc, #56]	@ (8001434 <MX_USART2_UART_Init+0x4c>)
 80013fc:	2200      	movs	r2, #0
 80013fe:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001400:	4b0c      	ldr	r3, [pc, #48]	@ (8001434 <MX_USART2_UART_Init+0x4c>)
 8001402:	2200      	movs	r2, #0
 8001404:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001406:	4b0b      	ldr	r3, [pc, #44]	@ (8001434 <MX_USART2_UART_Init+0x4c>)
 8001408:	2200      	movs	r2, #0
 800140a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800140c:	4b09      	ldr	r3, [pc, #36]	@ (8001434 <MX_USART2_UART_Init+0x4c>)
 800140e:	220c      	movs	r2, #12
 8001410:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001412:	4b08      	ldr	r3, [pc, #32]	@ (8001434 <MX_USART2_UART_Init+0x4c>)
 8001414:	2200      	movs	r2, #0
 8001416:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001418:	4b06      	ldr	r3, [pc, #24]	@ (8001434 <MX_USART2_UART_Init+0x4c>)
 800141a:	2200      	movs	r2, #0
 800141c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800141e:	4805      	ldr	r0, [pc, #20]	@ (8001434 <MX_USART2_UART_Init+0x4c>)
 8001420:	f004 f9c8 	bl	80057b4 <HAL_UART_Init>
 8001424:	4603      	mov	r3, r0
 8001426:	2b00      	cmp	r3, #0
 8001428:	d001      	beq.n	800142e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800142a:	f000 f8d1 	bl	80015d0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800142e:	bf00      	nop
 8001430:	bd80      	pop	{r7, pc}
 8001432:	bf00      	nop
 8001434:	20000524 	.word	0x20000524
 8001438:	40004400 	.word	0x40004400

0800143c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	b08a      	sub	sp, #40	@ 0x28
 8001440:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001442:	f107 0314 	add.w	r3, r7, #20
 8001446:	2200      	movs	r2, #0
 8001448:	601a      	str	r2, [r3, #0]
 800144a:	605a      	str	r2, [r3, #4]
 800144c:	609a      	str	r2, [r3, #8]
 800144e:	60da      	str	r2, [r3, #12]
 8001450:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001452:	2300      	movs	r3, #0
 8001454:	613b      	str	r3, [r7, #16]
 8001456:	4b3d      	ldr	r3, [pc, #244]	@ (800154c <MX_GPIO_Init+0x110>)
 8001458:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800145a:	4a3c      	ldr	r2, [pc, #240]	@ (800154c <MX_GPIO_Init+0x110>)
 800145c:	f043 0304 	orr.w	r3, r3, #4
 8001460:	6313      	str	r3, [r2, #48]	@ 0x30
 8001462:	4b3a      	ldr	r3, [pc, #232]	@ (800154c <MX_GPIO_Init+0x110>)
 8001464:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001466:	f003 0304 	and.w	r3, r3, #4
 800146a:	613b      	str	r3, [r7, #16]
 800146c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800146e:	2300      	movs	r3, #0
 8001470:	60fb      	str	r3, [r7, #12]
 8001472:	4b36      	ldr	r3, [pc, #216]	@ (800154c <MX_GPIO_Init+0x110>)
 8001474:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001476:	4a35      	ldr	r2, [pc, #212]	@ (800154c <MX_GPIO_Init+0x110>)
 8001478:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800147c:	6313      	str	r3, [r2, #48]	@ 0x30
 800147e:	4b33      	ldr	r3, [pc, #204]	@ (800154c <MX_GPIO_Init+0x110>)
 8001480:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001482:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001486:	60fb      	str	r3, [r7, #12]
 8001488:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800148a:	2300      	movs	r3, #0
 800148c:	60bb      	str	r3, [r7, #8]
 800148e:	4b2f      	ldr	r3, [pc, #188]	@ (800154c <MX_GPIO_Init+0x110>)
 8001490:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001492:	4a2e      	ldr	r2, [pc, #184]	@ (800154c <MX_GPIO_Init+0x110>)
 8001494:	f043 0301 	orr.w	r3, r3, #1
 8001498:	6313      	str	r3, [r2, #48]	@ 0x30
 800149a:	4b2c      	ldr	r3, [pc, #176]	@ (800154c <MX_GPIO_Init+0x110>)
 800149c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800149e:	f003 0301 	and.w	r3, r3, #1
 80014a2:	60bb      	str	r3, [r7, #8]
 80014a4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80014a6:	2300      	movs	r3, #0
 80014a8:	607b      	str	r3, [r7, #4]
 80014aa:	4b28      	ldr	r3, [pc, #160]	@ (800154c <MX_GPIO_Init+0x110>)
 80014ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014ae:	4a27      	ldr	r2, [pc, #156]	@ (800154c <MX_GPIO_Init+0x110>)
 80014b0:	f043 0302 	orr.w	r3, r3, #2
 80014b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80014b6:	4b25      	ldr	r3, [pc, #148]	@ (800154c <MX_GPIO_Init+0x110>)
 80014b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014ba:	f003 0302 	and.w	r3, r3, #2
 80014be:	607b      	str	r3, [r7, #4]
 80014c0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Relay_GPIO_Port, Relay_Pin, GPIO_PIN_RESET);
 80014c2:	2200      	movs	r2, #0
 80014c4:	2108      	movs	r1, #8
 80014c6:	4822      	ldr	r0, [pc, #136]	@ (8001550 <MX_GPIO_Init+0x114>)
 80014c8:	f001 fcb8 	bl	8002e3c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80014cc:	2200      	movs	r2, #0
 80014ce:	2120      	movs	r1, #32
 80014d0:	4820      	ldr	r0, [pc, #128]	@ (8001554 <MX_GPIO_Init+0x118>)
 80014d2:	f001 fcb3 	bl	8002e3c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80014d6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80014da:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80014dc:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80014e0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014e2:	2300      	movs	r3, #0
 80014e4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80014e6:	f107 0314 	add.w	r3, r7, #20
 80014ea:	4619      	mov	r1, r3
 80014ec:	4818      	ldr	r0, [pc, #96]	@ (8001550 <MX_GPIO_Init+0x114>)
 80014ee:	f001 faf9 	bl	8002ae4 <HAL_GPIO_Init>

  /*Configure GPIO pin : Relay_Pin */
  GPIO_InitStruct.Pin = Relay_Pin;
 80014f2:	2308      	movs	r3, #8
 80014f4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014f6:	2301      	movs	r3, #1
 80014f8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014fa:	2300      	movs	r3, #0
 80014fc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014fe:	2300      	movs	r3, #0
 8001500:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(Relay_GPIO_Port, &GPIO_InitStruct);
 8001502:	f107 0314 	add.w	r3, r7, #20
 8001506:	4619      	mov	r1, r3
 8001508:	4811      	ldr	r0, [pc, #68]	@ (8001550 <MX_GPIO_Init+0x114>)
 800150a:	f001 faeb 	bl	8002ae4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800150e:	2320      	movs	r3, #32
 8001510:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001512:	2301      	movs	r3, #1
 8001514:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001516:	2300      	movs	r3, #0
 8001518:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800151a:	2300      	movs	r3, #0
 800151c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800151e:	f107 0314 	add.w	r3, r7, #20
 8001522:	4619      	mov	r1, r3
 8001524:	480b      	ldr	r0, [pc, #44]	@ (8001554 <MX_GPIO_Init+0x118>)
 8001526:	f001 fadd 	bl	8002ae4 <HAL_GPIO_Init>

  /*Configure GPIO pin : DHT11_Pin */
  GPIO_InitStruct.Pin = DHT11_Pin;
 800152a:	2302      	movs	r3, #2
 800152c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800152e:	2300      	movs	r3, #0
 8001530:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001532:	2300      	movs	r3, #0
 8001534:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(DHT11_GPIO_Port, &GPIO_InitStruct);
 8001536:	f107 0314 	add.w	r3, r7, #20
 800153a:	4619      	mov	r1, r3
 800153c:	4806      	ldr	r0, [pc, #24]	@ (8001558 <MX_GPIO_Init+0x11c>)
 800153e:	f001 fad1 	bl	8002ae4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001542:	bf00      	nop
 8001544:	3728      	adds	r7, #40	@ 0x28
 8001546:	46bd      	mov	sp, r7
 8001548:	bd80      	pop	{r7, pc}
 800154a:	bf00      	nop
 800154c:	40023800 	.word	0x40023800
 8001550:	40020800 	.word	0x40020800
 8001554:	40020000 	.word	0x40020000
 8001558:	40020400 	.word	0x40020400

0800155c <TASK1_Init>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_TASK1_Init */
void TASK1_Init(void const * argument)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	b082      	sub	sp, #8
 8001560:	af00      	add	r7, sp, #0
 8001562:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	processJoystick(RxData);
 8001564:	4803      	ldr	r0, [pc, #12]	@ (8001574 <TASK1_Init+0x18>)
 8001566:	f7ff fb93 	bl	8000c90 <processJoystick>
    osDelay(100);
 800156a:	2064      	movs	r0, #100	@ 0x64
 800156c:	f004 fc51 	bl	8005e12 <osDelay>
	processJoystick(RxData);
 8001570:	bf00      	nop
 8001572:	e7f7      	b.n	8001564 <TASK1_Init+0x8>
 8001574:	20000578 	.word	0x20000578

08001578 <TASK2_Init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_TASK2_Init */
void TASK2_Init(void const * argument)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	b082      	sub	sp, #8
 800157c:	af00      	add	r7, sp, #0
 800157e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TASK2_Init */
  /* Infinite loop */
  for(;;)
  {
	checkSoilAndPump();
 8001580:	f7ff fbf2 	bl	8000d68 <checkSoilAndPump>
    osDelay(100);
 8001584:	2064      	movs	r0, #100	@ 0x64
 8001586:	f004 fc44 	bl	8005e12 <osDelay>
	checkSoilAndPump();
 800158a:	bf00      	nop
 800158c:	e7f8      	b.n	8001580 <TASK2_Init+0x8>
	...

08001590 <TASK3_Init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_TASK3_Init */
void TASK3_Init(void const * argument)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	b082      	sub	sp, #8
 8001594:	af00      	add	r7, sp, #0
 8001596:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TASK3_Init */
  /* Infinite loop */
  for(;;)
  {
	readDHT(&dht);
 8001598:	4803      	ldr	r0, [pc, #12]	@ (80015a8 <TASK3_Init+0x18>)
 800159a:	f7ff f80b 	bl	80005b4 <readDHT>
    osDelay(100);
 800159e:	2064      	movs	r0, #100	@ 0x64
 80015a0:	f004 fc37 	bl	8005e12 <osDelay>
	readDHT(&dht);
 80015a4:	bf00      	nop
 80015a6:	e7f7      	b.n	8001598 <TASK3_Init+0x8>
 80015a8:	20000590 	.word	0x20000590

080015ac <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	b082      	sub	sp, #8
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	4a04      	ldr	r2, [pc, #16]	@ (80015cc <HAL_TIM_PeriodElapsedCallback+0x20>)
 80015ba:	4293      	cmp	r3, r2
 80015bc:	d101      	bne.n	80015c2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80015be:	f000 fd8f 	bl	80020e0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80015c2:	bf00      	nop
 80015c4:	3708      	adds	r7, #8
 80015c6:	46bd      	mov	sp, r7
 80015c8:	bd80      	pop	{r7, pc}
 80015ca:	bf00      	nop
 80015cc:	40010000 	.word	0x40010000

080015d0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80015d0:	b480      	push	{r7}
 80015d2:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80015d4:	b672      	cpsid	i
}
 80015d6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80015d8:	bf00      	nop
 80015da:	e7fd      	b.n	80015d8 <Error_Handler+0x8>

080015dc <initAllMotors>:
motor_t motorFR; // Front Right
motor_t motorBL; // Back Left
motor_t motorBR; // Back Right

void initAllMotors(void)  // MISRA 8.2 - Function declaration
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	af00      	add	r7, sp, #0
    // MISRA 11.3 - No implicit pointer conversion
    initMotor(&motorFL, (TIM_HandleTypeDef*)&htim10, TIM_CHANNEL_1);
 80015e0:	2200      	movs	r2, #0
 80015e2:	490a      	ldr	r1, [pc, #40]	@ (800160c <initAllMotors+0x30>)
 80015e4:	480a      	ldr	r0, [pc, #40]	@ (8001610 <initAllMotors+0x34>)
 80015e6:	f000 f8cf 	bl	8001788 <initMotor>
    initMotor(&motorFR, (TIM_HandleTypeDef*)&htim11, TIM_CHANNEL_1);
 80015ea:	2200      	movs	r2, #0
 80015ec:	4909      	ldr	r1, [pc, #36]	@ (8001614 <initAllMotors+0x38>)
 80015ee:	480a      	ldr	r0, [pc, #40]	@ (8001618 <initAllMotors+0x3c>)
 80015f0:	f000 f8ca 	bl	8001788 <initMotor>
    initMotor(&motorBL, (TIM_HandleTypeDef*)&htim12, TIM_CHANNEL_1);
 80015f4:	2200      	movs	r2, #0
 80015f6:	4909      	ldr	r1, [pc, #36]	@ (800161c <initAllMotors+0x40>)
 80015f8:	4809      	ldr	r0, [pc, #36]	@ (8001620 <initAllMotors+0x44>)
 80015fa:	f000 f8c5 	bl	8001788 <initMotor>
    initMotor(&motorBR, (TIM_HandleTypeDef*)&htim12, TIM_CHANNEL_2);
 80015fe:	2204      	movs	r2, #4
 8001600:	4906      	ldr	r1, [pc, #24]	@ (800161c <initAllMotors+0x40>)
 8001602:	4808      	ldr	r0, [pc, #32]	@ (8001624 <initAllMotors+0x48>)
 8001604:	f000 f8c0 	bl	8001788 <initMotor>
}
 8001608:	bf00      	nop
 800160a:	bd80      	pop	{r7, pc}
 800160c:	2000044c 	.word	0x2000044c
 8001610:	200005bc 	.word	0x200005bc
 8001614:	20000494 	.word	0x20000494
 8001618:	200005c8 	.word	0x200005c8
 800161c:	200004dc 	.word	0x200004dc
 8001620:	200005d4 	.word	0x200005d4
 8001624:	200005e0 	.word	0x200005e0

08001628 <moveForward>:

void moveForward(void)  // MISRA 8.2
{
 8001628:	b580      	push	{r7, lr}
 800162a:	af00      	add	r7, sp, #0
    // MISRA 10.1 - Use unsigned literal for unsigned parameter
    setSpeedMotor(&motorFL, 999U, FORWARD);
 800162c:	2201      	movs	r2, #1
 800162e:	f240 31e7 	movw	r1, #999	@ 0x3e7
 8001632:	480b      	ldr	r0, [pc, #44]	@ (8001660 <moveForward+0x38>)
 8001634:	f000 f8c6 	bl	80017c4 <setSpeedMotor>
    setSpeedMotor(&motorFR, 999U, FORWARD);
 8001638:	2201      	movs	r2, #1
 800163a:	f240 31e7 	movw	r1, #999	@ 0x3e7
 800163e:	4809      	ldr	r0, [pc, #36]	@ (8001664 <moveForward+0x3c>)
 8001640:	f000 f8c0 	bl	80017c4 <setSpeedMotor>
    setSpeedMotor(&motorBL, 999U, FORWARD);
 8001644:	2201      	movs	r2, #1
 8001646:	f240 31e7 	movw	r1, #999	@ 0x3e7
 800164a:	4807      	ldr	r0, [pc, #28]	@ (8001668 <moveForward+0x40>)
 800164c:	f000 f8ba 	bl	80017c4 <setSpeedMotor>
    setSpeedMotor(&motorBR, 999U, FORWARD);
 8001650:	2201      	movs	r2, #1
 8001652:	f240 31e7 	movw	r1, #999	@ 0x3e7
 8001656:	4805      	ldr	r0, [pc, #20]	@ (800166c <moveForward+0x44>)
 8001658:	f000 f8b4 	bl	80017c4 <setSpeedMotor>
}
 800165c:	bf00      	nop
 800165e:	bd80      	pop	{r7, pc}
 8001660:	200005bc 	.word	0x200005bc
 8001664:	200005c8 	.word	0x200005c8
 8001668:	200005d4 	.word	0x200005d4
 800166c:	200005e0 	.word	0x200005e0

08001670 <moveBackward>:

void moveBackward(void)  // MISRA 8.2
{
 8001670:	b580      	push	{r7, lr}
 8001672:	af00      	add	r7, sp, #0
    setSpeedMotor(&motorFL, 999U, BACKWARD);
 8001674:	2200      	movs	r2, #0
 8001676:	f240 31e7 	movw	r1, #999	@ 0x3e7
 800167a:	480b      	ldr	r0, [pc, #44]	@ (80016a8 <moveBackward+0x38>)
 800167c:	f000 f8a2 	bl	80017c4 <setSpeedMotor>
    setSpeedMotor(&motorFR, 999U, BACKWARD);
 8001680:	2200      	movs	r2, #0
 8001682:	f240 31e7 	movw	r1, #999	@ 0x3e7
 8001686:	4809      	ldr	r0, [pc, #36]	@ (80016ac <moveBackward+0x3c>)
 8001688:	f000 f89c 	bl	80017c4 <setSpeedMotor>
    setSpeedMotor(&motorBL, 999U, BACKWARD);
 800168c:	2200      	movs	r2, #0
 800168e:	f240 31e7 	movw	r1, #999	@ 0x3e7
 8001692:	4807      	ldr	r0, [pc, #28]	@ (80016b0 <moveBackward+0x40>)
 8001694:	f000 f896 	bl	80017c4 <setSpeedMotor>
    setSpeedMotor(&motorBR, 999U, BACKWARD);
 8001698:	2200      	movs	r2, #0
 800169a:	f240 31e7 	movw	r1, #999	@ 0x3e7
 800169e:	4805      	ldr	r0, [pc, #20]	@ (80016b4 <moveBackward+0x44>)
 80016a0:	f000 f890 	bl	80017c4 <setSpeedMotor>
}
 80016a4:	bf00      	nop
 80016a6:	bd80      	pop	{r7, pc}
 80016a8:	200005bc 	.word	0x200005bc
 80016ac:	200005c8 	.word	0x200005c8
 80016b0:	200005d4 	.word	0x200005d4
 80016b4:	200005e0 	.word	0x200005e0

080016b8 <turnLeft>:

void turnLeft(void)  // MISRA 8.2
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	af00      	add	r7, sp, #0
    setSpeedMotor(&motorFL, 999U, BACKWARD);
 80016bc:	2200      	movs	r2, #0
 80016be:	f240 31e7 	movw	r1, #999	@ 0x3e7
 80016c2:	480b      	ldr	r0, [pc, #44]	@ (80016f0 <turnLeft+0x38>)
 80016c4:	f000 f87e 	bl	80017c4 <setSpeedMotor>
    setSpeedMotor(&motorFR, 999U, FORWARD);
 80016c8:	2201      	movs	r2, #1
 80016ca:	f240 31e7 	movw	r1, #999	@ 0x3e7
 80016ce:	4809      	ldr	r0, [pc, #36]	@ (80016f4 <turnLeft+0x3c>)
 80016d0:	f000 f878 	bl	80017c4 <setSpeedMotor>
    setSpeedMotor(&motorBL, 999U, BACKWARD);
 80016d4:	2200      	movs	r2, #0
 80016d6:	f240 31e7 	movw	r1, #999	@ 0x3e7
 80016da:	4807      	ldr	r0, [pc, #28]	@ (80016f8 <turnLeft+0x40>)
 80016dc:	f000 f872 	bl	80017c4 <setSpeedMotor>
    setSpeedMotor(&motorBR, 999U, FORWARD);
 80016e0:	2201      	movs	r2, #1
 80016e2:	f240 31e7 	movw	r1, #999	@ 0x3e7
 80016e6:	4805      	ldr	r0, [pc, #20]	@ (80016fc <turnLeft+0x44>)
 80016e8:	f000 f86c 	bl	80017c4 <setSpeedMotor>
}
 80016ec:	bf00      	nop
 80016ee:	bd80      	pop	{r7, pc}
 80016f0:	200005bc 	.word	0x200005bc
 80016f4:	200005c8 	.word	0x200005c8
 80016f8:	200005d4 	.word	0x200005d4
 80016fc:	200005e0 	.word	0x200005e0

08001700 <turnRight>:

void turnRight(void)  // MISRA 8.2
{
 8001700:	b580      	push	{r7, lr}
 8001702:	af00      	add	r7, sp, #0
    setSpeedMotor(&motorFL, 999U, FORWARD);
 8001704:	2201      	movs	r2, #1
 8001706:	f240 31e7 	movw	r1, #999	@ 0x3e7
 800170a:	480b      	ldr	r0, [pc, #44]	@ (8001738 <turnRight+0x38>)
 800170c:	f000 f85a 	bl	80017c4 <setSpeedMotor>
    setSpeedMotor(&motorFR, 999U, BACKWARD);
 8001710:	2200      	movs	r2, #0
 8001712:	f240 31e7 	movw	r1, #999	@ 0x3e7
 8001716:	4809      	ldr	r0, [pc, #36]	@ (800173c <turnRight+0x3c>)
 8001718:	f000 f854 	bl	80017c4 <setSpeedMotor>
    setSpeedMotor(&motorBL, 999U, FORWARD);
 800171c:	2201      	movs	r2, #1
 800171e:	f240 31e7 	movw	r1, #999	@ 0x3e7
 8001722:	4807      	ldr	r0, [pc, #28]	@ (8001740 <turnRight+0x40>)
 8001724:	f000 f84e 	bl	80017c4 <setSpeedMotor>
    setSpeedMotor(&motorBR, 999U, BACKWARD);
 8001728:	2200      	movs	r2, #0
 800172a:	f240 31e7 	movw	r1, #999	@ 0x3e7
 800172e:	4805      	ldr	r0, [pc, #20]	@ (8001744 <turnRight+0x44>)
 8001730:	f000 f848 	bl	80017c4 <setSpeedMotor>
}
 8001734:	bf00      	nop
 8001736:	bd80      	pop	{r7, pc}
 8001738:	200005bc 	.word	0x200005bc
 800173c:	200005c8 	.word	0x200005c8
 8001740:	200005d4 	.word	0x200005d4
 8001744:	200005e0 	.word	0x200005e0

08001748 <stopMotors>:

void stopMotors(void)  // MISRA 8.2
{
 8001748:	b580      	push	{r7, lr}
 800174a:	af00      	add	r7, sp, #0
    setSpeedMotor(&motorFL, 0U, FORWARD);
 800174c:	2201      	movs	r2, #1
 800174e:	2100      	movs	r1, #0
 8001750:	4809      	ldr	r0, [pc, #36]	@ (8001778 <stopMotors+0x30>)
 8001752:	f000 f837 	bl	80017c4 <setSpeedMotor>
    setSpeedMotor(&motorFR, 0U, FORWARD);
 8001756:	2201      	movs	r2, #1
 8001758:	2100      	movs	r1, #0
 800175a:	4808      	ldr	r0, [pc, #32]	@ (800177c <stopMotors+0x34>)
 800175c:	f000 f832 	bl	80017c4 <setSpeedMotor>
    setSpeedMotor(&motorBL, 0U, FORWARD);
 8001760:	2201      	movs	r2, #1
 8001762:	2100      	movs	r1, #0
 8001764:	4806      	ldr	r0, [pc, #24]	@ (8001780 <stopMotors+0x38>)
 8001766:	f000 f82d 	bl	80017c4 <setSpeedMotor>
    setSpeedMotor(&motorBR, 0U, FORWARD);
 800176a:	2201      	movs	r2, #1
 800176c:	2100      	movs	r1, #0
 800176e:	4805      	ldr	r0, [pc, #20]	@ (8001784 <stopMotors+0x3c>)
 8001770:	f000 f828 	bl	80017c4 <setSpeedMotor>
 8001774:	bf00      	nop
 8001776:	bd80      	pop	{r7, pc}
 8001778:	200005bc 	.word	0x200005bc
 800177c:	200005c8 	.word	0x200005c8
 8001780:	200005d4 	.word	0x200005d4
 8001784:	200005e0 	.word	0x200005e0

08001788 <initMotor>:
 */

#include "motor.h"

void initMotor(motor_t *motor, TIM_HandleTypeDef *htim, uint32_t channel) 
{
 8001788:	b580      	push	{r7, lr}
 800178a:	b084      	sub	sp, #16
 800178c:	af00      	add	r7, sp, #0
 800178e:	60f8      	str	r0, [r7, #12]
 8001790:	60b9      	str	r1, [r7, #8]
 8001792:	607a      	str	r2, [r7, #4]
    motor->htim = htim;  // MISRA 11.3 - Pointer assignment
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	68ba      	ldr	r2, [r7, #8]
 8001798:	601a      	str	r2, [r3, #0]
    motor->channel = channel;
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	687a      	ldr	r2, [r7, #4]
 800179e:	605a      	str	r2, [r3, #4]
    motor->direction = FORWARD;  // MISRA 10.3 - Value in range
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	2201      	movs	r2, #1
 80017a4:	721a      	strb	r2, [r3, #8]
    motor->speed = 0U;  // MISRA 10.1 - Unsigned literal
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	2200      	movs	r2, #0
 80017aa:	815a      	strh	r2, [r3, #10]
    
    (void)HAL_TIM_PWM_Start(motor->htim, motor->channel);  // MISRA 17.2 - Ignore return
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	681a      	ldr	r2, [r3, #0]
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	685b      	ldr	r3, [r3, #4]
 80017b4:	4619      	mov	r1, r3
 80017b6:	4610      	mov	r0, r2
 80017b8:	f003 f8e6 	bl	8004988 <HAL_TIM_PWM_Start>
}
 80017bc:	bf00      	nop
 80017be:	3710      	adds	r7, #16
 80017c0:	46bd      	mov	sp, r7
 80017c2:	bd80      	pop	{r7, pc}

080017c4 <setSpeedMotor>:

void setSpeedMotor(motor_t *motor, int32_t speed, int32_t direction) 
{
 80017c4:	b480      	push	{r7}
 80017c6:	b087      	sub	sp, #28
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	60f8      	str	r0, [r7, #12]
 80017cc:	60b9      	str	r1, [r7, #8]
 80017ce:	607a      	str	r2, [r7, #4]
    uint16_t actual_speed = 0U;  // MISRA 13.1 - Initialized
 80017d0:	2300      	movs	r3, #0
 80017d2:	82fb      	strh	r3, [r7, #22]
    
    // MISRA 14.3 - Single statement per branch
    if (speed < 0) {
 80017d4:	68bb      	ldr	r3, [r7, #8]
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	da02      	bge.n	80017e0 <setSpeedMotor+0x1c>
        actual_speed = 0U;
 80017da:	2300      	movs	r3, #0
 80017dc:	82fb      	strh	r3, [r7, #22]
 80017de:	e009      	b.n	80017f4 <setSpeedMotor+0x30>
    } 
    else if (speed > 999) {
 80017e0:	68bb      	ldr	r3, [r7, #8]
 80017e2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80017e6:	db03      	blt.n	80017f0 <setSpeedMotor+0x2c>
        actual_speed = 999U;  // MISRA 10.1 - Unsigned literal
 80017e8:	f240 33e7 	movw	r3, #999	@ 0x3e7
 80017ec:	82fb      	strh	r3, [r7, #22]
 80017ee:	e001      	b.n	80017f4 <setSpeedMotor+0x30>
    } 
    else {
        actual_speed = (uint16_t)speed;  // MISRA 10.3 - Cast in range
 80017f0:	68bb      	ldr	r3, [r7, #8]
 80017f2:	82fb      	strh	r3, [r7, #22]
    }

    motor->direction = (direction == BACKWARD) ? BACKWARD : FORWARD;  // MISRA 13.5 - Single assignment
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	bf14      	ite	ne
 80017fa:	2301      	movne	r3, #1
 80017fc:	2300      	moveq	r3, #0
 80017fe:	b2db      	uxtb	r3, r3
 8001800:	461a      	mov	r2, r3
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	721a      	strb	r2, [r3, #8]
    motor->speed = actual_speed;
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	8afa      	ldrh	r2, [r7, #22]
 800180a:	815a      	strh	r2, [r3, #10]
    
    __HAL_TIM_SET_COMPARE(motor->htim, motor->channel, actual_speed);  // MISRA 17.2 - Void return
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	685b      	ldr	r3, [r3, #4]
 8001810:	2b00      	cmp	r3, #0
 8001812:	d105      	bne.n	8001820 <setSpeedMotor+0x5c>
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	8afa      	ldrh	r2, [r7, #22]
 800181c:	635a      	str	r2, [r3, #52]	@ 0x34
 800181e:	e018      	b.n	8001852 <setSpeedMotor+0x8e>
    __HAL_TIM_SET_COMPARE(motor->htim, motor->channel, actual_speed);  // MISRA 17.2 - Void return
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	685b      	ldr	r3, [r3, #4]
 8001824:	2b04      	cmp	r3, #4
 8001826:	d105      	bne.n	8001834 <setSpeedMotor+0x70>
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	681a      	ldr	r2, [r3, #0]
 800182e:	8afb      	ldrh	r3, [r7, #22]
 8001830:	6393      	str	r3, [r2, #56]	@ 0x38
 8001832:	e00e      	b.n	8001852 <setSpeedMotor+0x8e>
    __HAL_TIM_SET_COMPARE(motor->htim, motor->channel, actual_speed);  // MISRA 17.2 - Void return
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	685b      	ldr	r3, [r3, #4]
 8001838:	2b08      	cmp	r3, #8
 800183a:	d105      	bne.n	8001848 <setSpeedMotor+0x84>
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	681a      	ldr	r2, [r3, #0]
 8001842:	8afb      	ldrh	r3, [r7, #22]
 8001844:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8001846:	e004      	b.n	8001852 <setSpeedMotor+0x8e>
    __HAL_TIM_SET_COMPARE(motor->htim, motor->channel, actual_speed);  // MISRA 17.2 - Void return
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	681a      	ldr	r2, [r3, #0]
 800184e:	8afb      	ldrh	r3, [r7, #22]
 8001850:	6413      	str	r3, [r2, #64]	@ 0x40
 8001852:	bf00      	nop
 8001854:	371c      	adds	r7, #28
 8001856:	46bd      	mov	sp, r7
 8001858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185c:	4770      	bx	lr
	...

08001860 <setPump>:
 */

#include "pump.h"

void setPump(GPIO_PinState state)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	b082      	sub	sp, #8
 8001864:	af00      	add	r7, sp, #0
 8001866:	4603      	mov	r3, r0
 8001868:	71fb      	strb	r3, [r7, #7]
    // MISRA 17.2 - Ignore return value (HAL_GPIO_WritePin returns void but rule applies generally)
    (void)HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, state);  // MISRA 11.3 - All parameters match expected types
 800186a:	79fb      	ldrb	r3, [r7, #7]
 800186c:	461a      	mov	r2, r3
 800186e:	2108      	movs	r1, #8
 8001870:	4803      	ldr	r0, [pc, #12]	@ (8001880 <setPump+0x20>)
 8001872:	f001 fae3 	bl	8002e3c <HAL_GPIO_WritePin>
    
    // MISRA 15.7 - All switch statements have default case (not applicable here)
    // MISRA 16.1 - All switch statements have at least one case (not applicable here)
 8001876:	bf00      	nop
 8001878:	3708      	adds	r7, #8
 800187a:	46bd      	mov	sp, r7
 800187c:	bd80      	pop	{r7, pc}
 800187e:	bf00      	nop
 8001880:	40020800 	.word	0x40020800

08001884 <initServo>:
 */

#include "servo.h"

void initServo(servo_t *servo, TIM_HandleTypeDef *htim, uint32_t channel)
{
 8001884:	b580      	push	{r7, lr}
 8001886:	b084      	sub	sp, #16
 8001888:	af00      	add	r7, sp, #0
 800188a:	60f8      	str	r0, [r7, #12]
 800188c:	60b9      	str	r1, [r7, #8]
 800188e:	607a      	str	r2, [r7, #4]
    // MISRA 11.3 - No implicit pointer conversion
    servo->htim = (TIM_HandleTypeDef*)htim;
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	68ba      	ldr	r2, [r7, #8]
 8001894:	601a      	str	r2, [r3, #0]
    
    servo->channel = channel;
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	687a      	ldr	r2, [r7, #4]
 800189a:	605a      	str	r2, [r3, #4]
    servo->angle = 0;  // MISRA 10.1 - Implicit conversion allowed (0 is universal)
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	2200      	movs	r2, #0
 80018a0:	811a      	strh	r2, [r3, #8]
    
    // MISRA 17.2 - Ignore return value
    (void)HAL_TIM_PWM_Start(servo->htim, servo->channel);
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	681a      	ldr	r2, [r3, #0]
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	685b      	ldr	r3, [r3, #4]
 80018aa:	4619      	mov	r1, r3
 80018ac:	4610      	mov	r0, r2
 80018ae:	f003 f86b 	bl	8004988 <HAL_TIM_PWM_Start>
}
 80018b2:	bf00      	nop
 80018b4:	3710      	adds	r7, #16
 80018b6:	46bd      	mov	sp, r7
 80018b8:	bd80      	pop	{r7, pc}
	...

080018bc <setAngleServo>:

void setAngleServo(servo_t *servo, int16_t angle)
{
 80018bc:	b480      	push	{r7}
 80018be:	b085      	sub	sp, #20
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]
 80018c4:	460b      	mov	r3, r1
 80018c6:	807b      	strh	r3, [r7, #2]
    int16_t boundedAngle = angle;  // MISRA 13.1 - Initialize variable
 80018c8:	887b      	ldrh	r3, [r7, #2]
 80018ca:	81fb      	strh	r3, [r7, #14]
    
    // MISRA 14.3 - Single statement per branch
    if (angle < 0) {
 80018cc:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	da02      	bge.n	80018da <setAngleServo+0x1e>
        boundedAngle = 0;
 80018d4:	2300      	movs	r3, #0
 80018d6:	81fb      	strh	r3, [r7, #14]
 80018d8:	e005      	b.n	80018e6 <setAngleServo+0x2a>
    }
    else if (angle > 180) {
 80018da:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80018de:	2bb4      	cmp	r3, #180	@ 0xb4
 80018e0:	dd01      	ble.n	80018e6 <setAngleServo+0x2a>
        boundedAngle = 180;
 80018e2:	23b4      	movs	r3, #180	@ 0xb4
 80018e4:	81fb      	strh	r3, [r7, #14]
    }
    
    servo->angle = boundedAngle;
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	89fa      	ldrh	r2, [r7, #14]
 80018ea:	811a      	strh	r2, [r3, #8]
    
    // MISRA 10.1 - Explicit conversion in calculation
    uint32_t ccr_value = 50U + ((uint32_t)boundedAngle * 200U) / 180U;
 80018ec:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80018f0:	22c8      	movs	r2, #200	@ 0xc8
 80018f2:	fb02 f303 	mul.w	r3, r2, r3
 80018f6:	089b      	lsrs	r3, r3, #2
 80018f8:	4a17      	ldr	r2, [pc, #92]	@ (8001958 <setAngleServo+0x9c>)
 80018fa:	fba2 2303 	umull	r2, r3, r2, r3
 80018fe:	089b      	lsrs	r3, r3, #2
 8001900:	3332      	adds	r3, #50	@ 0x32
 8001902:	60bb      	str	r3, [r7, #8]
    
    // MISRA 17.2 - Void return from macro
    __HAL_TIM_SET_COMPARE(servo->htim, servo->channel, (uint32_t)ccr_value);
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	685b      	ldr	r3, [r3, #4]
 8001908:	2b00      	cmp	r3, #0
 800190a:	d105      	bne.n	8001918 <setAngleServo+0x5c>
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	68ba      	ldr	r2, [r7, #8]
 8001914:	635a      	str	r2, [r3, #52]	@ 0x34
 8001916:	e018      	b.n	800194a <setAngleServo+0x8e>
    __HAL_TIM_SET_COMPARE(servo->htim, servo->channel, (uint32_t)ccr_value);
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	685b      	ldr	r3, [r3, #4]
 800191c:	2b04      	cmp	r3, #4
 800191e:	d105      	bne.n	800192c <setAngleServo+0x70>
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	681a      	ldr	r2, [r3, #0]
 8001926:	68bb      	ldr	r3, [r7, #8]
 8001928:	6393      	str	r3, [r2, #56]	@ 0x38
 800192a:	e00e      	b.n	800194a <setAngleServo+0x8e>
    __HAL_TIM_SET_COMPARE(servo->htim, servo->channel, (uint32_t)ccr_value);
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	685b      	ldr	r3, [r3, #4]
 8001930:	2b08      	cmp	r3, #8
 8001932:	d105      	bne.n	8001940 <setAngleServo+0x84>
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	681a      	ldr	r2, [r3, #0]
 800193a:	68bb      	ldr	r3, [r7, #8]
 800193c:	63d3      	str	r3, [r2, #60]	@ 0x3c
 800193e:	e004      	b.n	800194a <setAngleServo+0x8e>
    __HAL_TIM_SET_COMPARE(servo->htim, servo->channel, (uint32_t)ccr_value);
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	681a      	ldr	r2, [r3, #0]
 8001946:	68bb      	ldr	r3, [r7, #8]
 8001948:	6413      	str	r3, [r2, #64]	@ 0x40
 800194a:	bf00      	nop
 800194c:	3714      	adds	r7, #20
 800194e:	46bd      	mov	sp, r7
 8001950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001954:	4770      	bx	lr
 8001956:	bf00      	nop
 8001958:	16c16c17 	.word	0x16c16c17

0800195c <initSoilMoisture>:
 */

#include "soil_moisture.h"

void initSoilMoisture(soil_moisture_t *sensor, ADC_HandleTypeDef *hadc)
{
 800195c:	b580      	push	{r7, lr}
 800195e:	b084      	sub	sp, #16
 8001960:	af00      	add	r7, sp, #0
 8001962:	6078      	str	r0, [r7, #4]
 8001964:	6039      	str	r1, [r7, #0]
    uint8_t i = 0U;  // MISRA 13.1 - Initialize counter
 8001966:	2300      	movs	r3, #0
 8001968:	73fb      	strb	r3, [r7, #15]
    
    sensor->hadc = (ADC_HandleTypeDef*)hadc;  // MISRA 11.3 - Explicit cast
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	683a      	ldr	r2, [r7, #0]
 800196e:	601a      	str	r2, [r3, #0]
    sensor->moisture = 0U;
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	2200      	movs	r2, #0
 8001974:	809a      	strh	r2, [r3, #4]
    sensor->moistureADC = 0U;
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	2200      	movs	r2, #0
 800197a:	80da      	strh	r2, [r3, #6]
    
    // MISRA 14.4 - Simple for loop with counter
    for (i = 0U; i < MOISTURE_BUFFER_SIZE; i++) 
 800197c:	2300      	movs	r3, #0
 800197e:	73fb      	strb	r3, [r7, #15]
 8001980:	e008      	b.n	8001994 <initSoilMoisture+0x38>
    {
        sensor->moistureBuffer[i] = 0U;  // MISRA 10.1 - Unsigned literal
 8001982:	7bfa      	ldrb	r2, [r7, #15]
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	3204      	adds	r2, #4
 8001988:	2100      	movs	r1, #0
 800198a:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
    for (i = 0U; i < MOISTURE_BUFFER_SIZE; i++) 
 800198e:	7bfb      	ldrb	r3, [r7, #15]
 8001990:	3301      	adds	r3, #1
 8001992:	73fb      	strb	r3, [r7, #15]
 8001994:	7bfb      	ldrb	r3, [r7, #15]
 8001996:	2b09      	cmp	r3, #9
 8001998:	d9f3      	bls.n	8001982 <initSoilMoisture+0x26>
    }
    
    // MISRA 17.2 - Ignore return value
    (void)HAL_ADC_Start(sensor->hadc);
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	4618      	mov	r0, r3
 80019a0:	f000 fc26 	bl	80021f0 <HAL_ADC_Start>
}
 80019a4:	bf00      	nop
 80019a6:	3710      	adds	r7, #16
 80019a8:	46bd      	mov	sp, r7
 80019aa:	bd80      	pop	{r7, pc}

080019ac <readMoisture>:

void readMoisture(soil_moisture_t *sensor)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	b086      	sub	sp, #24
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	6078      	str	r0, [r7, #4]
    uint32_t sum = 0UL;  // MISRA 13.1 - Initialize variable
 80019b4:	2300      	movs	r3, #0
 80019b6:	617b      	str	r3, [r7, #20]
    uint8_t i = 0U;      // MISRA 13.1 - Initialize counter
 80019b8:	2300      	movs	r3, #0
 80019ba:	74fb      	strb	r3, [r7, #19]
    
    // MISRA 14.4 - Simple for loop with counter
    for (i = 0U; i < MOISTURE_BUFFER_SIZE; i++) 
 80019bc:	2300      	movs	r3, #0
 80019be:	74fb      	strb	r3, [r7, #19]
 80019c0:	e01d      	b.n	80019fe <readMoisture+0x52>
    {
        // MISRA 17.2 - Ignore return value
        (void)HAL_ADC_PollForConversion(sensor->hadc, 10U);  // MISRA 10.1 - Unsigned literal
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	210a      	movs	r1, #10
 80019c8:	4618      	mov	r0, r3
 80019ca:	f000 fce3 	bl	8002394 <HAL_ADC_PollForConversion>
        
        sensor->moistureBuffer[i] = (uint16_t)HAL_ADC_GetValue(sensor->hadc);  // MISRA 10.3 - Cast in range
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	4618      	mov	r0, r3
 80019d4:	f000 fd69 	bl	80024aa <HAL_ADC_GetValue>
 80019d8:	4603      	mov	r3, r0
 80019da:	7cfa      	ldrb	r2, [r7, #19]
 80019dc:	b299      	uxth	r1, r3
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	3204      	adds	r2, #4
 80019e2:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
        sum += (uint32_t)sensor->moistureBuffer[i];  // MISRA 10.1 - Prevent overflow
 80019e6:	7cfa      	ldrb	r2, [r7, #19]
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	3204      	adds	r2, #4
 80019ec:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80019f0:	461a      	mov	r2, r3
 80019f2:	697b      	ldr	r3, [r7, #20]
 80019f4:	4413      	add	r3, r2
 80019f6:	617b      	str	r3, [r7, #20]
    for (i = 0U; i < MOISTURE_BUFFER_SIZE; i++) 
 80019f8:	7cfb      	ldrb	r3, [r7, #19]
 80019fa:	3301      	adds	r3, #1
 80019fc:	74fb      	strb	r3, [r7, #19]
 80019fe:	7cfb      	ldrb	r3, [r7, #19]
 8001a00:	2b09      	cmp	r3, #9
 8001a02:	d9de      	bls.n	80019c2 <readMoisture+0x16>
    }
    
    sensor->moistureADC = (uint16_t)(sum / MOISTURE_BUFFER_SIZE);  // MISRA 10.3 - Cast in range
 8001a04:	697b      	ldr	r3, [r7, #20]
 8001a06:	4a14      	ldr	r2, [pc, #80]	@ (8001a58 <readMoisture+0xac>)
 8001a08:	fba2 2303 	umull	r2, r3, r2, r3
 8001a0c:	08db      	lsrs	r3, r3, #3
 8001a0e:	b29a      	uxth	r2, r3
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	80da      	strh	r2, [r3, #6]
    
    // MISRA 10.1/10.4 - Ensure unsigned arithmetic with proper casting
    if (sensor->moistureADC > DRY_VALUE) 
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	88db      	ldrh	r3, [r3, #6]
 8001a18:	f5b3 6f96 	cmp.w	r3, #1200	@ 0x4b0
 8001a1c:	d915      	bls.n	8001a4a <readMoisture+0x9e>
    {
        uint32_t range = (uint32_t)(ADC_MAX_VALUE - DRY_VALUE);
 8001a1e:	f640 334f 	movw	r3, #2895	@ 0xb4f
 8001a22:	60fb      	str	r3, [r7, #12]
        uint32_t adjusted = (uint32_t)(sensor->moistureADC - DRY_VALUE);
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	88db      	ldrh	r3, [r3, #6]
 8001a28:	f5a3 6396 	sub.w	r3, r3, #1200	@ 0x4b0
 8001a2c:	60bb      	str	r3, [r7, #8]
        sensor->moisture = (uint16_t)(100U - ((adjusted * 100U) / range));
 8001a2e:	68bb      	ldr	r3, [r7, #8]
 8001a30:	2264      	movs	r2, #100	@ 0x64
 8001a32:	fb03 f202 	mul.w	r2, r3, r2
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a3c:	b29b      	uxth	r3, r3
 8001a3e:	f1c3 0364 	rsb	r3, r3, #100	@ 0x64
 8001a42:	b29a      	uxth	r2, r3
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	809a      	strh	r2, [r3, #4]
    }
    else
    {
        sensor->moisture = 100U;  // MISRA 10.1 - Max moisture if below dry threshold
    }
 8001a48:	e002      	b.n	8001a50 <readMoisture+0xa4>
        sensor->moisture = 100U;  // MISRA 10.1 - Max moisture if below dry threshold
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	2264      	movs	r2, #100	@ 0x64
 8001a4e:	809a      	strh	r2, [r3, #4]
 8001a50:	bf00      	nop
 8001a52:	3718      	adds	r7, #24
 8001a54:	46bd      	mov	sp, r7
 8001a56:	bd80      	pop	{r7, pc}
 8001a58:	cccccccd 	.word	0xcccccccd

08001a5c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	b082      	sub	sp, #8
 8001a60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a62:	2300      	movs	r3, #0
 8001a64:	607b      	str	r3, [r7, #4]
 8001a66:	4b12      	ldr	r3, [pc, #72]	@ (8001ab0 <HAL_MspInit+0x54>)
 8001a68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a6a:	4a11      	ldr	r2, [pc, #68]	@ (8001ab0 <HAL_MspInit+0x54>)
 8001a6c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001a70:	6453      	str	r3, [r2, #68]	@ 0x44
 8001a72:	4b0f      	ldr	r3, [pc, #60]	@ (8001ab0 <HAL_MspInit+0x54>)
 8001a74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a76:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001a7a:	607b      	str	r3, [r7, #4]
 8001a7c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a7e:	2300      	movs	r3, #0
 8001a80:	603b      	str	r3, [r7, #0]
 8001a82:	4b0b      	ldr	r3, [pc, #44]	@ (8001ab0 <HAL_MspInit+0x54>)
 8001a84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a86:	4a0a      	ldr	r2, [pc, #40]	@ (8001ab0 <HAL_MspInit+0x54>)
 8001a88:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001a8c:	6413      	str	r3, [r2, #64]	@ 0x40
 8001a8e:	4b08      	ldr	r3, [pc, #32]	@ (8001ab0 <HAL_MspInit+0x54>)
 8001a90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a92:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a96:	603b      	str	r3, [r7, #0]
 8001a98:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	210f      	movs	r1, #15
 8001a9e:	f06f 0001 	mvn.w	r0, #1
 8001aa2:	f000 fff5 	bl	8002a90 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001aa6:	bf00      	nop
 8001aa8:	3708      	adds	r7, #8
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	bd80      	pop	{r7, pc}
 8001aae:	bf00      	nop
 8001ab0:	40023800 	.word	0x40023800

08001ab4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b08a      	sub	sp, #40	@ 0x28
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001abc:	f107 0314 	add.w	r3, r7, #20
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	601a      	str	r2, [r3, #0]
 8001ac4:	605a      	str	r2, [r3, #4]
 8001ac6:	609a      	str	r2, [r3, #8]
 8001ac8:	60da      	str	r2, [r3, #12]
 8001aca:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC3)
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	4a17      	ldr	r2, [pc, #92]	@ (8001b30 <HAL_ADC_MspInit+0x7c>)
 8001ad2:	4293      	cmp	r3, r2
 8001ad4:	d127      	bne.n	8001b26 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC3_MspInit 0 */

  /* USER CODE END ADC3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	613b      	str	r3, [r7, #16]
 8001ada:	4b16      	ldr	r3, [pc, #88]	@ (8001b34 <HAL_ADC_MspInit+0x80>)
 8001adc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ade:	4a15      	ldr	r2, [pc, #84]	@ (8001b34 <HAL_ADC_MspInit+0x80>)
 8001ae0:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001ae4:	6453      	str	r3, [r2, #68]	@ 0x44
 8001ae6:	4b13      	ldr	r3, [pc, #76]	@ (8001b34 <HAL_ADC_MspInit+0x80>)
 8001ae8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001aea:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001aee:	613b      	str	r3, [r7, #16]
 8001af0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001af2:	2300      	movs	r3, #0
 8001af4:	60fb      	str	r3, [r7, #12]
 8001af6:	4b0f      	ldr	r3, [pc, #60]	@ (8001b34 <HAL_ADC_MspInit+0x80>)
 8001af8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001afa:	4a0e      	ldr	r2, [pc, #56]	@ (8001b34 <HAL_ADC_MspInit+0x80>)
 8001afc:	f043 0304 	orr.w	r3, r3, #4
 8001b00:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b02:	4b0c      	ldr	r3, [pc, #48]	@ (8001b34 <HAL_ADC_MspInit+0x80>)
 8001b04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b06:	f003 0304 	and.w	r3, r3, #4
 8001b0a:	60fb      	str	r3, [r7, #12]
 8001b0c:	68fb      	ldr	r3, [r7, #12]
    /**ADC3 GPIO Configuration
    PC2     ------> ADC3_IN12
    */
    GPIO_InitStruct.Pin = Soil_Moisture_Pin;
 8001b0e:	2304      	movs	r3, #4
 8001b10:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001b12:	2303      	movs	r3, #3
 8001b14:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b16:	2300      	movs	r3, #0
 8001b18:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(Soil_Moisture_GPIO_Port, &GPIO_InitStruct);
 8001b1a:	f107 0314 	add.w	r3, r7, #20
 8001b1e:	4619      	mov	r1, r3
 8001b20:	4805      	ldr	r0, [pc, #20]	@ (8001b38 <HAL_ADC_MspInit+0x84>)
 8001b22:	f000 ffdf 	bl	8002ae4 <HAL_GPIO_Init>

  /* USER CODE END ADC3_MspInit 1 */

  }

}
 8001b26:	bf00      	nop
 8001b28:	3728      	adds	r7, #40	@ 0x28
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	bd80      	pop	{r7, pc}
 8001b2e:	bf00      	nop
 8001b30:	40012200 	.word	0x40012200
 8001b34:	40023800 	.word	0x40023800
 8001b38:	40020800 	.word	0x40020800

08001b3c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	b08a      	sub	sp, #40	@ 0x28
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b44:	f107 0314 	add.w	r3, r7, #20
 8001b48:	2200      	movs	r2, #0
 8001b4a:	601a      	str	r2, [r3, #0]
 8001b4c:	605a      	str	r2, [r3, #4]
 8001b4e:	609a      	str	r2, [r3, #8]
 8001b50:	60da      	str	r2, [r3, #12]
 8001b52:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	4a21      	ldr	r2, [pc, #132]	@ (8001be0 <HAL_SPI_MspInit+0xa4>)
 8001b5a:	4293      	cmp	r3, r2
 8001b5c:	d13c      	bne.n	8001bd8 <HAL_SPI_MspInit+0x9c>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001b5e:	2300      	movs	r3, #0
 8001b60:	613b      	str	r3, [r7, #16]
 8001b62:	4b20      	ldr	r3, [pc, #128]	@ (8001be4 <HAL_SPI_MspInit+0xa8>)
 8001b64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b66:	4a1f      	ldr	r2, [pc, #124]	@ (8001be4 <HAL_SPI_MspInit+0xa8>)
 8001b68:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001b6c:	6413      	str	r3, [r2, #64]	@ 0x40
 8001b6e:	4b1d      	ldr	r3, [pc, #116]	@ (8001be4 <HAL_SPI_MspInit+0xa8>)
 8001b70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b72:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001b76:	613b      	str	r3, [r7, #16]
 8001b78:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	60fb      	str	r3, [r7, #12]
 8001b7e:	4b19      	ldr	r3, [pc, #100]	@ (8001be4 <HAL_SPI_MspInit+0xa8>)
 8001b80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b82:	4a18      	ldr	r2, [pc, #96]	@ (8001be4 <HAL_SPI_MspInit+0xa8>)
 8001b84:	f043 0304 	orr.w	r3, r3, #4
 8001b88:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b8a:	4b16      	ldr	r3, [pc, #88]	@ (8001be4 <HAL_SPI_MspInit+0xa8>)
 8001b8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b8e:	f003 0304 	and.w	r3, r3, #4
 8001b92:	60fb      	str	r3, [r7, #12]
 8001b94:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC1     ------> SPI3_MOSI
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001b96:	2302      	movs	r3, #2
 8001b98:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b9a:	2302      	movs	r3, #2
 8001b9c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ba2:	2303      	movs	r3, #3
 8001ba4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI3;
 8001ba6:	2305      	movs	r3, #5
 8001ba8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001baa:	f107 0314 	add.w	r3, r7, #20
 8001bae:	4619      	mov	r1, r3
 8001bb0:	480d      	ldr	r0, [pc, #52]	@ (8001be8 <HAL_SPI_MspInit+0xac>)
 8001bb2:	f000 ff97 	bl	8002ae4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001bb6:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8001bba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bbc:	2302      	movs	r3, #2
 8001bbe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bc0:	2300      	movs	r3, #0
 8001bc2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bc4:	2303      	movs	r3, #3
 8001bc6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001bc8:	2306      	movs	r3, #6
 8001bca:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001bcc:	f107 0314 	add.w	r3, r7, #20
 8001bd0:	4619      	mov	r1, r3
 8001bd2:	4805      	ldr	r0, [pc, #20]	@ (8001be8 <HAL_SPI_MspInit+0xac>)
 8001bd4:	f000 ff86 	bl	8002ae4 <HAL_GPIO_Init>

  /* USER CODE END SPI3_MspInit 1 */

  }

}
 8001bd8:	bf00      	nop
 8001bda:	3728      	adds	r7, #40	@ 0x28
 8001bdc:	46bd      	mov	sp, r7
 8001bde:	bd80      	pop	{r7, pc}
 8001be0:	40003c00 	.word	0x40003c00
 8001be4:	40023800 	.word	0x40023800
 8001be8:	40020800 	.word	0x40020800

08001bec <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	b086      	sub	sp, #24
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001bfc:	d10e      	bne.n	8001c1c <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001bfe:	2300      	movs	r3, #0
 8001c00:	617b      	str	r3, [r7, #20]
 8001c02:	4b2a      	ldr	r3, [pc, #168]	@ (8001cac <HAL_TIM_Base_MspInit+0xc0>)
 8001c04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c06:	4a29      	ldr	r2, [pc, #164]	@ (8001cac <HAL_TIM_Base_MspInit+0xc0>)
 8001c08:	f043 0301 	orr.w	r3, r3, #1
 8001c0c:	6413      	str	r3, [r2, #64]	@ 0x40
 8001c0e:	4b27      	ldr	r3, [pc, #156]	@ (8001cac <HAL_TIM_Base_MspInit+0xc0>)
 8001c10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c12:	f003 0301 	and.w	r3, r3, #1
 8001c16:	617b      	str	r3, [r7, #20]
 8001c18:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }

}
 8001c1a:	e042      	b.n	8001ca2 <HAL_TIM_Base_MspInit+0xb6>
  else if(htim_base->Instance==TIM3)
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	4a23      	ldr	r2, [pc, #140]	@ (8001cb0 <HAL_TIM_Base_MspInit+0xc4>)
 8001c22:	4293      	cmp	r3, r2
 8001c24:	d10e      	bne.n	8001c44 <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001c26:	2300      	movs	r3, #0
 8001c28:	613b      	str	r3, [r7, #16]
 8001c2a:	4b20      	ldr	r3, [pc, #128]	@ (8001cac <HAL_TIM_Base_MspInit+0xc0>)
 8001c2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c2e:	4a1f      	ldr	r2, [pc, #124]	@ (8001cac <HAL_TIM_Base_MspInit+0xc0>)
 8001c30:	f043 0302 	orr.w	r3, r3, #2
 8001c34:	6413      	str	r3, [r2, #64]	@ 0x40
 8001c36:	4b1d      	ldr	r3, [pc, #116]	@ (8001cac <HAL_TIM_Base_MspInit+0xc0>)
 8001c38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c3a:	f003 0302 	and.w	r3, r3, #2
 8001c3e:	613b      	str	r3, [r7, #16]
 8001c40:	693b      	ldr	r3, [r7, #16]
}
 8001c42:	e02e      	b.n	8001ca2 <HAL_TIM_Base_MspInit+0xb6>
  else if(htim_base->Instance==TIM10)
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	4a1a      	ldr	r2, [pc, #104]	@ (8001cb4 <HAL_TIM_Base_MspInit+0xc8>)
 8001c4a:	4293      	cmp	r3, r2
 8001c4c:	d116      	bne.n	8001c7c <HAL_TIM_Base_MspInit+0x90>
    __HAL_RCC_TIM10_CLK_ENABLE();
 8001c4e:	2300      	movs	r3, #0
 8001c50:	60fb      	str	r3, [r7, #12]
 8001c52:	4b16      	ldr	r3, [pc, #88]	@ (8001cac <HAL_TIM_Base_MspInit+0xc0>)
 8001c54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c56:	4a15      	ldr	r2, [pc, #84]	@ (8001cac <HAL_TIM_Base_MspInit+0xc0>)
 8001c58:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001c5c:	6453      	str	r3, [r2, #68]	@ 0x44
 8001c5e:	4b13      	ldr	r3, [pc, #76]	@ (8001cac <HAL_TIM_Base_MspInit+0xc0>)
 8001c60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c62:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c66:	60fb      	str	r3, [r7, #12]
 8001c68:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 15, 0);
 8001c6a:	2200      	movs	r2, #0
 8001c6c:	210f      	movs	r1, #15
 8001c6e:	2019      	movs	r0, #25
 8001c70:	f000 ff0e 	bl	8002a90 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001c74:	2019      	movs	r0, #25
 8001c76:	f000 ff27 	bl	8002ac8 <HAL_NVIC_EnableIRQ>
}
 8001c7a:	e012      	b.n	8001ca2 <HAL_TIM_Base_MspInit+0xb6>
  else if(htim_base->Instance==TIM11)
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	4a0d      	ldr	r2, [pc, #52]	@ (8001cb8 <HAL_TIM_Base_MspInit+0xcc>)
 8001c82:	4293      	cmp	r3, r2
 8001c84:	d10d      	bne.n	8001ca2 <HAL_TIM_Base_MspInit+0xb6>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8001c86:	2300      	movs	r3, #0
 8001c88:	60bb      	str	r3, [r7, #8]
 8001c8a:	4b08      	ldr	r3, [pc, #32]	@ (8001cac <HAL_TIM_Base_MspInit+0xc0>)
 8001c8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c8e:	4a07      	ldr	r2, [pc, #28]	@ (8001cac <HAL_TIM_Base_MspInit+0xc0>)
 8001c90:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001c94:	6453      	str	r3, [r2, #68]	@ 0x44
 8001c96:	4b05      	ldr	r3, [pc, #20]	@ (8001cac <HAL_TIM_Base_MspInit+0xc0>)
 8001c98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c9a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001c9e:	60bb      	str	r3, [r7, #8]
 8001ca0:	68bb      	ldr	r3, [r7, #8]
}
 8001ca2:	bf00      	nop
 8001ca4:	3718      	adds	r7, #24
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	bd80      	pop	{r7, pc}
 8001caa:	bf00      	nop
 8001cac:	40023800 	.word	0x40023800
 8001cb0:	40000400 	.word	0x40000400
 8001cb4:	40014400 	.word	0x40014400
 8001cb8:	40014800 	.word	0x40014800

08001cbc <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001cbc:	b480      	push	{r7}
 8001cbe:	b085      	sub	sp, #20
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM12)
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	4a0b      	ldr	r2, [pc, #44]	@ (8001cf8 <HAL_TIM_PWM_MspInit+0x3c>)
 8001cca:	4293      	cmp	r3, r2
 8001ccc:	d10d      	bne.n	8001cea <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM12_MspInit 0 */

  /* USER CODE END TIM12_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM12_CLK_ENABLE();
 8001cce:	2300      	movs	r3, #0
 8001cd0:	60fb      	str	r3, [r7, #12]
 8001cd2:	4b0a      	ldr	r3, [pc, #40]	@ (8001cfc <HAL_TIM_PWM_MspInit+0x40>)
 8001cd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cd6:	4a09      	ldr	r2, [pc, #36]	@ (8001cfc <HAL_TIM_PWM_MspInit+0x40>)
 8001cd8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001cdc:	6413      	str	r3, [r2, #64]	@ 0x40
 8001cde:	4b07      	ldr	r3, [pc, #28]	@ (8001cfc <HAL_TIM_PWM_MspInit+0x40>)
 8001ce0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ce2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001ce6:	60fb      	str	r3, [r7, #12]
 8001ce8:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM12_MspInit 1 */

  }

}
 8001cea:	bf00      	nop
 8001cec:	3714      	adds	r7, #20
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf4:	4770      	bx	lr
 8001cf6:	bf00      	nop
 8001cf8:	40001800 	.word	0x40001800
 8001cfc:	40023800 	.word	0x40023800

08001d00 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001d00:	b580      	push	{r7, lr}
 8001d02:	b08c      	sub	sp, #48	@ 0x30
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d08:	f107 031c 	add.w	r3, r7, #28
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	601a      	str	r2, [r3, #0]
 8001d10:	605a      	str	r2, [r3, #4]
 8001d12:	609a      	str	r2, [r3, #8]
 8001d14:	60da      	str	r2, [r3, #12]
 8001d16:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001d20:	d11e      	bne.n	8001d60 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d22:	2300      	movs	r3, #0
 8001d24:	61bb      	str	r3, [r7, #24]
 8001d26:	4b47      	ldr	r3, [pc, #284]	@ (8001e44 <HAL_TIM_MspPostInit+0x144>)
 8001d28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d2a:	4a46      	ldr	r2, [pc, #280]	@ (8001e44 <HAL_TIM_MspPostInit+0x144>)
 8001d2c:	f043 0301 	orr.w	r3, r3, #1
 8001d30:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d32:	4b44      	ldr	r3, [pc, #272]	@ (8001e44 <HAL_TIM_MspPostInit+0x144>)
 8001d34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d36:	f003 0301 	and.w	r3, r3, #1
 8001d3a:	61bb      	str	r3, [r7, #24]
 8001d3c:	69bb      	ldr	r3, [r7, #24]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = Servo_Pin;
 8001d3e:	2301      	movs	r3, #1
 8001d40:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d42:	2302      	movs	r3, #2
 8001d44:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d46:	2300      	movs	r3, #0
 8001d48:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001d4e:	2301      	movs	r3, #1
 8001d50:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(Servo_GPIO_Port, &GPIO_InitStruct);
 8001d52:	f107 031c 	add.w	r3, r7, #28
 8001d56:	4619      	mov	r1, r3
 8001d58:	483b      	ldr	r0, [pc, #236]	@ (8001e48 <HAL_TIM_MspPostInit+0x148>)
 8001d5a:	f000 fec3 	bl	8002ae4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM12_MspPostInit 1 */

  /* USER CODE END TIM12_MspPostInit 1 */
  }

}
 8001d5e:	e06d      	b.n	8001e3c <HAL_TIM_MspPostInit+0x13c>
  else if(htim->Instance==TIM10)
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	4a39      	ldr	r2, [pc, #228]	@ (8001e4c <HAL_TIM_MspPostInit+0x14c>)
 8001d66:	4293      	cmp	r3, r2
 8001d68:	d11f      	bne.n	8001daa <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	617b      	str	r3, [r7, #20]
 8001d6e:	4b35      	ldr	r3, [pc, #212]	@ (8001e44 <HAL_TIM_MspPostInit+0x144>)
 8001d70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d72:	4a34      	ldr	r2, [pc, #208]	@ (8001e44 <HAL_TIM_MspPostInit+0x144>)
 8001d74:	f043 0302 	orr.w	r3, r3, #2
 8001d78:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d7a:	4b32      	ldr	r3, [pc, #200]	@ (8001e44 <HAL_TIM_MspPostInit+0x144>)
 8001d7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d7e:	f003 0302 	and.w	r3, r3, #2
 8001d82:	617b      	str	r3, [r7, #20]
 8001d84:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = Motor_1_Pin;
 8001d86:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001d8a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d8c:	2302      	movs	r3, #2
 8001d8e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d90:	2300      	movs	r3, #0
 8001d92:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d94:	2300      	movs	r3, #0
 8001d96:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM10;
 8001d98:	2303      	movs	r3, #3
 8001d9a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(Motor_1_GPIO_Port, &GPIO_InitStruct);
 8001d9c:	f107 031c 	add.w	r3, r7, #28
 8001da0:	4619      	mov	r1, r3
 8001da2:	482b      	ldr	r0, [pc, #172]	@ (8001e50 <HAL_TIM_MspPostInit+0x150>)
 8001da4:	f000 fe9e 	bl	8002ae4 <HAL_GPIO_Init>
}
 8001da8:	e048      	b.n	8001e3c <HAL_TIM_MspPostInit+0x13c>
  else if(htim->Instance==TIM11)
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	4a29      	ldr	r2, [pc, #164]	@ (8001e54 <HAL_TIM_MspPostInit+0x154>)
 8001db0:	4293      	cmp	r3, r2
 8001db2:	d11f      	bne.n	8001df4 <HAL_TIM_MspPostInit+0xf4>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001db4:	2300      	movs	r3, #0
 8001db6:	613b      	str	r3, [r7, #16]
 8001db8:	4b22      	ldr	r3, [pc, #136]	@ (8001e44 <HAL_TIM_MspPostInit+0x144>)
 8001dba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dbc:	4a21      	ldr	r2, [pc, #132]	@ (8001e44 <HAL_TIM_MspPostInit+0x144>)
 8001dbe:	f043 0302 	orr.w	r3, r3, #2
 8001dc2:	6313      	str	r3, [r2, #48]	@ 0x30
 8001dc4:	4b1f      	ldr	r3, [pc, #124]	@ (8001e44 <HAL_TIM_MspPostInit+0x144>)
 8001dc6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dc8:	f003 0302 	and.w	r3, r3, #2
 8001dcc:	613b      	str	r3, [r7, #16]
 8001dce:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = Motor_2_Pin;
 8001dd0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001dd4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dd6:	2302      	movs	r3, #2
 8001dd8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dda:	2300      	movs	r3, #0
 8001ddc:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dde:	2300      	movs	r3, #0
 8001de0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM11;
 8001de2:	2303      	movs	r3, #3
 8001de4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(Motor_2_GPIO_Port, &GPIO_InitStruct);
 8001de6:	f107 031c 	add.w	r3, r7, #28
 8001dea:	4619      	mov	r1, r3
 8001dec:	4818      	ldr	r0, [pc, #96]	@ (8001e50 <HAL_TIM_MspPostInit+0x150>)
 8001dee:	f000 fe79 	bl	8002ae4 <HAL_GPIO_Init>
}
 8001df2:	e023      	b.n	8001e3c <HAL_TIM_MspPostInit+0x13c>
  else if(htim->Instance==TIM12)
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	4a17      	ldr	r2, [pc, #92]	@ (8001e58 <HAL_TIM_MspPostInit+0x158>)
 8001dfa:	4293      	cmp	r3, r2
 8001dfc:	d11e      	bne.n	8001e3c <HAL_TIM_MspPostInit+0x13c>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001dfe:	2300      	movs	r3, #0
 8001e00:	60fb      	str	r3, [r7, #12]
 8001e02:	4b10      	ldr	r3, [pc, #64]	@ (8001e44 <HAL_TIM_MspPostInit+0x144>)
 8001e04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e06:	4a0f      	ldr	r2, [pc, #60]	@ (8001e44 <HAL_TIM_MspPostInit+0x144>)
 8001e08:	f043 0302 	orr.w	r3, r3, #2
 8001e0c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e0e:	4b0d      	ldr	r3, [pc, #52]	@ (8001e44 <HAL_TIM_MspPostInit+0x144>)
 8001e10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e12:	f003 0302 	and.w	r3, r3, #2
 8001e16:	60fb      	str	r3, [r7, #12]
 8001e18:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = Motor_3_Pin|Motor_4_Pin;
 8001e1a:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8001e1e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e20:	2302      	movs	r3, #2
 8001e22:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e24:	2300      	movs	r3, #0
 8001e26:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e28:	2300      	movs	r3, #0
 8001e2a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 8001e2c:	2309      	movs	r3, #9
 8001e2e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e30:	f107 031c 	add.w	r3, r7, #28
 8001e34:	4619      	mov	r1, r3
 8001e36:	4806      	ldr	r0, [pc, #24]	@ (8001e50 <HAL_TIM_MspPostInit+0x150>)
 8001e38:	f000 fe54 	bl	8002ae4 <HAL_GPIO_Init>
}
 8001e3c:	bf00      	nop
 8001e3e:	3730      	adds	r7, #48	@ 0x30
 8001e40:	46bd      	mov	sp, r7
 8001e42:	bd80      	pop	{r7, pc}
 8001e44:	40023800 	.word	0x40023800
 8001e48:	40020000 	.word	0x40020000
 8001e4c:	40014400 	.word	0x40014400
 8001e50:	40020400 	.word	0x40020400
 8001e54:	40014800 	.word	0x40014800
 8001e58:	40001800 	.word	0x40001800

08001e5c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	b08a      	sub	sp, #40	@ 0x28
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e64:	f107 0314 	add.w	r3, r7, #20
 8001e68:	2200      	movs	r2, #0
 8001e6a:	601a      	str	r2, [r3, #0]
 8001e6c:	605a      	str	r2, [r3, #4]
 8001e6e:	609a      	str	r2, [r3, #8]
 8001e70:	60da      	str	r2, [r3, #12]
 8001e72:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	4a19      	ldr	r2, [pc, #100]	@ (8001ee0 <HAL_UART_MspInit+0x84>)
 8001e7a:	4293      	cmp	r3, r2
 8001e7c:	d12b      	bne.n	8001ed6 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001e7e:	2300      	movs	r3, #0
 8001e80:	613b      	str	r3, [r7, #16]
 8001e82:	4b18      	ldr	r3, [pc, #96]	@ (8001ee4 <HAL_UART_MspInit+0x88>)
 8001e84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e86:	4a17      	ldr	r2, [pc, #92]	@ (8001ee4 <HAL_UART_MspInit+0x88>)
 8001e88:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001e8c:	6413      	str	r3, [r2, #64]	@ 0x40
 8001e8e:	4b15      	ldr	r3, [pc, #84]	@ (8001ee4 <HAL_UART_MspInit+0x88>)
 8001e90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e92:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e96:	613b      	str	r3, [r7, #16]
 8001e98:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	60fb      	str	r3, [r7, #12]
 8001e9e:	4b11      	ldr	r3, [pc, #68]	@ (8001ee4 <HAL_UART_MspInit+0x88>)
 8001ea0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ea2:	4a10      	ldr	r2, [pc, #64]	@ (8001ee4 <HAL_UART_MspInit+0x88>)
 8001ea4:	f043 0301 	orr.w	r3, r3, #1
 8001ea8:	6313      	str	r3, [r2, #48]	@ 0x30
 8001eaa:	4b0e      	ldr	r3, [pc, #56]	@ (8001ee4 <HAL_UART_MspInit+0x88>)
 8001eac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001eae:	f003 0301 	and.w	r3, r3, #1
 8001eb2:	60fb      	str	r3, [r7, #12]
 8001eb4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001eb6:	230c      	movs	r3, #12
 8001eb8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001eba:	2302      	movs	r3, #2
 8001ebc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ec2:	2303      	movs	r3, #3
 8001ec4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001ec6:	2307      	movs	r3, #7
 8001ec8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001eca:	f107 0314 	add.w	r3, r7, #20
 8001ece:	4619      	mov	r1, r3
 8001ed0:	4805      	ldr	r0, [pc, #20]	@ (8001ee8 <HAL_UART_MspInit+0x8c>)
 8001ed2:	f000 fe07 	bl	8002ae4 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8001ed6:	bf00      	nop
 8001ed8:	3728      	adds	r7, #40	@ 0x28
 8001eda:	46bd      	mov	sp, r7
 8001edc:	bd80      	pop	{r7, pc}
 8001ede:	bf00      	nop
 8001ee0:	40004400 	.word	0x40004400
 8001ee4:	40023800 	.word	0x40023800
 8001ee8:	40020000 	.word	0x40020000

08001eec <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	b08c      	sub	sp, #48	@ 0x30
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8001ef4:	2300      	movs	r3, #0
 8001ef6:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 8001ef8:	2300      	movs	r3, #0
 8001efa:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001efc:	2300      	movs	r3, #0
 8001efe:	60bb      	str	r3, [r7, #8]
 8001f00:	4b2e      	ldr	r3, [pc, #184]	@ (8001fbc <HAL_InitTick+0xd0>)
 8001f02:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f04:	4a2d      	ldr	r2, [pc, #180]	@ (8001fbc <HAL_InitTick+0xd0>)
 8001f06:	f043 0301 	orr.w	r3, r3, #1
 8001f0a:	6453      	str	r3, [r2, #68]	@ 0x44
 8001f0c:	4b2b      	ldr	r3, [pc, #172]	@ (8001fbc <HAL_InitTick+0xd0>)
 8001f0e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f10:	f003 0301 	and.w	r3, r3, #1
 8001f14:	60bb      	str	r3, [r7, #8]
 8001f16:	68bb      	ldr	r3, [r7, #8]

/* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001f18:	f107 020c 	add.w	r2, r7, #12
 8001f1c:	f107 0310 	add.w	r3, r7, #16
 8001f20:	4611      	mov	r1, r2
 8001f22:	4618      	mov	r0, r3
 8001f24:	f001 f8be 	bl	80030a4 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8001f28:	f001 f8a8 	bl	800307c <HAL_RCC_GetPCLK2Freq>
 8001f2c:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001f2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001f30:	4a23      	ldr	r2, [pc, #140]	@ (8001fc0 <HAL_InitTick+0xd4>)
 8001f32:	fba2 2303 	umull	r2, r3, r2, r3
 8001f36:	0c9b      	lsrs	r3, r3, #18
 8001f38:	3b01      	subs	r3, #1
 8001f3a:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001f3c:	4b21      	ldr	r3, [pc, #132]	@ (8001fc4 <HAL_InitTick+0xd8>)
 8001f3e:	4a22      	ldr	r2, [pc, #136]	@ (8001fc8 <HAL_InitTick+0xdc>)
 8001f40:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8001f42:	4b20      	ldr	r3, [pc, #128]	@ (8001fc4 <HAL_InitTick+0xd8>)
 8001f44:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001f48:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8001f4a:	4a1e      	ldr	r2, [pc, #120]	@ (8001fc4 <HAL_InitTick+0xd8>)
 8001f4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f4e:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8001f50:	4b1c      	ldr	r3, [pc, #112]	@ (8001fc4 <HAL_InitTick+0xd8>)
 8001f52:	2200      	movs	r2, #0
 8001f54:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f56:	4b1b      	ldr	r3, [pc, #108]	@ (8001fc4 <HAL_InitTick+0xd8>)
 8001f58:	2200      	movs	r2, #0
 8001f5a:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f5c:	4b19      	ldr	r3, [pc, #100]	@ (8001fc4 <HAL_InitTick+0xd8>)
 8001f5e:	2200      	movs	r2, #0
 8001f60:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8001f62:	4818      	ldr	r0, [pc, #96]	@ (8001fc4 <HAL_InitTick+0xd8>)
 8001f64:	f002 fb70 	bl	8004648 <HAL_TIM_Base_Init>
 8001f68:	4603      	mov	r3, r0
 8001f6a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8001f6e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d11b      	bne.n	8001fae <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8001f76:	4813      	ldr	r0, [pc, #76]	@ (8001fc4 <HAL_InitTick+0xd8>)
 8001f78:	f002 fc46 	bl	8004808 <HAL_TIM_Base_Start_IT>
 8001f7c:	4603      	mov	r3, r0
 8001f7e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8001f82:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d111      	bne.n	8001fae <HAL_InitTick+0xc2>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001f8a:	2019      	movs	r0, #25
 8001f8c:	f000 fd9c 	bl	8002ac8 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	2b0f      	cmp	r3, #15
 8001f94:	d808      	bhi.n	8001fa8 <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8001f96:	2200      	movs	r2, #0
 8001f98:	6879      	ldr	r1, [r7, #4]
 8001f9a:	2019      	movs	r0, #25
 8001f9c:	f000 fd78 	bl	8002a90 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001fa0:	4a0a      	ldr	r2, [pc, #40]	@ (8001fcc <HAL_InitTick+0xe0>)
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	6013      	str	r3, [r2, #0]
 8001fa6:	e002      	b.n	8001fae <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 8001fa8:	2301      	movs	r3, #1
 8001faa:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8001fae:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8001fb2:	4618      	mov	r0, r3
 8001fb4:	3730      	adds	r7, #48	@ 0x30
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	bd80      	pop	{r7, pc}
 8001fba:	bf00      	nop
 8001fbc:	40023800 	.word	0x40023800
 8001fc0:	431bde83 	.word	0x431bde83
 8001fc4:	200005ec 	.word	0x200005ec
 8001fc8:	40010000 	.word	0x40010000
 8001fcc:	20000004 	.word	0x20000004

08001fd0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001fd0:	b480      	push	{r7}
 8001fd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001fd4:	bf00      	nop
 8001fd6:	e7fd      	b.n	8001fd4 <NMI_Handler+0x4>

08001fd8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001fd8:	b480      	push	{r7}
 8001fda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001fdc:	bf00      	nop
 8001fde:	e7fd      	b.n	8001fdc <HardFault_Handler+0x4>

08001fe0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001fe0:	b480      	push	{r7}
 8001fe2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001fe4:	bf00      	nop
 8001fe6:	e7fd      	b.n	8001fe4 <MemManage_Handler+0x4>

08001fe8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001fe8:	b480      	push	{r7}
 8001fea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001fec:	bf00      	nop
 8001fee:	e7fd      	b.n	8001fec <BusFault_Handler+0x4>

08001ff0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ff0:	b480      	push	{r7}
 8001ff2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ff4:	bf00      	nop
 8001ff6:	e7fd      	b.n	8001ff4 <UsageFault_Handler+0x4>

08001ff8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001ff8:	b480      	push	{r7}
 8001ffa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001ffc:	bf00      	nop
 8001ffe:	46bd      	mov	sp, r7
 8002000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002004:	4770      	bx	lr
	...

08002008 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8002008:	b580      	push	{r7, lr}
 800200a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800200c:	4803      	ldr	r0, [pc, #12]	@ (800201c <TIM1_UP_TIM10_IRQHandler+0x14>)
 800200e:	f002 fd83 	bl	8004b18 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim10);
 8002012:	4803      	ldr	r0, [pc, #12]	@ (8002020 <TIM1_UP_TIM10_IRQHandler+0x18>)
 8002014:	f002 fd80 	bl	8004b18 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8002018:	bf00      	nop
 800201a:	bd80      	pop	{r7, pc}
 800201c:	200005ec 	.word	0x200005ec
 8002020:	2000044c 	.word	0x2000044c

08002024 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002024:	b480      	push	{r7}
 8002026:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002028:	4b06      	ldr	r3, [pc, #24]	@ (8002044 <SystemInit+0x20>)
 800202a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800202e:	4a05      	ldr	r2, [pc, #20]	@ (8002044 <SystemInit+0x20>)
 8002030:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002034:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002038:	bf00      	nop
 800203a:	46bd      	mov	sp, r7
 800203c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002040:	4770      	bx	lr
 8002042:	bf00      	nop
 8002044:	e000ed00 	.word	0xe000ed00

08002048 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002048:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002080 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 800204c:	f7ff ffea 	bl	8002024 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002050:	480c      	ldr	r0, [pc, #48]	@ (8002084 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002052:	490d      	ldr	r1, [pc, #52]	@ (8002088 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002054:	4a0d      	ldr	r2, [pc, #52]	@ (800208c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002056:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002058:	e002      	b.n	8002060 <LoopCopyDataInit>

0800205a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800205a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800205c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800205e:	3304      	adds	r3, #4

08002060 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002060:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002062:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002064:	d3f9      	bcc.n	800205a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002066:	4a0a      	ldr	r2, [pc, #40]	@ (8002090 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002068:	4c0a      	ldr	r4, [pc, #40]	@ (8002094 <LoopFillZerobss+0x22>)
  movs r3, #0
 800206a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800206c:	e001      	b.n	8002072 <LoopFillZerobss>

0800206e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800206e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002070:	3204      	adds	r2, #4

08002072 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002072:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002074:	d3fb      	bcc.n	800206e <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8002076:	f005 f94b 	bl	8007310 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800207a:	f7fe fe89 	bl	8000d90 <main>
  bx  lr    
 800207e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002080:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002084:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002088:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 800208c:	080074d4 	.word	0x080074d4
  ldr r2, =_sbss
 8002090:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8002094:	200044cc 	.word	0x200044cc

08002098 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002098:	e7fe      	b.n	8002098 <ADC_IRQHandler>
	...

0800209c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800209c:	b580      	push	{r7, lr}
 800209e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80020a0:	4b0e      	ldr	r3, [pc, #56]	@ (80020dc <HAL_Init+0x40>)
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	4a0d      	ldr	r2, [pc, #52]	@ (80020dc <HAL_Init+0x40>)
 80020a6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80020aa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80020ac:	4b0b      	ldr	r3, [pc, #44]	@ (80020dc <HAL_Init+0x40>)
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	4a0a      	ldr	r2, [pc, #40]	@ (80020dc <HAL_Init+0x40>)
 80020b2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80020b6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80020b8:	4b08      	ldr	r3, [pc, #32]	@ (80020dc <HAL_Init+0x40>)
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	4a07      	ldr	r2, [pc, #28]	@ (80020dc <HAL_Init+0x40>)
 80020be:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80020c2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80020c4:	2003      	movs	r0, #3
 80020c6:	f000 fcd8 	bl	8002a7a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80020ca:	200f      	movs	r0, #15
 80020cc:	f7ff ff0e 	bl	8001eec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80020d0:	f7ff fcc4 	bl	8001a5c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80020d4:	2300      	movs	r3, #0
}
 80020d6:	4618      	mov	r0, r3
 80020d8:	bd80      	pop	{r7, pc}
 80020da:	bf00      	nop
 80020dc:	40023c00 	.word	0x40023c00

080020e0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80020e0:	b480      	push	{r7}
 80020e2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80020e4:	4b06      	ldr	r3, [pc, #24]	@ (8002100 <HAL_IncTick+0x20>)
 80020e6:	781b      	ldrb	r3, [r3, #0]
 80020e8:	461a      	mov	r2, r3
 80020ea:	4b06      	ldr	r3, [pc, #24]	@ (8002104 <HAL_IncTick+0x24>)
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	4413      	add	r3, r2
 80020f0:	4a04      	ldr	r2, [pc, #16]	@ (8002104 <HAL_IncTick+0x24>)
 80020f2:	6013      	str	r3, [r2, #0]
}
 80020f4:	bf00      	nop
 80020f6:	46bd      	mov	sp, r7
 80020f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fc:	4770      	bx	lr
 80020fe:	bf00      	nop
 8002100:	20000008 	.word	0x20000008
 8002104:	20000634 	.word	0x20000634

08002108 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002108:	b480      	push	{r7}
 800210a:	af00      	add	r7, sp, #0
  return uwTick;
 800210c:	4b03      	ldr	r3, [pc, #12]	@ (800211c <HAL_GetTick+0x14>)
 800210e:	681b      	ldr	r3, [r3, #0]
}
 8002110:	4618      	mov	r0, r3
 8002112:	46bd      	mov	sp, r7
 8002114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002118:	4770      	bx	lr
 800211a:	bf00      	nop
 800211c:	20000634 	.word	0x20000634

08002120 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002120:	b580      	push	{r7, lr}
 8002122:	b084      	sub	sp, #16
 8002124:	af00      	add	r7, sp, #0
 8002126:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002128:	f7ff ffee 	bl	8002108 <HAL_GetTick>
 800212c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002138:	d005      	beq.n	8002146 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800213a:	4b0a      	ldr	r3, [pc, #40]	@ (8002164 <HAL_Delay+0x44>)
 800213c:	781b      	ldrb	r3, [r3, #0]
 800213e:	461a      	mov	r2, r3
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	4413      	add	r3, r2
 8002144:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002146:	bf00      	nop
 8002148:	f7ff ffde 	bl	8002108 <HAL_GetTick>
 800214c:	4602      	mov	r2, r0
 800214e:	68bb      	ldr	r3, [r7, #8]
 8002150:	1ad3      	subs	r3, r2, r3
 8002152:	68fa      	ldr	r2, [r7, #12]
 8002154:	429a      	cmp	r2, r3
 8002156:	d8f7      	bhi.n	8002148 <HAL_Delay+0x28>
  {
  }
}
 8002158:	bf00      	nop
 800215a:	bf00      	nop
 800215c:	3710      	adds	r7, #16
 800215e:	46bd      	mov	sp, r7
 8002160:	bd80      	pop	{r7, pc}
 8002162:	bf00      	nop
 8002164:	20000008 	.word	0x20000008

08002168 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002168:	b580      	push	{r7, lr}
 800216a:	b084      	sub	sp, #16
 800216c:	af00      	add	r7, sp, #0
 800216e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002170:	2300      	movs	r3, #0
 8002172:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	2b00      	cmp	r3, #0
 8002178:	d101      	bne.n	800217e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800217a:	2301      	movs	r3, #1
 800217c:	e033      	b.n	80021e6 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002182:	2b00      	cmp	r3, #0
 8002184:	d109      	bne.n	800219a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002186:	6878      	ldr	r0, [r7, #4]
 8002188:	f7ff fc94 	bl	8001ab4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	2200      	movs	r2, #0
 8002190:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	2200      	movs	r2, #0
 8002196:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800219e:	f003 0310 	and.w	r3, r3, #16
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d118      	bne.n	80021d8 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021aa:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80021ae:	f023 0302 	bic.w	r3, r3, #2
 80021b2:	f043 0202 	orr.w	r2, r3, #2
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 80021ba:	6878      	ldr	r0, [r7, #4]
 80021bc:	f000 fab4 	bl	8002728 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	2200      	movs	r2, #0
 80021c4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021ca:	f023 0303 	bic.w	r3, r3, #3
 80021ce:	f043 0201 	orr.w	r2, r3, #1
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	641a      	str	r2, [r3, #64]	@ 0x40
 80021d6:	e001      	b.n	80021dc <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80021d8:	2301      	movs	r3, #1
 80021da:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	2200      	movs	r2, #0
 80021e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 80021e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80021e6:	4618      	mov	r0, r3
 80021e8:	3710      	adds	r7, #16
 80021ea:	46bd      	mov	sp, r7
 80021ec:	bd80      	pop	{r7, pc}
	...

080021f0 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 80021f0:	b480      	push	{r7}
 80021f2:	b085      	sub	sp, #20
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 80021f8:	2300      	movs	r3, #0
 80021fa:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002202:	2b01      	cmp	r3, #1
 8002204:	d101      	bne.n	800220a <HAL_ADC_Start+0x1a>
 8002206:	2302      	movs	r3, #2
 8002208:	e0b2      	b.n	8002370 <HAL_ADC_Start+0x180>
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	2201      	movs	r2, #1
 800220e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	689b      	ldr	r3, [r3, #8]
 8002218:	f003 0301 	and.w	r3, r3, #1
 800221c:	2b01      	cmp	r3, #1
 800221e:	d018      	beq.n	8002252 <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	689a      	ldr	r2, [r3, #8]
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	f042 0201 	orr.w	r2, r2, #1
 800222e:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002230:	4b52      	ldr	r3, [pc, #328]	@ (800237c <HAL_ADC_Start+0x18c>)
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	4a52      	ldr	r2, [pc, #328]	@ (8002380 <HAL_ADC_Start+0x190>)
 8002236:	fba2 2303 	umull	r2, r3, r2, r3
 800223a:	0c9a      	lsrs	r2, r3, #18
 800223c:	4613      	mov	r3, r2
 800223e:	005b      	lsls	r3, r3, #1
 8002240:	4413      	add	r3, r2
 8002242:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8002244:	e002      	b.n	800224c <HAL_ADC_Start+0x5c>
    {
      counter--;
 8002246:	68bb      	ldr	r3, [r7, #8]
 8002248:	3b01      	subs	r3, #1
 800224a:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 800224c:	68bb      	ldr	r3, [r7, #8]
 800224e:	2b00      	cmp	r3, #0
 8002250:	d1f9      	bne.n	8002246 <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	689b      	ldr	r3, [r3, #8]
 8002258:	f003 0301 	and.w	r3, r3, #1
 800225c:	2b01      	cmp	r3, #1
 800225e:	d17a      	bne.n	8002356 <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002264:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8002268:	f023 0301 	bic.w	r3, r3, #1
 800226c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	685b      	ldr	r3, [r3, #4]
 800227a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800227e:	2b00      	cmp	r3, #0
 8002280:	d007      	beq.n	8002292 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002286:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800228a:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002296:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800229a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800229e:	d106      	bne.n	80022ae <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022a4:	f023 0206 	bic.w	r2, r3, #6
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	645a      	str	r2, [r3, #68]	@ 0x44
 80022ac:	e002      	b.n	80022b4 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	2200      	movs	r2, #0
 80022b2:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	2200      	movs	r2, #0
 80022b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80022bc:	4b31      	ldr	r3, [pc, #196]	@ (8002384 <HAL_ADC_Start+0x194>)
 80022be:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 80022c8:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	685b      	ldr	r3, [r3, #4]
 80022ce:	f003 031f 	and.w	r3, r3, #31
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d12a      	bne.n	800232c <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	4a2b      	ldr	r2, [pc, #172]	@ (8002388 <HAL_ADC_Start+0x198>)
 80022dc:	4293      	cmp	r3, r2
 80022de:	d015      	beq.n	800230c <HAL_ADC_Start+0x11c>
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	4a29      	ldr	r2, [pc, #164]	@ (800238c <HAL_ADC_Start+0x19c>)
 80022e6:	4293      	cmp	r3, r2
 80022e8:	d105      	bne.n	80022f6 <HAL_ADC_Start+0x106>
 80022ea:	4b26      	ldr	r3, [pc, #152]	@ (8002384 <HAL_ADC_Start+0x194>)
 80022ec:	685b      	ldr	r3, [r3, #4]
 80022ee:	f003 031f 	and.w	r3, r3, #31
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d00a      	beq.n	800230c <HAL_ADC_Start+0x11c>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	4a25      	ldr	r2, [pc, #148]	@ (8002390 <HAL_ADC_Start+0x1a0>)
 80022fc:	4293      	cmp	r3, r2
 80022fe:	d136      	bne.n	800236e <HAL_ADC_Start+0x17e>
 8002300:	4b20      	ldr	r3, [pc, #128]	@ (8002384 <HAL_ADC_Start+0x194>)
 8002302:	685b      	ldr	r3, [r3, #4]
 8002304:	f003 0310 	and.w	r3, r3, #16
 8002308:	2b00      	cmp	r3, #0
 800230a:	d130      	bne.n	800236e <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	689b      	ldr	r3, [r3, #8]
 8002312:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002316:	2b00      	cmp	r3, #0
 8002318:	d129      	bne.n	800236e <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	689a      	ldr	r2, [r3, #8]
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8002328:	609a      	str	r2, [r3, #8]
 800232a:	e020      	b.n	800236e <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	4a15      	ldr	r2, [pc, #84]	@ (8002388 <HAL_ADC_Start+0x198>)
 8002332:	4293      	cmp	r3, r2
 8002334:	d11b      	bne.n	800236e <HAL_ADC_Start+0x17e>
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	689b      	ldr	r3, [r3, #8]
 800233c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002340:	2b00      	cmp	r3, #0
 8002342:	d114      	bne.n	800236e <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	689a      	ldr	r2, [r3, #8]
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8002352:	609a      	str	r2, [r3, #8]
 8002354:	e00b      	b.n	800236e <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800235a:	f043 0210 	orr.w	r2, r3, #16
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002366:	f043 0201 	orr.w	r2, r3, #1
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 800236e:	2300      	movs	r3, #0
}
 8002370:	4618      	mov	r0, r3
 8002372:	3714      	adds	r7, #20
 8002374:	46bd      	mov	sp, r7
 8002376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237a:	4770      	bx	lr
 800237c:	20000000 	.word	0x20000000
 8002380:	431bde83 	.word	0x431bde83
 8002384:	40012300 	.word	0x40012300
 8002388:	40012000 	.word	0x40012000
 800238c:	40012100 	.word	0x40012100
 8002390:	40012200 	.word	0x40012200

08002394 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8002394:	b580      	push	{r7, lr}
 8002396:	b084      	sub	sp, #16
 8002398:	af00      	add	r7, sp, #0
 800239a:	6078      	str	r0, [r7, #4]
 800239c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800239e:	2300      	movs	r3, #0
 80023a0:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	689b      	ldr	r3, [r3, #8]
 80023a8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80023ac:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80023b0:	d113      	bne.n	80023da <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	689b      	ldr	r3, [r3, #8]
 80023b8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80023bc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80023c0:	d10b      	bne.n	80023da <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023c6:	f043 0220 	orr.w	r2, r3, #32
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	2200      	movs	r2, #0
 80023d2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80023d6:	2301      	movs	r3, #1
 80023d8:	e063      	b.n	80024a2 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 80023da:	f7ff fe95 	bl	8002108 <HAL_GetTick>
 80023de:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80023e0:	e021      	b.n	8002426 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 80023e2:	683b      	ldr	r3, [r7, #0]
 80023e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023e8:	d01d      	beq.n	8002426 <HAL_ADC_PollForConversion+0x92>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 80023ea:	683b      	ldr	r3, [r7, #0]
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d007      	beq.n	8002400 <HAL_ADC_PollForConversion+0x6c>
 80023f0:	f7ff fe8a 	bl	8002108 <HAL_GetTick>
 80023f4:	4602      	mov	r2, r0
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	1ad3      	subs	r3, r2, r3
 80023fa:	683a      	ldr	r2, [r7, #0]
 80023fc:	429a      	cmp	r2, r3
 80023fe:	d212      	bcs.n	8002426 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f003 0302 	and.w	r3, r3, #2
 800240a:	2b02      	cmp	r3, #2
 800240c:	d00b      	beq.n	8002426 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002412:	f043 0204 	orr.w	r2, r3, #4
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	2200      	movs	r2, #0
 800241e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_TIMEOUT;
 8002422:	2303      	movs	r3, #3
 8002424:	e03d      	b.n	80024a2 <HAL_ADC_PollForConversion+0x10e>
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	f003 0302 	and.w	r3, r3, #2
 8002430:	2b02      	cmp	r3, #2
 8002432:	d1d6      	bne.n	80023e2 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	f06f 0212 	mvn.w	r2, #18
 800243c:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002442:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	689b      	ldr	r3, [r3, #8]
 8002450:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002454:	2b00      	cmp	r3, #0
 8002456:	d123      	bne.n	80024a0 <HAL_ADC_PollForConversion+0x10c>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	7e1b      	ldrb	r3, [r3, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800245c:	2b00      	cmp	r3, #0
 800245e:	d11f      	bne.n	80024a0 <HAL_ADC_PollForConversion+0x10c>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002466:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800246a:	2b00      	cmp	r3, #0
 800246c:	d006      	beq.n	800247c <HAL_ADC_PollForConversion+0xe8>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	689b      	ldr	r3, [r3, #8]
 8002474:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002478:	2b00      	cmp	r3, #0
 800247a:	d111      	bne.n	80024a0 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002480:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	641a      	str	r2, [r3, #64]	@ 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800248c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002490:	2b00      	cmp	r3, #0
 8002492:	d105      	bne.n	80024a0 <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002498:	f043 0201 	orr.w	r2, r3, #1
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 80024a0:	2300      	movs	r3, #0
}
 80024a2:	4618      	mov	r0, r3
 80024a4:	3710      	adds	r7, #16
 80024a6:	46bd      	mov	sp, r7
 80024a8:	bd80      	pop	{r7, pc}

080024aa <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 80024aa:	b480      	push	{r7}
 80024ac:	b083      	sub	sp, #12
 80024ae:	af00      	add	r7, sp, #0
 80024b0:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 80024b8:	4618      	mov	r0, r3
 80024ba:	370c      	adds	r7, #12
 80024bc:	46bd      	mov	sp, r7
 80024be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c2:	4770      	bx	lr

080024c4 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80024c4:	b480      	push	{r7}
 80024c6:	b085      	sub	sp, #20
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	6078      	str	r0, [r7, #4]
 80024cc:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80024ce:	2300      	movs	r3, #0
 80024d0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80024d8:	2b01      	cmp	r3, #1
 80024da:	d101      	bne.n	80024e0 <HAL_ADC_ConfigChannel+0x1c>
 80024dc:	2302      	movs	r3, #2
 80024de:	e113      	b.n	8002708 <HAL_ADC_ConfigChannel+0x244>
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	2201      	movs	r2, #1
 80024e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80024e8:	683b      	ldr	r3, [r7, #0]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	2b09      	cmp	r3, #9
 80024ee:	d925      	bls.n	800253c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	68d9      	ldr	r1, [r3, #12]
 80024f6:	683b      	ldr	r3, [r7, #0]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	b29b      	uxth	r3, r3
 80024fc:	461a      	mov	r2, r3
 80024fe:	4613      	mov	r3, r2
 8002500:	005b      	lsls	r3, r3, #1
 8002502:	4413      	add	r3, r2
 8002504:	3b1e      	subs	r3, #30
 8002506:	2207      	movs	r2, #7
 8002508:	fa02 f303 	lsl.w	r3, r2, r3
 800250c:	43da      	mvns	r2, r3
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	400a      	ands	r2, r1
 8002514:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	68d9      	ldr	r1, [r3, #12]
 800251c:	683b      	ldr	r3, [r7, #0]
 800251e:	689a      	ldr	r2, [r3, #8]
 8002520:	683b      	ldr	r3, [r7, #0]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	b29b      	uxth	r3, r3
 8002526:	4618      	mov	r0, r3
 8002528:	4603      	mov	r3, r0
 800252a:	005b      	lsls	r3, r3, #1
 800252c:	4403      	add	r3, r0
 800252e:	3b1e      	subs	r3, #30
 8002530:	409a      	lsls	r2, r3
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	430a      	orrs	r2, r1
 8002538:	60da      	str	r2, [r3, #12]
 800253a:	e022      	b.n	8002582 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	6919      	ldr	r1, [r3, #16]
 8002542:	683b      	ldr	r3, [r7, #0]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	b29b      	uxth	r3, r3
 8002548:	461a      	mov	r2, r3
 800254a:	4613      	mov	r3, r2
 800254c:	005b      	lsls	r3, r3, #1
 800254e:	4413      	add	r3, r2
 8002550:	2207      	movs	r2, #7
 8002552:	fa02 f303 	lsl.w	r3, r2, r3
 8002556:	43da      	mvns	r2, r3
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	400a      	ands	r2, r1
 800255e:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	6919      	ldr	r1, [r3, #16]
 8002566:	683b      	ldr	r3, [r7, #0]
 8002568:	689a      	ldr	r2, [r3, #8]
 800256a:	683b      	ldr	r3, [r7, #0]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	b29b      	uxth	r3, r3
 8002570:	4618      	mov	r0, r3
 8002572:	4603      	mov	r3, r0
 8002574:	005b      	lsls	r3, r3, #1
 8002576:	4403      	add	r3, r0
 8002578:	409a      	lsls	r2, r3
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	430a      	orrs	r2, r1
 8002580:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002582:	683b      	ldr	r3, [r7, #0]
 8002584:	685b      	ldr	r3, [r3, #4]
 8002586:	2b06      	cmp	r3, #6
 8002588:	d824      	bhi.n	80025d4 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002590:	683b      	ldr	r3, [r7, #0]
 8002592:	685a      	ldr	r2, [r3, #4]
 8002594:	4613      	mov	r3, r2
 8002596:	009b      	lsls	r3, r3, #2
 8002598:	4413      	add	r3, r2
 800259a:	3b05      	subs	r3, #5
 800259c:	221f      	movs	r2, #31
 800259e:	fa02 f303 	lsl.w	r3, r2, r3
 80025a2:	43da      	mvns	r2, r3
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	400a      	ands	r2, r1
 80025aa:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80025b2:	683b      	ldr	r3, [r7, #0]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	b29b      	uxth	r3, r3
 80025b8:	4618      	mov	r0, r3
 80025ba:	683b      	ldr	r3, [r7, #0]
 80025bc:	685a      	ldr	r2, [r3, #4]
 80025be:	4613      	mov	r3, r2
 80025c0:	009b      	lsls	r3, r3, #2
 80025c2:	4413      	add	r3, r2
 80025c4:	3b05      	subs	r3, #5
 80025c6:	fa00 f203 	lsl.w	r2, r0, r3
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	430a      	orrs	r2, r1
 80025d0:	635a      	str	r2, [r3, #52]	@ 0x34
 80025d2:	e04c      	b.n	800266e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80025d4:	683b      	ldr	r3, [r7, #0]
 80025d6:	685b      	ldr	r3, [r3, #4]
 80025d8:	2b0c      	cmp	r3, #12
 80025da:	d824      	bhi.n	8002626 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80025e2:	683b      	ldr	r3, [r7, #0]
 80025e4:	685a      	ldr	r2, [r3, #4]
 80025e6:	4613      	mov	r3, r2
 80025e8:	009b      	lsls	r3, r3, #2
 80025ea:	4413      	add	r3, r2
 80025ec:	3b23      	subs	r3, #35	@ 0x23
 80025ee:	221f      	movs	r2, #31
 80025f0:	fa02 f303 	lsl.w	r3, r2, r3
 80025f4:	43da      	mvns	r2, r3
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	400a      	ands	r2, r1
 80025fc:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002604:	683b      	ldr	r3, [r7, #0]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	b29b      	uxth	r3, r3
 800260a:	4618      	mov	r0, r3
 800260c:	683b      	ldr	r3, [r7, #0]
 800260e:	685a      	ldr	r2, [r3, #4]
 8002610:	4613      	mov	r3, r2
 8002612:	009b      	lsls	r3, r3, #2
 8002614:	4413      	add	r3, r2
 8002616:	3b23      	subs	r3, #35	@ 0x23
 8002618:	fa00 f203 	lsl.w	r2, r0, r3
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	430a      	orrs	r2, r1
 8002622:	631a      	str	r2, [r3, #48]	@ 0x30
 8002624:	e023      	b.n	800266e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800262c:	683b      	ldr	r3, [r7, #0]
 800262e:	685a      	ldr	r2, [r3, #4]
 8002630:	4613      	mov	r3, r2
 8002632:	009b      	lsls	r3, r3, #2
 8002634:	4413      	add	r3, r2
 8002636:	3b41      	subs	r3, #65	@ 0x41
 8002638:	221f      	movs	r2, #31
 800263a:	fa02 f303 	lsl.w	r3, r2, r3
 800263e:	43da      	mvns	r2, r3
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	400a      	ands	r2, r1
 8002646:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800264e:	683b      	ldr	r3, [r7, #0]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	b29b      	uxth	r3, r3
 8002654:	4618      	mov	r0, r3
 8002656:	683b      	ldr	r3, [r7, #0]
 8002658:	685a      	ldr	r2, [r3, #4]
 800265a:	4613      	mov	r3, r2
 800265c:	009b      	lsls	r3, r3, #2
 800265e:	4413      	add	r3, r2
 8002660:	3b41      	subs	r3, #65	@ 0x41
 8002662:	fa00 f203 	lsl.w	r2, r0, r3
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	430a      	orrs	r2, r1
 800266c:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800266e:	4b29      	ldr	r3, [pc, #164]	@ (8002714 <HAL_ADC_ConfigChannel+0x250>)
 8002670:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	4a28      	ldr	r2, [pc, #160]	@ (8002718 <HAL_ADC_ConfigChannel+0x254>)
 8002678:	4293      	cmp	r3, r2
 800267a:	d10f      	bne.n	800269c <HAL_ADC_ConfigChannel+0x1d8>
 800267c:	683b      	ldr	r3, [r7, #0]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	2b12      	cmp	r3, #18
 8002682:	d10b      	bne.n	800269c <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	685b      	ldr	r3, [r3, #4]
 8002688:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	685b      	ldr	r3, [r3, #4]
 8002694:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	4a1d      	ldr	r2, [pc, #116]	@ (8002718 <HAL_ADC_ConfigChannel+0x254>)
 80026a2:	4293      	cmp	r3, r2
 80026a4:	d12b      	bne.n	80026fe <HAL_ADC_ConfigChannel+0x23a>
 80026a6:	683b      	ldr	r3, [r7, #0]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	4a1c      	ldr	r2, [pc, #112]	@ (800271c <HAL_ADC_ConfigChannel+0x258>)
 80026ac:	4293      	cmp	r3, r2
 80026ae:	d003      	beq.n	80026b8 <HAL_ADC_ConfigChannel+0x1f4>
 80026b0:	683b      	ldr	r3, [r7, #0]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	2b11      	cmp	r3, #17
 80026b6:	d122      	bne.n	80026fe <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	685b      	ldr	r3, [r3, #4]
 80026bc:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	685b      	ldr	r3, [r3, #4]
 80026c8:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80026d0:	683b      	ldr	r3, [r7, #0]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	4a11      	ldr	r2, [pc, #68]	@ (800271c <HAL_ADC_ConfigChannel+0x258>)
 80026d6:	4293      	cmp	r3, r2
 80026d8:	d111      	bne.n	80026fe <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80026da:	4b11      	ldr	r3, [pc, #68]	@ (8002720 <HAL_ADC_ConfigChannel+0x25c>)
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	4a11      	ldr	r2, [pc, #68]	@ (8002724 <HAL_ADC_ConfigChannel+0x260>)
 80026e0:	fba2 2303 	umull	r2, r3, r2, r3
 80026e4:	0c9a      	lsrs	r2, r3, #18
 80026e6:	4613      	mov	r3, r2
 80026e8:	009b      	lsls	r3, r3, #2
 80026ea:	4413      	add	r3, r2
 80026ec:	005b      	lsls	r3, r3, #1
 80026ee:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80026f0:	e002      	b.n	80026f8 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80026f2:	68bb      	ldr	r3, [r7, #8]
 80026f4:	3b01      	subs	r3, #1
 80026f6:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80026f8:	68bb      	ldr	r3, [r7, #8]
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d1f9      	bne.n	80026f2 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	2200      	movs	r2, #0
 8002702:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8002706:	2300      	movs	r3, #0
}
 8002708:	4618      	mov	r0, r3
 800270a:	3714      	adds	r7, #20
 800270c:	46bd      	mov	sp, r7
 800270e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002712:	4770      	bx	lr
 8002714:	40012300 	.word	0x40012300
 8002718:	40012000 	.word	0x40012000
 800271c:	10000012 	.word	0x10000012
 8002720:	20000000 	.word	0x20000000
 8002724:	431bde83 	.word	0x431bde83

08002728 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002728:	b480      	push	{r7}
 800272a:	b085      	sub	sp, #20
 800272c:	af00      	add	r7, sp, #0
 800272e:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002730:	4b79      	ldr	r3, [pc, #484]	@ (8002918 <ADC_Init+0x1f0>)
 8002732:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	685b      	ldr	r3, [r3, #4]
 8002738:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	685a      	ldr	r2, [r3, #4]
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	685b      	ldr	r3, [r3, #4]
 8002748:	431a      	orrs	r2, r3
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	685a      	ldr	r2, [r3, #4]
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800275c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	6859      	ldr	r1, [r3, #4]
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	691b      	ldr	r3, [r3, #16]
 8002768:	021a      	lsls	r2, r3, #8
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	430a      	orrs	r2, r1
 8002770:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	685a      	ldr	r2, [r3, #4]
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8002780:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	6859      	ldr	r1, [r3, #4]
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	689a      	ldr	r2, [r3, #8]
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	430a      	orrs	r2, r1
 8002792:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	689a      	ldr	r2, [r3, #8]
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80027a2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	6899      	ldr	r1, [r3, #8]
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	68da      	ldr	r2, [r3, #12]
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	430a      	orrs	r2, r1
 80027b4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027ba:	4a58      	ldr	r2, [pc, #352]	@ (800291c <ADC_Init+0x1f4>)
 80027bc:	4293      	cmp	r3, r2
 80027be:	d022      	beq.n	8002806 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	689a      	ldr	r2, [r3, #8]
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80027ce:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	6899      	ldr	r1, [r3, #8]
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	430a      	orrs	r2, r1
 80027e0:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	689a      	ldr	r2, [r3, #8]
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80027f0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	6899      	ldr	r1, [r3, #8]
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	430a      	orrs	r2, r1
 8002802:	609a      	str	r2, [r3, #8]
 8002804:	e00f      	b.n	8002826 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	689a      	ldr	r2, [r3, #8]
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002814:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	689a      	ldr	r2, [r3, #8]
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002824:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	689a      	ldr	r2, [r3, #8]
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f022 0202 	bic.w	r2, r2, #2
 8002834:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	6899      	ldr	r1, [r3, #8]
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	7e1b      	ldrb	r3, [r3, #24]
 8002840:	005a      	lsls	r2, r3, #1
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	430a      	orrs	r2, r1
 8002848:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002850:	2b00      	cmp	r3, #0
 8002852:	d01b      	beq.n	800288c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	685a      	ldr	r2, [r3, #4]
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002862:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	685a      	ldr	r2, [r3, #4]
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8002872:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	6859      	ldr	r1, [r3, #4]
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800287e:	3b01      	subs	r3, #1
 8002880:	035a      	lsls	r2, r3, #13
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	430a      	orrs	r2, r1
 8002888:	605a      	str	r2, [r3, #4]
 800288a:	e007      	b.n	800289c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	685a      	ldr	r2, [r3, #4]
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800289a:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 80028aa:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	69db      	ldr	r3, [r3, #28]
 80028b6:	3b01      	subs	r3, #1
 80028b8:	051a      	lsls	r2, r3, #20
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	430a      	orrs	r2, r1
 80028c0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	689a      	ldr	r2, [r3, #8]
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80028d0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	6899      	ldr	r1, [r3, #8]
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80028de:	025a      	lsls	r2, r3, #9
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	430a      	orrs	r2, r1
 80028e6:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	689a      	ldr	r2, [r3, #8]
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80028f6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	6899      	ldr	r1, [r3, #8]
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	695b      	ldr	r3, [r3, #20]
 8002902:	029a      	lsls	r2, r3, #10
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	430a      	orrs	r2, r1
 800290a:	609a      	str	r2, [r3, #8]
}
 800290c:	bf00      	nop
 800290e:	3714      	adds	r7, #20
 8002910:	46bd      	mov	sp, r7
 8002912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002916:	4770      	bx	lr
 8002918:	40012300 	.word	0x40012300
 800291c:	0f000001 	.word	0x0f000001

08002920 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002920:	b480      	push	{r7}
 8002922:	b085      	sub	sp, #20
 8002924:	af00      	add	r7, sp, #0
 8002926:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	f003 0307 	and.w	r3, r3, #7
 800292e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002930:	4b0c      	ldr	r3, [pc, #48]	@ (8002964 <__NVIC_SetPriorityGrouping+0x44>)
 8002932:	68db      	ldr	r3, [r3, #12]
 8002934:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002936:	68ba      	ldr	r2, [r7, #8]
 8002938:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800293c:	4013      	ands	r3, r2
 800293e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002944:	68bb      	ldr	r3, [r7, #8]
 8002946:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002948:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800294c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002950:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002952:	4a04      	ldr	r2, [pc, #16]	@ (8002964 <__NVIC_SetPriorityGrouping+0x44>)
 8002954:	68bb      	ldr	r3, [r7, #8]
 8002956:	60d3      	str	r3, [r2, #12]
}
 8002958:	bf00      	nop
 800295a:	3714      	adds	r7, #20
 800295c:	46bd      	mov	sp, r7
 800295e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002962:	4770      	bx	lr
 8002964:	e000ed00 	.word	0xe000ed00

08002968 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002968:	b480      	push	{r7}
 800296a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800296c:	4b04      	ldr	r3, [pc, #16]	@ (8002980 <__NVIC_GetPriorityGrouping+0x18>)
 800296e:	68db      	ldr	r3, [r3, #12]
 8002970:	0a1b      	lsrs	r3, r3, #8
 8002972:	f003 0307 	and.w	r3, r3, #7
}
 8002976:	4618      	mov	r0, r3
 8002978:	46bd      	mov	sp, r7
 800297a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800297e:	4770      	bx	lr
 8002980:	e000ed00 	.word	0xe000ed00

08002984 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002984:	b480      	push	{r7}
 8002986:	b083      	sub	sp, #12
 8002988:	af00      	add	r7, sp, #0
 800298a:	4603      	mov	r3, r0
 800298c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800298e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002992:	2b00      	cmp	r3, #0
 8002994:	db0b      	blt.n	80029ae <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002996:	79fb      	ldrb	r3, [r7, #7]
 8002998:	f003 021f 	and.w	r2, r3, #31
 800299c:	4907      	ldr	r1, [pc, #28]	@ (80029bc <__NVIC_EnableIRQ+0x38>)
 800299e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029a2:	095b      	lsrs	r3, r3, #5
 80029a4:	2001      	movs	r0, #1
 80029a6:	fa00 f202 	lsl.w	r2, r0, r2
 80029aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80029ae:	bf00      	nop
 80029b0:	370c      	adds	r7, #12
 80029b2:	46bd      	mov	sp, r7
 80029b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b8:	4770      	bx	lr
 80029ba:	bf00      	nop
 80029bc:	e000e100 	.word	0xe000e100

080029c0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80029c0:	b480      	push	{r7}
 80029c2:	b083      	sub	sp, #12
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	4603      	mov	r3, r0
 80029c8:	6039      	str	r1, [r7, #0]
 80029ca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80029cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	db0a      	blt.n	80029ea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80029d4:	683b      	ldr	r3, [r7, #0]
 80029d6:	b2da      	uxtb	r2, r3
 80029d8:	490c      	ldr	r1, [pc, #48]	@ (8002a0c <__NVIC_SetPriority+0x4c>)
 80029da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029de:	0112      	lsls	r2, r2, #4
 80029e0:	b2d2      	uxtb	r2, r2
 80029e2:	440b      	add	r3, r1
 80029e4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80029e8:	e00a      	b.n	8002a00 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80029ea:	683b      	ldr	r3, [r7, #0]
 80029ec:	b2da      	uxtb	r2, r3
 80029ee:	4908      	ldr	r1, [pc, #32]	@ (8002a10 <__NVIC_SetPriority+0x50>)
 80029f0:	79fb      	ldrb	r3, [r7, #7]
 80029f2:	f003 030f 	and.w	r3, r3, #15
 80029f6:	3b04      	subs	r3, #4
 80029f8:	0112      	lsls	r2, r2, #4
 80029fa:	b2d2      	uxtb	r2, r2
 80029fc:	440b      	add	r3, r1
 80029fe:	761a      	strb	r2, [r3, #24]
}
 8002a00:	bf00      	nop
 8002a02:	370c      	adds	r7, #12
 8002a04:	46bd      	mov	sp, r7
 8002a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a0a:	4770      	bx	lr
 8002a0c:	e000e100 	.word	0xe000e100
 8002a10:	e000ed00 	.word	0xe000ed00

08002a14 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002a14:	b480      	push	{r7}
 8002a16:	b089      	sub	sp, #36	@ 0x24
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	60f8      	str	r0, [r7, #12]
 8002a1c:	60b9      	str	r1, [r7, #8]
 8002a1e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	f003 0307 	and.w	r3, r3, #7
 8002a26:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002a28:	69fb      	ldr	r3, [r7, #28]
 8002a2a:	f1c3 0307 	rsb	r3, r3, #7
 8002a2e:	2b04      	cmp	r3, #4
 8002a30:	bf28      	it	cs
 8002a32:	2304      	movcs	r3, #4
 8002a34:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002a36:	69fb      	ldr	r3, [r7, #28]
 8002a38:	3304      	adds	r3, #4
 8002a3a:	2b06      	cmp	r3, #6
 8002a3c:	d902      	bls.n	8002a44 <NVIC_EncodePriority+0x30>
 8002a3e:	69fb      	ldr	r3, [r7, #28]
 8002a40:	3b03      	subs	r3, #3
 8002a42:	e000      	b.n	8002a46 <NVIC_EncodePriority+0x32>
 8002a44:	2300      	movs	r3, #0
 8002a46:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a48:	f04f 32ff 	mov.w	r2, #4294967295
 8002a4c:	69bb      	ldr	r3, [r7, #24]
 8002a4e:	fa02 f303 	lsl.w	r3, r2, r3
 8002a52:	43da      	mvns	r2, r3
 8002a54:	68bb      	ldr	r3, [r7, #8]
 8002a56:	401a      	ands	r2, r3
 8002a58:	697b      	ldr	r3, [r7, #20]
 8002a5a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002a5c:	f04f 31ff 	mov.w	r1, #4294967295
 8002a60:	697b      	ldr	r3, [r7, #20]
 8002a62:	fa01 f303 	lsl.w	r3, r1, r3
 8002a66:	43d9      	mvns	r1, r3
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a6c:	4313      	orrs	r3, r2
         );
}
 8002a6e:	4618      	mov	r0, r3
 8002a70:	3724      	adds	r7, #36	@ 0x24
 8002a72:	46bd      	mov	sp, r7
 8002a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a78:	4770      	bx	lr

08002a7a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a7a:	b580      	push	{r7, lr}
 8002a7c:	b082      	sub	sp, #8
 8002a7e:	af00      	add	r7, sp, #0
 8002a80:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002a82:	6878      	ldr	r0, [r7, #4]
 8002a84:	f7ff ff4c 	bl	8002920 <__NVIC_SetPriorityGrouping>
}
 8002a88:	bf00      	nop
 8002a8a:	3708      	adds	r7, #8
 8002a8c:	46bd      	mov	sp, r7
 8002a8e:	bd80      	pop	{r7, pc}

08002a90 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002a90:	b580      	push	{r7, lr}
 8002a92:	b086      	sub	sp, #24
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	4603      	mov	r3, r0
 8002a98:	60b9      	str	r1, [r7, #8]
 8002a9a:	607a      	str	r2, [r7, #4]
 8002a9c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002a9e:	2300      	movs	r3, #0
 8002aa0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002aa2:	f7ff ff61 	bl	8002968 <__NVIC_GetPriorityGrouping>
 8002aa6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002aa8:	687a      	ldr	r2, [r7, #4]
 8002aaa:	68b9      	ldr	r1, [r7, #8]
 8002aac:	6978      	ldr	r0, [r7, #20]
 8002aae:	f7ff ffb1 	bl	8002a14 <NVIC_EncodePriority>
 8002ab2:	4602      	mov	r2, r0
 8002ab4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002ab8:	4611      	mov	r1, r2
 8002aba:	4618      	mov	r0, r3
 8002abc:	f7ff ff80 	bl	80029c0 <__NVIC_SetPriority>
}
 8002ac0:	bf00      	nop
 8002ac2:	3718      	adds	r7, #24
 8002ac4:	46bd      	mov	sp, r7
 8002ac6:	bd80      	pop	{r7, pc}

08002ac8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ac8:	b580      	push	{r7, lr}
 8002aca:	b082      	sub	sp, #8
 8002acc:	af00      	add	r7, sp, #0
 8002ace:	4603      	mov	r3, r0
 8002ad0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002ad2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ad6:	4618      	mov	r0, r3
 8002ad8:	f7ff ff54 	bl	8002984 <__NVIC_EnableIRQ>
}
 8002adc:	bf00      	nop
 8002ade:	3708      	adds	r7, #8
 8002ae0:	46bd      	mov	sp, r7
 8002ae2:	bd80      	pop	{r7, pc}

08002ae4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002ae4:	b480      	push	{r7}
 8002ae6:	b089      	sub	sp, #36	@ 0x24
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	6078      	str	r0, [r7, #4]
 8002aec:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002aee:	2300      	movs	r3, #0
 8002af0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002af2:	2300      	movs	r3, #0
 8002af4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002af6:	2300      	movs	r3, #0
 8002af8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002afa:	2300      	movs	r3, #0
 8002afc:	61fb      	str	r3, [r7, #28]
 8002afe:	e165      	b.n	8002dcc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002b00:	2201      	movs	r2, #1
 8002b02:	69fb      	ldr	r3, [r7, #28]
 8002b04:	fa02 f303 	lsl.w	r3, r2, r3
 8002b08:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002b0a:	683b      	ldr	r3, [r7, #0]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	697a      	ldr	r2, [r7, #20]
 8002b10:	4013      	ands	r3, r2
 8002b12:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002b14:	693a      	ldr	r2, [r7, #16]
 8002b16:	697b      	ldr	r3, [r7, #20]
 8002b18:	429a      	cmp	r2, r3
 8002b1a:	f040 8154 	bne.w	8002dc6 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002b1e:	683b      	ldr	r3, [r7, #0]
 8002b20:	685b      	ldr	r3, [r3, #4]
 8002b22:	f003 0303 	and.w	r3, r3, #3
 8002b26:	2b01      	cmp	r3, #1
 8002b28:	d005      	beq.n	8002b36 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002b2a:	683b      	ldr	r3, [r7, #0]
 8002b2c:	685b      	ldr	r3, [r3, #4]
 8002b2e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002b32:	2b02      	cmp	r3, #2
 8002b34:	d130      	bne.n	8002b98 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	689b      	ldr	r3, [r3, #8]
 8002b3a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002b3c:	69fb      	ldr	r3, [r7, #28]
 8002b3e:	005b      	lsls	r3, r3, #1
 8002b40:	2203      	movs	r2, #3
 8002b42:	fa02 f303 	lsl.w	r3, r2, r3
 8002b46:	43db      	mvns	r3, r3
 8002b48:	69ba      	ldr	r2, [r7, #24]
 8002b4a:	4013      	ands	r3, r2
 8002b4c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002b4e:	683b      	ldr	r3, [r7, #0]
 8002b50:	68da      	ldr	r2, [r3, #12]
 8002b52:	69fb      	ldr	r3, [r7, #28]
 8002b54:	005b      	lsls	r3, r3, #1
 8002b56:	fa02 f303 	lsl.w	r3, r2, r3
 8002b5a:	69ba      	ldr	r2, [r7, #24]
 8002b5c:	4313      	orrs	r3, r2
 8002b5e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	69ba      	ldr	r2, [r7, #24]
 8002b64:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	685b      	ldr	r3, [r3, #4]
 8002b6a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002b6c:	2201      	movs	r2, #1
 8002b6e:	69fb      	ldr	r3, [r7, #28]
 8002b70:	fa02 f303 	lsl.w	r3, r2, r3
 8002b74:	43db      	mvns	r3, r3
 8002b76:	69ba      	ldr	r2, [r7, #24]
 8002b78:	4013      	ands	r3, r2
 8002b7a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002b7c:	683b      	ldr	r3, [r7, #0]
 8002b7e:	685b      	ldr	r3, [r3, #4]
 8002b80:	091b      	lsrs	r3, r3, #4
 8002b82:	f003 0201 	and.w	r2, r3, #1
 8002b86:	69fb      	ldr	r3, [r7, #28]
 8002b88:	fa02 f303 	lsl.w	r3, r2, r3
 8002b8c:	69ba      	ldr	r2, [r7, #24]
 8002b8e:	4313      	orrs	r3, r2
 8002b90:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	69ba      	ldr	r2, [r7, #24]
 8002b96:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002b98:	683b      	ldr	r3, [r7, #0]
 8002b9a:	685b      	ldr	r3, [r3, #4]
 8002b9c:	f003 0303 	and.w	r3, r3, #3
 8002ba0:	2b03      	cmp	r3, #3
 8002ba2:	d017      	beq.n	8002bd4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	68db      	ldr	r3, [r3, #12]
 8002ba8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002baa:	69fb      	ldr	r3, [r7, #28]
 8002bac:	005b      	lsls	r3, r3, #1
 8002bae:	2203      	movs	r2, #3
 8002bb0:	fa02 f303 	lsl.w	r3, r2, r3
 8002bb4:	43db      	mvns	r3, r3
 8002bb6:	69ba      	ldr	r2, [r7, #24]
 8002bb8:	4013      	ands	r3, r2
 8002bba:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002bbc:	683b      	ldr	r3, [r7, #0]
 8002bbe:	689a      	ldr	r2, [r3, #8]
 8002bc0:	69fb      	ldr	r3, [r7, #28]
 8002bc2:	005b      	lsls	r3, r3, #1
 8002bc4:	fa02 f303 	lsl.w	r3, r2, r3
 8002bc8:	69ba      	ldr	r2, [r7, #24]
 8002bca:	4313      	orrs	r3, r2
 8002bcc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	69ba      	ldr	r2, [r7, #24]
 8002bd2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002bd4:	683b      	ldr	r3, [r7, #0]
 8002bd6:	685b      	ldr	r3, [r3, #4]
 8002bd8:	f003 0303 	and.w	r3, r3, #3
 8002bdc:	2b02      	cmp	r3, #2
 8002bde:	d123      	bne.n	8002c28 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002be0:	69fb      	ldr	r3, [r7, #28]
 8002be2:	08da      	lsrs	r2, r3, #3
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	3208      	adds	r2, #8
 8002be8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002bec:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002bee:	69fb      	ldr	r3, [r7, #28]
 8002bf0:	f003 0307 	and.w	r3, r3, #7
 8002bf4:	009b      	lsls	r3, r3, #2
 8002bf6:	220f      	movs	r2, #15
 8002bf8:	fa02 f303 	lsl.w	r3, r2, r3
 8002bfc:	43db      	mvns	r3, r3
 8002bfe:	69ba      	ldr	r2, [r7, #24]
 8002c00:	4013      	ands	r3, r2
 8002c02:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002c04:	683b      	ldr	r3, [r7, #0]
 8002c06:	691a      	ldr	r2, [r3, #16]
 8002c08:	69fb      	ldr	r3, [r7, #28]
 8002c0a:	f003 0307 	and.w	r3, r3, #7
 8002c0e:	009b      	lsls	r3, r3, #2
 8002c10:	fa02 f303 	lsl.w	r3, r2, r3
 8002c14:	69ba      	ldr	r2, [r7, #24]
 8002c16:	4313      	orrs	r3, r2
 8002c18:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002c1a:	69fb      	ldr	r3, [r7, #28]
 8002c1c:	08da      	lsrs	r2, r3, #3
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	3208      	adds	r2, #8
 8002c22:	69b9      	ldr	r1, [r7, #24]
 8002c24:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002c2e:	69fb      	ldr	r3, [r7, #28]
 8002c30:	005b      	lsls	r3, r3, #1
 8002c32:	2203      	movs	r2, #3
 8002c34:	fa02 f303 	lsl.w	r3, r2, r3
 8002c38:	43db      	mvns	r3, r3
 8002c3a:	69ba      	ldr	r2, [r7, #24]
 8002c3c:	4013      	ands	r3, r2
 8002c3e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002c40:	683b      	ldr	r3, [r7, #0]
 8002c42:	685b      	ldr	r3, [r3, #4]
 8002c44:	f003 0203 	and.w	r2, r3, #3
 8002c48:	69fb      	ldr	r3, [r7, #28]
 8002c4a:	005b      	lsls	r3, r3, #1
 8002c4c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c50:	69ba      	ldr	r2, [r7, #24]
 8002c52:	4313      	orrs	r3, r2
 8002c54:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	69ba      	ldr	r2, [r7, #24]
 8002c5a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002c5c:	683b      	ldr	r3, [r7, #0]
 8002c5e:	685b      	ldr	r3, [r3, #4]
 8002c60:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	f000 80ae 	beq.w	8002dc6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c6a:	2300      	movs	r3, #0
 8002c6c:	60fb      	str	r3, [r7, #12]
 8002c6e:	4b5d      	ldr	r3, [pc, #372]	@ (8002de4 <HAL_GPIO_Init+0x300>)
 8002c70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c72:	4a5c      	ldr	r2, [pc, #368]	@ (8002de4 <HAL_GPIO_Init+0x300>)
 8002c74:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002c78:	6453      	str	r3, [r2, #68]	@ 0x44
 8002c7a:	4b5a      	ldr	r3, [pc, #360]	@ (8002de4 <HAL_GPIO_Init+0x300>)
 8002c7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c7e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002c82:	60fb      	str	r3, [r7, #12]
 8002c84:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002c86:	4a58      	ldr	r2, [pc, #352]	@ (8002de8 <HAL_GPIO_Init+0x304>)
 8002c88:	69fb      	ldr	r3, [r7, #28]
 8002c8a:	089b      	lsrs	r3, r3, #2
 8002c8c:	3302      	adds	r3, #2
 8002c8e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c92:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002c94:	69fb      	ldr	r3, [r7, #28]
 8002c96:	f003 0303 	and.w	r3, r3, #3
 8002c9a:	009b      	lsls	r3, r3, #2
 8002c9c:	220f      	movs	r2, #15
 8002c9e:	fa02 f303 	lsl.w	r3, r2, r3
 8002ca2:	43db      	mvns	r3, r3
 8002ca4:	69ba      	ldr	r2, [r7, #24]
 8002ca6:	4013      	ands	r3, r2
 8002ca8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	4a4f      	ldr	r2, [pc, #316]	@ (8002dec <HAL_GPIO_Init+0x308>)
 8002cae:	4293      	cmp	r3, r2
 8002cb0:	d025      	beq.n	8002cfe <HAL_GPIO_Init+0x21a>
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	4a4e      	ldr	r2, [pc, #312]	@ (8002df0 <HAL_GPIO_Init+0x30c>)
 8002cb6:	4293      	cmp	r3, r2
 8002cb8:	d01f      	beq.n	8002cfa <HAL_GPIO_Init+0x216>
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	4a4d      	ldr	r2, [pc, #308]	@ (8002df4 <HAL_GPIO_Init+0x310>)
 8002cbe:	4293      	cmp	r3, r2
 8002cc0:	d019      	beq.n	8002cf6 <HAL_GPIO_Init+0x212>
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	4a4c      	ldr	r2, [pc, #304]	@ (8002df8 <HAL_GPIO_Init+0x314>)
 8002cc6:	4293      	cmp	r3, r2
 8002cc8:	d013      	beq.n	8002cf2 <HAL_GPIO_Init+0x20e>
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	4a4b      	ldr	r2, [pc, #300]	@ (8002dfc <HAL_GPIO_Init+0x318>)
 8002cce:	4293      	cmp	r3, r2
 8002cd0:	d00d      	beq.n	8002cee <HAL_GPIO_Init+0x20a>
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	4a4a      	ldr	r2, [pc, #296]	@ (8002e00 <HAL_GPIO_Init+0x31c>)
 8002cd6:	4293      	cmp	r3, r2
 8002cd8:	d007      	beq.n	8002cea <HAL_GPIO_Init+0x206>
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	4a49      	ldr	r2, [pc, #292]	@ (8002e04 <HAL_GPIO_Init+0x320>)
 8002cde:	4293      	cmp	r3, r2
 8002ce0:	d101      	bne.n	8002ce6 <HAL_GPIO_Init+0x202>
 8002ce2:	2306      	movs	r3, #6
 8002ce4:	e00c      	b.n	8002d00 <HAL_GPIO_Init+0x21c>
 8002ce6:	2307      	movs	r3, #7
 8002ce8:	e00a      	b.n	8002d00 <HAL_GPIO_Init+0x21c>
 8002cea:	2305      	movs	r3, #5
 8002cec:	e008      	b.n	8002d00 <HAL_GPIO_Init+0x21c>
 8002cee:	2304      	movs	r3, #4
 8002cf0:	e006      	b.n	8002d00 <HAL_GPIO_Init+0x21c>
 8002cf2:	2303      	movs	r3, #3
 8002cf4:	e004      	b.n	8002d00 <HAL_GPIO_Init+0x21c>
 8002cf6:	2302      	movs	r3, #2
 8002cf8:	e002      	b.n	8002d00 <HAL_GPIO_Init+0x21c>
 8002cfa:	2301      	movs	r3, #1
 8002cfc:	e000      	b.n	8002d00 <HAL_GPIO_Init+0x21c>
 8002cfe:	2300      	movs	r3, #0
 8002d00:	69fa      	ldr	r2, [r7, #28]
 8002d02:	f002 0203 	and.w	r2, r2, #3
 8002d06:	0092      	lsls	r2, r2, #2
 8002d08:	4093      	lsls	r3, r2
 8002d0a:	69ba      	ldr	r2, [r7, #24]
 8002d0c:	4313      	orrs	r3, r2
 8002d0e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002d10:	4935      	ldr	r1, [pc, #212]	@ (8002de8 <HAL_GPIO_Init+0x304>)
 8002d12:	69fb      	ldr	r3, [r7, #28]
 8002d14:	089b      	lsrs	r3, r3, #2
 8002d16:	3302      	adds	r3, #2
 8002d18:	69ba      	ldr	r2, [r7, #24]
 8002d1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002d1e:	4b3a      	ldr	r3, [pc, #232]	@ (8002e08 <HAL_GPIO_Init+0x324>)
 8002d20:	689b      	ldr	r3, [r3, #8]
 8002d22:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d24:	693b      	ldr	r3, [r7, #16]
 8002d26:	43db      	mvns	r3, r3
 8002d28:	69ba      	ldr	r2, [r7, #24]
 8002d2a:	4013      	ands	r3, r2
 8002d2c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002d2e:	683b      	ldr	r3, [r7, #0]
 8002d30:	685b      	ldr	r3, [r3, #4]
 8002d32:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d003      	beq.n	8002d42 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8002d3a:	69ba      	ldr	r2, [r7, #24]
 8002d3c:	693b      	ldr	r3, [r7, #16]
 8002d3e:	4313      	orrs	r3, r2
 8002d40:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002d42:	4a31      	ldr	r2, [pc, #196]	@ (8002e08 <HAL_GPIO_Init+0x324>)
 8002d44:	69bb      	ldr	r3, [r7, #24]
 8002d46:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002d48:	4b2f      	ldr	r3, [pc, #188]	@ (8002e08 <HAL_GPIO_Init+0x324>)
 8002d4a:	68db      	ldr	r3, [r3, #12]
 8002d4c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d4e:	693b      	ldr	r3, [r7, #16]
 8002d50:	43db      	mvns	r3, r3
 8002d52:	69ba      	ldr	r2, [r7, #24]
 8002d54:	4013      	ands	r3, r2
 8002d56:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002d58:	683b      	ldr	r3, [r7, #0]
 8002d5a:	685b      	ldr	r3, [r3, #4]
 8002d5c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d003      	beq.n	8002d6c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002d64:	69ba      	ldr	r2, [r7, #24]
 8002d66:	693b      	ldr	r3, [r7, #16]
 8002d68:	4313      	orrs	r3, r2
 8002d6a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002d6c:	4a26      	ldr	r2, [pc, #152]	@ (8002e08 <HAL_GPIO_Init+0x324>)
 8002d6e:	69bb      	ldr	r3, [r7, #24]
 8002d70:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002d72:	4b25      	ldr	r3, [pc, #148]	@ (8002e08 <HAL_GPIO_Init+0x324>)
 8002d74:	685b      	ldr	r3, [r3, #4]
 8002d76:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d78:	693b      	ldr	r3, [r7, #16]
 8002d7a:	43db      	mvns	r3, r3
 8002d7c:	69ba      	ldr	r2, [r7, #24]
 8002d7e:	4013      	ands	r3, r2
 8002d80:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002d82:	683b      	ldr	r3, [r7, #0]
 8002d84:	685b      	ldr	r3, [r3, #4]
 8002d86:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d003      	beq.n	8002d96 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8002d8e:	69ba      	ldr	r2, [r7, #24]
 8002d90:	693b      	ldr	r3, [r7, #16]
 8002d92:	4313      	orrs	r3, r2
 8002d94:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002d96:	4a1c      	ldr	r2, [pc, #112]	@ (8002e08 <HAL_GPIO_Init+0x324>)
 8002d98:	69bb      	ldr	r3, [r7, #24]
 8002d9a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002d9c:	4b1a      	ldr	r3, [pc, #104]	@ (8002e08 <HAL_GPIO_Init+0x324>)
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002da2:	693b      	ldr	r3, [r7, #16]
 8002da4:	43db      	mvns	r3, r3
 8002da6:	69ba      	ldr	r2, [r7, #24]
 8002da8:	4013      	ands	r3, r2
 8002daa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002dac:	683b      	ldr	r3, [r7, #0]
 8002dae:	685b      	ldr	r3, [r3, #4]
 8002db0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d003      	beq.n	8002dc0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002db8:	69ba      	ldr	r2, [r7, #24]
 8002dba:	693b      	ldr	r3, [r7, #16]
 8002dbc:	4313      	orrs	r3, r2
 8002dbe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002dc0:	4a11      	ldr	r2, [pc, #68]	@ (8002e08 <HAL_GPIO_Init+0x324>)
 8002dc2:	69bb      	ldr	r3, [r7, #24]
 8002dc4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002dc6:	69fb      	ldr	r3, [r7, #28]
 8002dc8:	3301      	adds	r3, #1
 8002dca:	61fb      	str	r3, [r7, #28]
 8002dcc:	69fb      	ldr	r3, [r7, #28]
 8002dce:	2b0f      	cmp	r3, #15
 8002dd0:	f67f ae96 	bls.w	8002b00 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002dd4:	bf00      	nop
 8002dd6:	bf00      	nop
 8002dd8:	3724      	adds	r7, #36	@ 0x24
 8002dda:	46bd      	mov	sp, r7
 8002ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de0:	4770      	bx	lr
 8002de2:	bf00      	nop
 8002de4:	40023800 	.word	0x40023800
 8002de8:	40013800 	.word	0x40013800
 8002dec:	40020000 	.word	0x40020000
 8002df0:	40020400 	.word	0x40020400
 8002df4:	40020800 	.word	0x40020800
 8002df8:	40020c00 	.word	0x40020c00
 8002dfc:	40021000 	.word	0x40021000
 8002e00:	40021400 	.word	0x40021400
 8002e04:	40021800 	.word	0x40021800
 8002e08:	40013c00 	.word	0x40013c00

08002e0c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002e0c:	b480      	push	{r7}
 8002e0e:	b085      	sub	sp, #20
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	6078      	str	r0, [r7, #4]
 8002e14:	460b      	mov	r3, r1
 8002e16:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	691a      	ldr	r2, [r3, #16]
 8002e1c:	887b      	ldrh	r3, [r7, #2]
 8002e1e:	4013      	ands	r3, r2
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d002      	beq.n	8002e2a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002e24:	2301      	movs	r3, #1
 8002e26:	73fb      	strb	r3, [r7, #15]
 8002e28:	e001      	b.n	8002e2e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002e2a:	2300      	movs	r3, #0
 8002e2c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002e2e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e30:	4618      	mov	r0, r3
 8002e32:	3714      	adds	r7, #20
 8002e34:	46bd      	mov	sp, r7
 8002e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e3a:	4770      	bx	lr

08002e3c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002e3c:	b480      	push	{r7}
 8002e3e:	b083      	sub	sp, #12
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	6078      	str	r0, [r7, #4]
 8002e44:	460b      	mov	r3, r1
 8002e46:	807b      	strh	r3, [r7, #2]
 8002e48:	4613      	mov	r3, r2
 8002e4a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002e4c:	787b      	ldrb	r3, [r7, #1]
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d003      	beq.n	8002e5a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002e52:	887a      	ldrh	r2, [r7, #2]
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002e58:	e003      	b.n	8002e62 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002e5a:	887b      	ldrh	r3, [r7, #2]
 8002e5c:	041a      	lsls	r2, r3, #16
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	619a      	str	r2, [r3, #24]
}
 8002e62:	bf00      	nop
 8002e64:	370c      	adds	r7, #12
 8002e66:	46bd      	mov	sp, r7
 8002e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e6c:	4770      	bx	lr
	...

08002e70 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002e70:	b580      	push	{r7, lr}
 8002e72:	b084      	sub	sp, #16
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	6078      	str	r0, [r7, #4]
 8002e78:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d101      	bne.n	8002e84 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002e80:	2301      	movs	r3, #1
 8002e82:	e0cc      	b.n	800301e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002e84:	4b68      	ldr	r3, [pc, #416]	@ (8003028 <HAL_RCC_ClockConfig+0x1b8>)
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	f003 030f 	and.w	r3, r3, #15
 8002e8c:	683a      	ldr	r2, [r7, #0]
 8002e8e:	429a      	cmp	r2, r3
 8002e90:	d90c      	bls.n	8002eac <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e92:	4b65      	ldr	r3, [pc, #404]	@ (8003028 <HAL_RCC_ClockConfig+0x1b8>)
 8002e94:	683a      	ldr	r2, [r7, #0]
 8002e96:	b2d2      	uxtb	r2, r2
 8002e98:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e9a:	4b63      	ldr	r3, [pc, #396]	@ (8003028 <HAL_RCC_ClockConfig+0x1b8>)
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	f003 030f 	and.w	r3, r3, #15
 8002ea2:	683a      	ldr	r2, [r7, #0]
 8002ea4:	429a      	cmp	r2, r3
 8002ea6:	d001      	beq.n	8002eac <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002ea8:	2301      	movs	r3, #1
 8002eaa:	e0b8      	b.n	800301e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	f003 0302 	and.w	r3, r3, #2
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d020      	beq.n	8002efa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	f003 0304 	and.w	r3, r3, #4
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d005      	beq.n	8002ed0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002ec4:	4b59      	ldr	r3, [pc, #356]	@ (800302c <HAL_RCC_ClockConfig+0x1bc>)
 8002ec6:	689b      	ldr	r3, [r3, #8]
 8002ec8:	4a58      	ldr	r2, [pc, #352]	@ (800302c <HAL_RCC_ClockConfig+0x1bc>)
 8002eca:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002ece:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	f003 0308 	and.w	r3, r3, #8
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d005      	beq.n	8002ee8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002edc:	4b53      	ldr	r3, [pc, #332]	@ (800302c <HAL_RCC_ClockConfig+0x1bc>)
 8002ede:	689b      	ldr	r3, [r3, #8]
 8002ee0:	4a52      	ldr	r2, [pc, #328]	@ (800302c <HAL_RCC_ClockConfig+0x1bc>)
 8002ee2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002ee6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ee8:	4b50      	ldr	r3, [pc, #320]	@ (800302c <HAL_RCC_ClockConfig+0x1bc>)
 8002eea:	689b      	ldr	r3, [r3, #8]
 8002eec:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	689b      	ldr	r3, [r3, #8]
 8002ef4:	494d      	ldr	r1, [pc, #308]	@ (800302c <HAL_RCC_ClockConfig+0x1bc>)
 8002ef6:	4313      	orrs	r3, r2
 8002ef8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	f003 0301 	and.w	r3, r3, #1
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d044      	beq.n	8002f90 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	685b      	ldr	r3, [r3, #4]
 8002f0a:	2b01      	cmp	r3, #1
 8002f0c:	d107      	bne.n	8002f1e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f0e:	4b47      	ldr	r3, [pc, #284]	@ (800302c <HAL_RCC_ClockConfig+0x1bc>)
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d119      	bne.n	8002f4e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f1a:	2301      	movs	r3, #1
 8002f1c:	e07f      	b.n	800301e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	685b      	ldr	r3, [r3, #4]
 8002f22:	2b02      	cmp	r3, #2
 8002f24:	d003      	beq.n	8002f2e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002f2a:	2b03      	cmp	r3, #3
 8002f2c:	d107      	bne.n	8002f3e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f2e:	4b3f      	ldr	r3, [pc, #252]	@ (800302c <HAL_RCC_ClockConfig+0x1bc>)
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d109      	bne.n	8002f4e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f3a:	2301      	movs	r3, #1
 8002f3c:	e06f      	b.n	800301e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f3e:	4b3b      	ldr	r3, [pc, #236]	@ (800302c <HAL_RCC_ClockConfig+0x1bc>)
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f003 0302 	and.w	r3, r3, #2
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d101      	bne.n	8002f4e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f4a:	2301      	movs	r3, #1
 8002f4c:	e067      	b.n	800301e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002f4e:	4b37      	ldr	r3, [pc, #220]	@ (800302c <HAL_RCC_ClockConfig+0x1bc>)
 8002f50:	689b      	ldr	r3, [r3, #8]
 8002f52:	f023 0203 	bic.w	r2, r3, #3
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	685b      	ldr	r3, [r3, #4]
 8002f5a:	4934      	ldr	r1, [pc, #208]	@ (800302c <HAL_RCC_ClockConfig+0x1bc>)
 8002f5c:	4313      	orrs	r3, r2
 8002f5e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002f60:	f7ff f8d2 	bl	8002108 <HAL_GetTick>
 8002f64:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f66:	e00a      	b.n	8002f7e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f68:	f7ff f8ce 	bl	8002108 <HAL_GetTick>
 8002f6c:	4602      	mov	r2, r0
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	1ad3      	subs	r3, r2, r3
 8002f72:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002f76:	4293      	cmp	r3, r2
 8002f78:	d901      	bls.n	8002f7e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002f7a:	2303      	movs	r3, #3
 8002f7c:	e04f      	b.n	800301e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f7e:	4b2b      	ldr	r3, [pc, #172]	@ (800302c <HAL_RCC_ClockConfig+0x1bc>)
 8002f80:	689b      	ldr	r3, [r3, #8]
 8002f82:	f003 020c 	and.w	r2, r3, #12
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	685b      	ldr	r3, [r3, #4]
 8002f8a:	009b      	lsls	r3, r3, #2
 8002f8c:	429a      	cmp	r2, r3
 8002f8e:	d1eb      	bne.n	8002f68 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002f90:	4b25      	ldr	r3, [pc, #148]	@ (8003028 <HAL_RCC_ClockConfig+0x1b8>)
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	f003 030f 	and.w	r3, r3, #15
 8002f98:	683a      	ldr	r2, [r7, #0]
 8002f9a:	429a      	cmp	r2, r3
 8002f9c:	d20c      	bcs.n	8002fb8 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f9e:	4b22      	ldr	r3, [pc, #136]	@ (8003028 <HAL_RCC_ClockConfig+0x1b8>)
 8002fa0:	683a      	ldr	r2, [r7, #0]
 8002fa2:	b2d2      	uxtb	r2, r2
 8002fa4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002fa6:	4b20      	ldr	r3, [pc, #128]	@ (8003028 <HAL_RCC_ClockConfig+0x1b8>)
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	f003 030f 	and.w	r3, r3, #15
 8002fae:	683a      	ldr	r2, [r7, #0]
 8002fb0:	429a      	cmp	r2, r3
 8002fb2:	d001      	beq.n	8002fb8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002fb4:	2301      	movs	r3, #1
 8002fb6:	e032      	b.n	800301e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f003 0304 	and.w	r3, r3, #4
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d008      	beq.n	8002fd6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002fc4:	4b19      	ldr	r3, [pc, #100]	@ (800302c <HAL_RCC_ClockConfig+0x1bc>)
 8002fc6:	689b      	ldr	r3, [r3, #8]
 8002fc8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	68db      	ldr	r3, [r3, #12]
 8002fd0:	4916      	ldr	r1, [pc, #88]	@ (800302c <HAL_RCC_ClockConfig+0x1bc>)
 8002fd2:	4313      	orrs	r3, r2
 8002fd4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	f003 0308 	and.w	r3, r3, #8
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d009      	beq.n	8002ff6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002fe2:	4b12      	ldr	r3, [pc, #72]	@ (800302c <HAL_RCC_ClockConfig+0x1bc>)
 8002fe4:	689b      	ldr	r3, [r3, #8]
 8002fe6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	691b      	ldr	r3, [r3, #16]
 8002fee:	00db      	lsls	r3, r3, #3
 8002ff0:	490e      	ldr	r1, [pc, #56]	@ (800302c <HAL_RCC_ClockConfig+0x1bc>)
 8002ff2:	4313      	orrs	r3, r2
 8002ff4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002ff6:	f000 f887 	bl	8003108 <HAL_RCC_GetSysClockFreq>
 8002ffa:	4602      	mov	r2, r0
 8002ffc:	4b0b      	ldr	r3, [pc, #44]	@ (800302c <HAL_RCC_ClockConfig+0x1bc>)
 8002ffe:	689b      	ldr	r3, [r3, #8]
 8003000:	091b      	lsrs	r3, r3, #4
 8003002:	f003 030f 	and.w	r3, r3, #15
 8003006:	490a      	ldr	r1, [pc, #40]	@ (8003030 <HAL_RCC_ClockConfig+0x1c0>)
 8003008:	5ccb      	ldrb	r3, [r1, r3]
 800300a:	fa22 f303 	lsr.w	r3, r2, r3
 800300e:	4a09      	ldr	r2, [pc, #36]	@ (8003034 <HAL_RCC_ClockConfig+0x1c4>)
 8003010:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8003012:	4b09      	ldr	r3, [pc, #36]	@ (8003038 <HAL_RCC_ClockConfig+0x1c8>)
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	4618      	mov	r0, r3
 8003018:	f7fe ff68 	bl	8001eec <HAL_InitTick>

  return HAL_OK;
 800301c:	2300      	movs	r3, #0
}
 800301e:	4618      	mov	r0, r3
 8003020:	3710      	adds	r7, #16
 8003022:	46bd      	mov	sp, r7
 8003024:	bd80      	pop	{r7, pc}
 8003026:	bf00      	nop
 8003028:	40023c00 	.word	0x40023c00
 800302c:	40023800 	.word	0x40023800
 8003030:	080074ac 	.word	0x080074ac
 8003034:	20000000 	.word	0x20000000
 8003038:	20000004 	.word	0x20000004

0800303c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800303c:	b480      	push	{r7}
 800303e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003040:	4b03      	ldr	r3, [pc, #12]	@ (8003050 <HAL_RCC_GetHCLKFreq+0x14>)
 8003042:	681b      	ldr	r3, [r3, #0]
}
 8003044:	4618      	mov	r0, r3
 8003046:	46bd      	mov	sp, r7
 8003048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800304c:	4770      	bx	lr
 800304e:	bf00      	nop
 8003050:	20000000 	.word	0x20000000

08003054 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003054:	b580      	push	{r7, lr}
 8003056:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003058:	f7ff fff0 	bl	800303c <HAL_RCC_GetHCLKFreq>
 800305c:	4602      	mov	r2, r0
 800305e:	4b05      	ldr	r3, [pc, #20]	@ (8003074 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003060:	689b      	ldr	r3, [r3, #8]
 8003062:	0a9b      	lsrs	r3, r3, #10
 8003064:	f003 0307 	and.w	r3, r3, #7
 8003068:	4903      	ldr	r1, [pc, #12]	@ (8003078 <HAL_RCC_GetPCLK1Freq+0x24>)
 800306a:	5ccb      	ldrb	r3, [r1, r3]
 800306c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003070:	4618      	mov	r0, r3
 8003072:	bd80      	pop	{r7, pc}
 8003074:	40023800 	.word	0x40023800
 8003078:	080074bc 	.word	0x080074bc

0800307c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800307c:	b580      	push	{r7, lr}
 800307e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003080:	f7ff ffdc 	bl	800303c <HAL_RCC_GetHCLKFreq>
 8003084:	4602      	mov	r2, r0
 8003086:	4b05      	ldr	r3, [pc, #20]	@ (800309c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003088:	689b      	ldr	r3, [r3, #8]
 800308a:	0b5b      	lsrs	r3, r3, #13
 800308c:	f003 0307 	and.w	r3, r3, #7
 8003090:	4903      	ldr	r1, [pc, #12]	@ (80030a0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003092:	5ccb      	ldrb	r3, [r1, r3]
 8003094:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003098:	4618      	mov	r0, r3
 800309a:	bd80      	pop	{r7, pc}
 800309c:	40023800 	.word	0x40023800
 80030a0:	080074bc 	.word	0x080074bc

080030a4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80030a4:	b480      	push	{r7}
 80030a6:	b083      	sub	sp, #12
 80030a8:	af00      	add	r7, sp, #0
 80030aa:	6078      	str	r0, [r7, #4]
 80030ac:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	220f      	movs	r2, #15
 80030b2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80030b4:	4b12      	ldr	r3, [pc, #72]	@ (8003100 <HAL_RCC_GetClockConfig+0x5c>)
 80030b6:	689b      	ldr	r3, [r3, #8]
 80030b8:	f003 0203 	and.w	r2, r3, #3
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80030c0:	4b0f      	ldr	r3, [pc, #60]	@ (8003100 <HAL_RCC_GetClockConfig+0x5c>)
 80030c2:	689b      	ldr	r3, [r3, #8]
 80030c4:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80030cc:	4b0c      	ldr	r3, [pc, #48]	@ (8003100 <HAL_RCC_GetClockConfig+0x5c>)
 80030ce:	689b      	ldr	r3, [r3, #8]
 80030d0:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80030d8:	4b09      	ldr	r3, [pc, #36]	@ (8003100 <HAL_RCC_GetClockConfig+0x5c>)
 80030da:	689b      	ldr	r3, [r3, #8]
 80030dc:	08db      	lsrs	r3, r3, #3
 80030de:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80030e6:	4b07      	ldr	r3, [pc, #28]	@ (8003104 <HAL_RCC_GetClockConfig+0x60>)
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	f003 020f 	and.w	r2, r3, #15
 80030ee:	683b      	ldr	r3, [r7, #0]
 80030f0:	601a      	str	r2, [r3, #0]
}
 80030f2:	bf00      	nop
 80030f4:	370c      	adds	r7, #12
 80030f6:	46bd      	mov	sp, r7
 80030f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030fc:	4770      	bx	lr
 80030fe:	bf00      	nop
 8003100:	40023800 	.word	0x40023800
 8003104:	40023c00 	.word	0x40023c00

08003108 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003108:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800310c:	b0ae      	sub	sp, #184	@ 0xb8
 800310e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003110:	2300      	movs	r3, #0
 8003112:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8003116:	2300      	movs	r3, #0
 8003118:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 800311c:	2300      	movs	r3, #0
 800311e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8003122:	2300      	movs	r3, #0
 8003124:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8003128:	2300      	movs	r3, #0
 800312a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800312e:	4bcb      	ldr	r3, [pc, #812]	@ (800345c <HAL_RCC_GetSysClockFreq+0x354>)
 8003130:	689b      	ldr	r3, [r3, #8]
 8003132:	f003 030c 	and.w	r3, r3, #12
 8003136:	2b0c      	cmp	r3, #12
 8003138:	f200 8206 	bhi.w	8003548 <HAL_RCC_GetSysClockFreq+0x440>
 800313c:	a201      	add	r2, pc, #4	@ (adr r2, 8003144 <HAL_RCC_GetSysClockFreq+0x3c>)
 800313e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003142:	bf00      	nop
 8003144:	08003179 	.word	0x08003179
 8003148:	08003549 	.word	0x08003549
 800314c:	08003549 	.word	0x08003549
 8003150:	08003549 	.word	0x08003549
 8003154:	08003181 	.word	0x08003181
 8003158:	08003549 	.word	0x08003549
 800315c:	08003549 	.word	0x08003549
 8003160:	08003549 	.word	0x08003549
 8003164:	08003189 	.word	0x08003189
 8003168:	08003549 	.word	0x08003549
 800316c:	08003549 	.word	0x08003549
 8003170:	08003549 	.word	0x08003549
 8003174:	08003379 	.word	0x08003379
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003178:	4bb9      	ldr	r3, [pc, #740]	@ (8003460 <HAL_RCC_GetSysClockFreq+0x358>)
 800317a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800317e:	e1e7      	b.n	8003550 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003180:	4bb8      	ldr	r3, [pc, #736]	@ (8003464 <HAL_RCC_GetSysClockFreq+0x35c>)
 8003182:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8003186:	e1e3      	b.n	8003550 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003188:	4bb4      	ldr	r3, [pc, #720]	@ (800345c <HAL_RCC_GetSysClockFreq+0x354>)
 800318a:	685b      	ldr	r3, [r3, #4]
 800318c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003190:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003194:	4bb1      	ldr	r3, [pc, #708]	@ (800345c <HAL_RCC_GetSysClockFreq+0x354>)
 8003196:	685b      	ldr	r3, [r3, #4]
 8003198:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800319c:	2b00      	cmp	r3, #0
 800319e:	d071      	beq.n	8003284 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80031a0:	4bae      	ldr	r3, [pc, #696]	@ (800345c <HAL_RCC_GetSysClockFreq+0x354>)
 80031a2:	685b      	ldr	r3, [r3, #4]
 80031a4:	099b      	lsrs	r3, r3, #6
 80031a6:	2200      	movs	r2, #0
 80031a8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80031ac:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 80031b0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80031b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80031b8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80031bc:	2300      	movs	r3, #0
 80031be:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80031c2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80031c6:	4622      	mov	r2, r4
 80031c8:	462b      	mov	r3, r5
 80031ca:	f04f 0000 	mov.w	r0, #0
 80031ce:	f04f 0100 	mov.w	r1, #0
 80031d2:	0159      	lsls	r1, r3, #5
 80031d4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80031d8:	0150      	lsls	r0, r2, #5
 80031da:	4602      	mov	r2, r0
 80031dc:	460b      	mov	r3, r1
 80031de:	4621      	mov	r1, r4
 80031e0:	1a51      	subs	r1, r2, r1
 80031e2:	6439      	str	r1, [r7, #64]	@ 0x40
 80031e4:	4629      	mov	r1, r5
 80031e6:	eb63 0301 	sbc.w	r3, r3, r1
 80031ea:	647b      	str	r3, [r7, #68]	@ 0x44
 80031ec:	f04f 0200 	mov.w	r2, #0
 80031f0:	f04f 0300 	mov.w	r3, #0
 80031f4:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 80031f8:	4649      	mov	r1, r9
 80031fa:	018b      	lsls	r3, r1, #6
 80031fc:	4641      	mov	r1, r8
 80031fe:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003202:	4641      	mov	r1, r8
 8003204:	018a      	lsls	r2, r1, #6
 8003206:	4641      	mov	r1, r8
 8003208:	1a51      	subs	r1, r2, r1
 800320a:	63b9      	str	r1, [r7, #56]	@ 0x38
 800320c:	4649      	mov	r1, r9
 800320e:	eb63 0301 	sbc.w	r3, r3, r1
 8003212:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003214:	f04f 0200 	mov.w	r2, #0
 8003218:	f04f 0300 	mov.w	r3, #0
 800321c:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8003220:	4649      	mov	r1, r9
 8003222:	00cb      	lsls	r3, r1, #3
 8003224:	4641      	mov	r1, r8
 8003226:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800322a:	4641      	mov	r1, r8
 800322c:	00ca      	lsls	r2, r1, #3
 800322e:	4610      	mov	r0, r2
 8003230:	4619      	mov	r1, r3
 8003232:	4603      	mov	r3, r0
 8003234:	4622      	mov	r2, r4
 8003236:	189b      	adds	r3, r3, r2
 8003238:	633b      	str	r3, [r7, #48]	@ 0x30
 800323a:	462b      	mov	r3, r5
 800323c:	460a      	mov	r2, r1
 800323e:	eb42 0303 	adc.w	r3, r2, r3
 8003242:	637b      	str	r3, [r7, #52]	@ 0x34
 8003244:	f04f 0200 	mov.w	r2, #0
 8003248:	f04f 0300 	mov.w	r3, #0
 800324c:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8003250:	4629      	mov	r1, r5
 8003252:	024b      	lsls	r3, r1, #9
 8003254:	4621      	mov	r1, r4
 8003256:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800325a:	4621      	mov	r1, r4
 800325c:	024a      	lsls	r2, r1, #9
 800325e:	4610      	mov	r0, r2
 8003260:	4619      	mov	r1, r3
 8003262:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003266:	2200      	movs	r2, #0
 8003268:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800326c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003270:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8003274:	f7fc ffcc 	bl	8000210 <__aeabi_uldivmod>
 8003278:	4602      	mov	r2, r0
 800327a:	460b      	mov	r3, r1
 800327c:	4613      	mov	r3, r2
 800327e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003282:	e067      	b.n	8003354 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003284:	4b75      	ldr	r3, [pc, #468]	@ (800345c <HAL_RCC_GetSysClockFreq+0x354>)
 8003286:	685b      	ldr	r3, [r3, #4]
 8003288:	099b      	lsrs	r3, r3, #6
 800328a:	2200      	movs	r2, #0
 800328c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003290:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8003294:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003298:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800329c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800329e:	2300      	movs	r3, #0
 80032a0:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80032a2:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 80032a6:	4622      	mov	r2, r4
 80032a8:	462b      	mov	r3, r5
 80032aa:	f04f 0000 	mov.w	r0, #0
 80032ae:	f04f 0100 	mov.w	r1, #0
 80032b2:	0159      	lsls	r1, r3, #5
 80032b4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80032b8:	0150      	lsls	r0, r2, #5
 80032ba:	4602      	mov	r2, r0
 80032bc:	460b      	mov	r3, r1
 80032be:	4621      	mov	r1, r4
 80032c0:	1a51      	subs	r1, r2, r1
 80032c2:	62b9      	str	r1, [r7, #40]	@ 0x28
 80032c4:	4629      	mov	r1, r5
 80032c6:	eb63 0301 	sbc.w	r3, r3, r1
 80032ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80032cc:	f04f 0200 	mov.w	r2, #0
 80032d0:	f04f 0300 	mov.w	r3, #0
 80032d4:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 80032d8:	4649      	mov	r1, r9
 80032da:	018b      	lsls	r3, r1, #6
 80032dc:	4641      	mov	r1, r8
 80032de:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80032e2:	4641      	mov	r1, r8
 80032e4:	018a      	lsls	r2, r1, #6
 80032e6:	4641      	mov	r1, r8
 80032e8:	ebb2 0a01 	subs.w	sl, r2, r1
 80032ec:	4649      	mov	r1, r9
 80032ee:	eb63 0b01 	sbc.w	fp, r3, r1
 80032f2:	f04f 0200 	mov.w	r2, #0
 80032f6:	f04f 0300 	mov.w	r3, #0
 80032fa:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80032fe:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003302:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003306:	4692      	mov	sl, r2
 8003308:	469b      	mov	fp, r3
 800330a:	4623      	mov	r3, r4
 800330c:	eb1a 0303 	adds.w	r3, sl, r3
 8003310:	623b      	str	r3, [r7, #32]
 8003312:	462b      	mov	r3, r5
 8003314:	eb4b 0303 	adc.w	r3, fp, r3
 8003318:	627b      	str	r3, [r7, #36]	@ 0x24
 800331a:	f04f 0200 	mov.w	r2, #0
 800331e:	f04f 0300 	mov.w	r3, #0
 8003322:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8003326:	4629      	mov	r1, r5
 8003328:	028b      	lsls	r3, r1, #10
 800332a:	4621      	mov	r1, r4
 800332c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003330:	4621      	mov	r1, r4
 8003332:	028a      	lsls	r2, r1, #10
 8003334:	4610      	mov	r0, r2
 8003336:	4619      	mov	r1, r3
 8003338:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800333c:	2200      	movs	r2, #0
 800333e:	673b      	str	r3, [r7, #112]	@ 0x70
 8003340:	677a      	str	r2, [r7, #116]	@ 0x74
 8003342:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8003346:	f7fc ff63 	bl	8000210 <__aeabi_uldivmod>
 800334a:	4602      	mov	r2, r0
 800334c:	460b      	mov	r3, r1
 800334e:	4613      	mov	r3, r2
 8003350:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003354:	4b41      	ldr	r3, [pc, #260]	@ (800345c <HAL_RCC_GetSysClockFreq+0x354>)
 8003356:	685b      	ldr	r3, [r3, #4]
 8003358:	0c1b      	lsrs	r3, r3, #16
 800335a:	f003 0303 	and.w	r3, r3, #3
 800335e:	3301      	adds	r3, #1
 8003360:	005b      	lsls	r3, r3, #1
 8003362:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 8003366:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800336a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800336e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003372:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8003376:	e0eb      	b.n	8003550 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003378:	4b38      	ldr	r3, [pc, #224]	@ (800345c <HAL_RCC_GetSysClockFreq+0x354>)
 800337a:	685b      	ldr	r3, [r3, #4]
 800337c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003380:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003384:	4b35      	ldr	r3, [pc, #212]	@ (800345c <HAL_RCC_GetSysClockFreq+0x354>)
 8003386:	685b      	ldr	r3, [r3, #4]
 8003388:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800338c:	2b00      	cmp	r3, #0
 800338e:	d06b      	beq.n	8003468 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003390:	4b32      	ldr	r3, [pc, #200]	@ (800345c <HAL_RCC_GetSysClockFreq+0x354>)
 8003392:	685b      	ldr	r3, [r3, #4]
 8003394:	099b      	lsrs	r3, r3, #6
 8003396:	2200      	movs	r2, #0
 8003398:	66bb      	str	r3, [r7, #104]	@ 0x68
 800339a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800339c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800339e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80033a2:	663b      	str	r3, [r7, #96]	@ 0x60
 80033a4:	2300      	movs	r3, #0
 80033a6:	667b      	str	r3, [r7, #100]	@ 0x64
 80033a8:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 80033ac:	4622      	mov	r2, r4
 80033ae:	462b      	mov	r3, r5
 80033b0:	f04f 0000 	mov.w	r0, #0
 80033b4:	f04f 0100 	mov.w	r1, #0
 80033b8:	0159      	lsls	r1, r3, #5
 80033ba:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80033be:	0150      	lsls	r0, r2, #5
 80033c0:	4602      	mov	r2, r0
 80033c2:	460b      	mov	r3, r1
 80033c4:	4621      	mov	r1, r4
 80033c6:	1a51      	subs	r1, r2, r1
 80033c8:	61b9      	str	r1, [r7, #24]
 80033ca:	4629      	mov	r1, r5
 80033cc:	eb63 0301 	sbc.w	r3, r3, r1
 80033d0:	61fb      	str	r3, [r7, #28]
 80033d2:	f04f 0200 	mov.w	r2, #0
 80033d6:	f04f 0300 	mov.w	r3, #0
 80033da:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 80033de:	4659      	mov	r1, fp
 80033e0:	018b      	lsls	r3, r1, #6
 80033e2:	4651      	mov	r1, sl
 80033e4:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80033e8:	4651      	mov	r1, sl
 80033ea:	018a      	lsls	r2, r1, #6
 80033ec:	4651      	mov	r1, sl
 80033ee:	ebb2 0801 	subs.w	r8, r2, r1
 80033f2:	4659      	mov	r1, fp
 80033f4:	eb63 0901 	sbc.w	r9, r3, r1
 80033f8:	f04f 0200 	mov.w	r2, #0
 80033fc:	f04f 0300 	mov.w	r3, #0
 8003400:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003404:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003408:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800340c:	4690      	mov	r8, r2
 800340e:	4699      	mov	r9, r3
 8003410:	4623      	mov	r3, r4
 8003412:	eb18 0303 	adds.w	r3, r8, r3
 8003416:	613b      	str	r3, [r7, #16]
 8003418:	462b      	mov	r3, r5
 800341a:	eb49 0303 	adc.w	r3, r9, r3
 800341e:	617b      	str	r3, [r7, #20]
 8003420:	f04f 0200 	mov.w	r2, #0
 8003424:	f04f 0300 	mov.w	r3, #0
 8003428:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 800342c:	4629      	mov	r1, r5
 800342e:	024b      	lsls	r3, r1, #9
 8003430:	4621      	mov	r1, r4
 8003432:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003436:	4621      	mov	r1, r4
 8003438:	024a      	lsls	r2, r1, #9
 800343a:	4610      	mov	r0, r2
 800343c:	4619      	mov	r1, r3
 800343e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003442:	2200      	movs	r2, #0
 8003444:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003446:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8003448:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800344c:	f7fc fee0 	bl	8000210 <__aeabi_uldivmod>
 8003450:	4602      	mov	r2, r0
 8003452:	460b      	mov	r3, r1
 8003454:	4613      	mov	r3, r2
 8003456:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800345a:	e065      	b.n	8003528 <HAL_RCC_GetSysClockFreq+0x420>
 800345c:	40023800 	.word	0x40023800
 8003460:	00f42400 	.word	0x00f42400
 8003464:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003468:	4b3d      	ldr	r3, [pc, #244]	@ (8003560 <HAL_RCC_GetSysClockFreq+0x458>)
 800346a:	685b      	ldr	r3, [r3, #4]
 800346c:	099b      	lsrs	r3, r3, #6
 800346e:	2200      	movs	r2, #0
 8003470:	4618      	mov	r0, r3
 8003472:	4611      	mov	r1, r2
 8003474:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003478:	653b      	str	r3, [r7, #80]	@ 0x50
 800347a:	2300      	movs	r3, #0
 800347c:	657b      	str	r3, [r7, #84]	@ 0x54
 800347e:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8003482:	4642      	mov	r2, r8
 8003484:	464b      	mov	r3, r9
 8003486:	f04f 0000 	mov.w	r0, #0
 800348a:	f04f 0100 	mov.w	r1, #0
 800348e:	0159      	lsls	r1, r3, #5
 8003490:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003494:	0150      	lsls	r0, r2, #5
 8003496:	4602      	mov	r2, r0
 8003498:	460b      	mov	r3, r1
 800349a:	4641      	mov	r1, r8
 800349c:	1a51      	subs	r1, r2, r1
 800349e:	60b9      	str	r1, [r7, #8]
 80034a0:	4649      	mov	r1, r9
 80034a2:	eb63 0301 	sbc.w	r3, r3, r1
 80034a6:	60fb      	str	r3, [r7, #12]
 80034a8:	f04f 0200 	mov.w	r2, #0
 80034ac:	f04f 0300 	mov.w	r3, #0
 80034b0:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 80034b4:	4659      	mov	r1, fp
 80034b6:	018b      	lsls	r3, r1, #6
 80034b8:	4651      	mov	r1, sl
 80034ba:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80034be:	4651      	mov	r1, sl
 80034c0:	018a      	lsls	r2, r1, #6
 80034c2:	4651      	mov	r1, sl
 80034c4:	1a54      	subs	r4, r2, r1
 80034c6:	4659      	mov	r1, fp
 80034c8:	eb63 0501 	sbc.w	r5, r3, r1
 80034cc:	f04f 0200 	mov.w	r2, #0
 80034d0:	f04f 0300 	mov.w	r3, #0
 80034d4:	00eb      	lsls	r3, r5, #3
 80034d6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80034da:	00e2      	lsls	r2, r4, #3
 80034dc:	4614      	mov	r4, r2
 80034de:	461d      	mov	r5, r3
 80034e0:	4643      	mov	r3, r8
 80034e2:	18e3      	adds	r3, r4, r3
 80034e4:	603b      	str	r3, [r7, #0]
 80034e6:	464b      	mov	r3, r9
 80034e8:	eb45 0303 	adc.w	r3, r5, r3
 80034ec:	607b      	str	r3, [r7, #4]
 80034ee:	f04f 0200 	mov.w	r2, #0
 80034f2:	f04f 0300 	mov.w	r3, #0
 80034f6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80034fa:	4629      	mov	r1, r5
 80034fc:	028b      	lsls	r3, r1, #10
 80034fe:	4621      	mov	r1, r4
 8003500:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003504:	4621      	mov	r1, r4
 8003506:	028a      	lsls	r2, r1, #10
 8003508:	4610      	mov	r0, r2
 800350a:	4619      	mov	r1, r3
 800350c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003510:	2200      	movs	r2, #0
 8003512:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003514:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8003516:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800351a:	f7fc fe79 	bl	8000210 <__aeabi_uldivmod>
 800351e:	4602      	mov	r2, r0
 8003520:	460b      	mov	r3, r1
 8003522:	4613      	mov	r3, r2
 8003524:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8003528:	4b0d      	ldr	r3, [pc, #52]	@ (8003560 <HAL_RCC_GetSysClockFreq+0x458>)
 800352a:	685b      	ldr	r3, [r3, #4]
 800352c:	0f1b      	lsrs	r3, r3, #28
 800352e:	f003 0307 	and.w	r3, r3, #7
 8003532:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 8003536:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800353a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800353e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003542:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8003546:	e003      	b.n	8003550 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003548:	4b06      	ldr	r3, [pc, #24]	@ (8003564 <HAL_RCC_GetSysClockFreq+0x45c>)
 800354a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800354e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003550:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8003554:	4618      	mov	r0, r3
 8003556:	37b8      	adds	r7, #184	@ 0xb8
 8003558:	46bd      	mov	sp, r7
 800355a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800355e:	bf00      	nop
 8003560:	40023800 	.word	0x40023800
 8003564:	00f42400 	.word	0x00f42400

08003568 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003568:	b580      	push	{r7, lr}
 800356a:	b086      	sub	sp, #24
 800356c:	af00      	add	r7, sp, #0
 800356e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	2b00      	cmp	r3, #0
 8003574:	d101      	bne.n	800357a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003576:	2301      	movs	r3, #1
 8003578:	e28d      	b.n	8003a96 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	f003 0301 	and.w	r3, r3, #1
 8003582:	2b00      	cmp	r3, #0
 8003584:	f000 8083 	beq.w	800368e <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8003588:	4b94      	ldr	r3, [pc, #592]	@ (80037dc <HAL_RCC_OscConfig+0x274>)
 800358a:	689b      	ldr	r3, [r3, #8]
 800358c:	f003 030c 	and.w	r3, r3, #12
 8003590:	2b04      	cmp	r3, #4
 8003592:	d019      	beq.n	80035c8 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8003594:	4b91      	ldr	r3, [pc, #580]	@ (80037dc <HAL_RCC_OscConfig+0x274>)
 8003596:	689b      	ldr	r3, [r3, #8]
 8003598:	f003 030c 	and.w	r3, r3, #12
        || \
 800359c:	2b08      	cmp	r3, #8
 800359e:	d106      	bne.n	80035ae <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80035a0:	4b8e      	ldr	r3, [pc, #568]	@ (80037dc <HAL_RCC_OscConfig+0x274>)
 80035a2:	685b      	ldr	r3, [r3, #4]
 80035a4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80035a8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80035ac:	d00c      	beq.n	80035c8 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80035ae:	4b8b      	ldr	r3, [pc, #556]	@ (80037dc <HAL_RCC_OscConfig+0x274>)
 80035b0:	689b      	ldr	r3, [r3, #8]
 80035b2:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80035b6:	2b0c      	cmp	r3, #12
 80035b8:	d112      	bne.n	80035e0 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80035ba:	4b88      	ldr	r3, [pc, #544]	@ (80037dc <HAL_RCC_OscConfig+0x274>)
 80035bc:	685b      	ldr	r3, [r3, #4]
 80035be:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80035c2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80035c6:	d10b      	bne.n	80035e0 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80035c8:	4b84      	ldr	r3, [pc, #528]	@ (80037dc <HAL_RCC_OscConfig+0x274>)
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d05b      	beq.n	800368c <HAL_RCC_OscConfig+0x124>
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	685b      	ldr	r3, [r3, #4]
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d157      	bne.n	800368c <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80035dc:	2301      	movs	r3, #1
 80035de:	e25a      	b.n	8003a96 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	685b      	ldr	r3, [r3, #4]
 80035e4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80035e8:	d106      	bne.n	80035f8 <HAL_RCC_OscConfig+0x90>
 80035ea:	4b7c      	ldr	r3, [pc, #496]	@ (80037dc <HAL_RCC_OscConfig+0x274>)
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	4a7b      	ldr	r2, [pc, #492]	@ (80037dc <HAL_RCC_OscConfig+0x274>)
 80035f0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80035f4:	6013      	str	r3, [r2, #0]
 80035f6:	e01d      	b.n	8003634 <HAL_RCC_OscConfig+0xcc>
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	685b      	ldr	r3, [r3, #4]
 80035fc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003600:	d10c      	bne.n	800361c <HAL_RCC_OscConfig+0xb4>
 8003602:	4b76      	ldr	r3, [pc, #472]	@ (80037dc <HAL_RCC_OscConfig+0x274>)
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	4a75      	ldr	r2, [pc, #468]	@ (80037dc <HAL_RCC_OscConfig+0x274>)
 8003608:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800360c:	6013      	str	r3, [r2, #0]
 800360e:	4b73      	ldr	r3, [pc, #460]	@ (80037dc <HAL_RCC_OscConfig+0x274>)
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	4a72      	ldr	r2, [pc, #456]	@ (80037dc <HAL_RCC_OscConfig+0x274>)
 8003614:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003618:	6013      	str	r3, [r2, #0]
 800361a:	e00b      	b.n	8003634 <HAL_RCC_OscConfig+0xcc>
 800361c:	4b6f      	ldr	r3, [pc, #444]	@ (80037dc <HAL_RCC_OscConfig+0x274>)
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	4a6e      	ldr	r2, [pc, #440]	@ (80037dc <HAL_RCC_OscConfig+0x274>)
 8003622:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003626:	6013      	str	r3, [r2, #0]
 8003628:	4b6c      	ldr	r3, [pc, #432]	@ (80037dc <HAL_RCC_OscConfig+0x274>)
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	4a6b      	ldr	r2, [pc, #428]	@ (80037dc <HAL_RCC_OscConfig+0x274>)
 800362e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003632:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	685b      	ldr	r3, [r3, #4]
 8003638:	2b00      	cmp	r3, #0
 800363a:	d013      	beq.n	8003664 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800363c:	f7fe fd64 	bl	8002108 <HAL_GetTick>
 8003640:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003642:	e008      	b.n	8003656 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003644:	f7fe fd60 	bl	8002108 <HAL_GetTick>
 8003648:	4602      	mov	r2, r0
 800364a:	693b      	ldr	r3, [r7, #16]
 800364c:	1ad3      	subs	r3, r2, r3
 800364e:	2b64      	cmp	r3, #100	@ 0x64
 8003650:	d901      	bls.n	8003656 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8003652:	2303      	movs	r3, #3
 8003654:	e21f      	b.n	8003a96 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003656:	4b61      	ldr	r3, [pc, #388]	@ (80037dc <HAL_RCC_OscConfig+0x274>)
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800365e:	2b00      	cmp	r3, #0
 8003660:	d0f0      	beq.n	8003644 <HAL_RCC_OscConfig+0xdc>
 8003662:	e014      	b.n	800368e <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003664:	f7fe fd50 	bl	8002108 <HAL_GetTick>
 8003668:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800366a:	e008      	b.n	800367e <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800366c:	f7fe fd4c 	bl	8002108 <HAL_GetTick>
 8003670:	4602      	mov	r2, r0
 8003672:	693b      	ldr	r3, [r7, #16]
 8003674:	1ad3      	subs	r3, r2, r3
 8003676:	2b64      	cmp	r3, #100	@ 0x64
 8003678:	d901      	bls.n	800367e <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800367a:	2303      	movs	r3, #3
 800367c:	e20b      	b.n	8003a96 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800367e:	4b57      	ldr	r3, [pc, #348]	@ (80037dc <HAL_RCC_OscConfig+0x274>)
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003686:	2b00      	cmp	r3, #0
 8003688:	d1f0      	bne.n	800366c <HAL_RCC_OscConfig+0x104>
 800368a:	e000      	b.n	800368e <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800368c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	f003 0302 	and.w	r3, r3, #2
 8003696:	2b00      	cmp	r3, #0
 8003698:	d06f      	beq.n	800377a <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800369a:	4b50      	ldr	r3, [pc, #320]	@ (80037dc <HAL_RCC_OscConfig+0x274>)
 800369c:	689b      	ldr	r3, [r3, #8]
 800369e:	f003 030c 	and.w	r3, r3, #12
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d017      	beq.n	80036d6 <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80036a6:	4b4d      	ldr	r3, [pc, #308]	@ (80037dc <HAL_RCC_OscConfig+0x274>)
 80036a8:	689b      	ldr	r3, [r3, #8]
 80036aa:	f003 030c 	and.w	r3, r3, #12
        || \
 80036ae:	2b08      	cmp	r3, #8
 80036b0:	d105      	bne.n	80036be <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80036b2:	4b4a      	ldr	r3, [pc, #296]	@ (80037dc <HAL_RCC_OscConfig+0x274>)
 80036b4:	685b      	ldr	r3, [r3, #4]
 80036b6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d00b      	beq.n	80036d6 <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80036be:	4b47      	ldr	r3, [pc, #284]	@ (80037dc <HAL_RCC_OscConfig+0x274>)
 80036c0:	689b      	ldr	r3, [r3, #8]
 80036c2:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80036c6:	2b0c      	cmp	r3, #12
 80036c8:	d11c      	bne.n	8003704 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80036ca:	4b44      	ldr	r3, [pc, #272]	@ (80037dc <HAL_RCC_OscConfig+0x274>)
 80036cc:	685b      	ldr	r3, [r3, #4]
 80036ce:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d116      	bne.n	8003704 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80036d6:	4b41      	ldr	r3, [pc, #260]	@ (80037dc <HAL_RCC_OscConfig+0x274>)
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	f003 0302 	and.w	r3, r3, #2
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d005      	beq.n	80036ee <HAL_RCC_OscConfig+0x186>
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	68db      	ldr	r3, [r3, #12]
 80036e6:	2b01      	cmp	r3, #1
 80036e8:	d001      	beq.n	80036ee <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80036ea:	2301      	movs	r3, #1
 80036ec:	e1d3      	b.n	8003a96 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80036ee:	4b3b      	ldr	r3, [pc, #236]	@ (80037dc <HAL_RCC_OscConfig+0x274>)
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	691b      	ldr	r3, [r3, #16]
 80036fa:	00db      	lsls	r3, r3, #3
 80036fc:	4937      	ldr	r1, [pc, #220]	@ (80037dc <HAL_RCC_OscConfig+0x274>)
 80036fe:	4313      	orrs	r3, r2
 8003700:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003702:	e03a      	b.n	800377a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	68db      	ldr	r3, [r3, #12]
 8003708:	2b00      	cmp	r3, #0
 800370a:	d020      	beq.n	800374e <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800370c:	4b34      	ldr	r3, [pc, #208]	@ (80037e0 <HAL_RCC_OscConfig+0x278>)
 800370e:	2201      	movs	r2, #1
 8003710:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003712:	f7fe fcf9 	bl	8002108 <HAL_GetTick>
 8003716:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003718:	e008      	b.n	800372c <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800371a:	f7fe fcf5 	bl	8002108 <HAL_GetTick>
 800371e:	4602      	mov	r2, r0
 8003720:	693b      	ldr	r3, [r7, #16]
 8003722:	1ad3      	subs	r3, r2, r3
 8003724:	2b02      	cmp	r3, #2
 8003726:	d901      	bls.n	800372c <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8003728:	2303      	movs	r3, #3
 800372a:	e1b4      	b.n	8003a96 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800372c:	4b2b      	ldr	r3, [pc, #172]	@ (80037dc <HAL_RCC_OscConfig+0x274>)
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	f003 0302 	and.w	r3, r3, #2
 8003734:	2b00      	cmp	r3, #0
 8003736:	d0f0      	beq.n	800371a <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003738:	4b28      	ldr	r3, [pc, #160]	@ (80037dc <HAL_RCC_OscConfig+0x274>)
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	691b      	ldr	r3, [r3, #16]
 8003744:	00db      	lsls	r3, r3, #3
 8003746:	4925      	ldr	r1, [pc, #148]	@ (80037dc <HAL_RCC_OscConfig+0x274>)
 8003748:	4313      	orrs	r3, r2
 800374a:	600b      	str	r3, [r1, #0]
 800374c:	e015      	b.n	800377a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800374e:	4b24      	ldr	r3, [pc, #144]	@ (80037e0 <HAL_RCC_OscConfig+0x278>)
 8003750:	2200      	movs	r2, #0
 8003752:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003754:	f7fe fcd8 	bl	8002108 <HAL_GetTick>
 8003758:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800375a:	e008      	b.n	800376e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800375c:	f7fe fcd4 	bl	8002108 <HAL_GetTick>
 8003760:	4602      	mov	r2, r0
 8003762:	693b      	ldr	r3, [r7, #16]
 8003764:	1ad3      	subs	r3, r2, r3
 8003766:	2b02      	cmp	r3, #2
 8003768:	d901      	bls.n	800376e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800376a:	2303      	movs	r3, #3
 800376c:	e193      	b.n	8003a96 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800376e:	4b1b      	ldr	r3, [pc, #108]	@ (80037dc <HAL_RCC_OscConfig+0x274>)
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	f003 0302 	and.w	r3, r3, #2
 8003776:	2b00      	cmp	r3, #0
 8003778:	d1f0      	bne.n	800375c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	f003 0308 	and.w	r3, r3, #8
 8003782:	2b00      	cmp	r3, #0
 8003784:	d036      	beq.n	80037f4 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	695b      	ldr	r3, [r3, #20]
 800378a:	2b00      	cmp	r3, #0
 800378c:	d016      	beq.n	80037bc <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800378e:	4b15      	ldr	r3, [pc, #84]	@ (80037e4 <HAL_RCC_OscConfig+0x27c>)
 8003790:	2201      	movs	r2, #1
 8003792:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003794:	f7fe fcb8 	bl	8002108 <HAL_GetTick>
 8003798:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800379a:	e008      	b.n	80037ae <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800379c:	f7fe fcb4 	bl	8002108 <HAL_GetTick>
 80037a0:	4602      	mov	r2, r0
 80037a2:	693b      	ldr	r3, [r7, #16]
 80037a4:	1ad3      	subs	r3, r2, r3
 80037a6:	2b02      	cmp	r3, #2
 80037a8:	d901      	bls.n	80037ae <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80037aa:	2303      	movs	r3, #3
 80037ac:	e173      	b.n	8003a96 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80037ae:	4b0b      	ldr	r3, [pc, #44]	@ (80037dc <HAL_RCC_OscConfig+0x274>)
 80037b0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80037b2:	f003 0302 	and.w	r3, r3, #2
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d0f0      	beq.n	800379c <HAL_RCC_OscConfig+0x234>
 80037ba:	e01b      	b.n	80037f4 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80037bc:	4b09      	ldr	r3, [pc, #36]	@ (80037e4 <HAL_RCC_OscConfig+0x27c>)
 80037be:	2200      	movs	r2, #0
 80037c0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037c2:	f7fe fca1 	bl	8002108 <HAL_GetTick>
 80037c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80037c8:	e00e      	b.n	80037e8 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80037ca:	f7fe fc9d 	bl	8002108 <HAL_GetTick>
 80037ce:	4602      	mov	r2, r0
 80037d0:	693b      	ldr	r3, [r7, #16]
 80037d2:	1ad3      	subs	r3, r2, r3
 80037d4:	2b02      	cmp	r3, #2
 80037d6:	d907      	bls.n	80037e8 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80037d8:	2303      	movs	r3, #3
 80037da:	e15c      	b.n	8003a96 <HAL_RCC_OscConfig+0x52e>
 80037dc:	40023800 	.word	0x40023800
 80037e0:	42470000 	.word	0x42470000
 80037e4:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80037e8:	4b8a      	ldr	r3, [pc, #552]	@ (8003a14 <HAL_RCC_OscConfig+0x4ac>)
 80037ea:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80037ec:	f003 0302 	and.w	r3, r3, #2
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d1ea      	bne.n	80037ca <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	f003 0304 	and.w	r3, r3, #4
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	f000 8097 	beq.w	8003930 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003802:	2300      	movs	r3, #0
 8003804:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003806:	4b83      	ldr	r3, [pc, #524]	@ (8003a14 <HAL_RCC_OscConfig+0x4ac>)
 8003808:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800380a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800380e:	2b00      	cmp	r3, #0
 8003810:	d10f      	bne.n	8003832 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003812:	2300      	movs	r3, #0
 8003814:	60bb      	str	r3, [r7, #8]
 8003816:	4b7f      	ldr	r3, [pc, #508]	@ (8003a14 <HAL_RCC_OscConfig+0x4ac>)
 8003818:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800381a:	4a7e      	ldr	r2, [pc, #504]	@ (8003a14 <HAL_RCC_OscConfig+0x4ac>)
 800381c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003820:	6413      	str	r3, [r2, #64]	@ 0x40
 8003822:	4b7c      	ldr	r3, [pc, #496]	@ (8003a14 <HAL_RCC_OscConfig+0x4ac>)
 8003824:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003826:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800382a:	60bb      	str	r3, [r7, #8]
 800382c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800382e:	2301      	movs	r3, #1
 8003830:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003832:	4b79      	ldr	r3, [pc, #484]	@ (8003a18 <HAL_RCC_OscConfig+0x4b0>)
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800383a:	2b00      	cmp	r3, #0
 800383c:	d118      	bne.n	8003870 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800383e:	4b76      	ldr	r3, [pc, #472]	@ (8003a18 <HAL_RCC_OscConfig+0x4b0>)
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	4a75      	ldr	r2, [pc, #468]	@ (8003a18 <HAL_RCC_OscConfig+0x4b0>)
 8003844:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003848:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800384a:	f7fe fc5d 	bl	8002108 <HAL_GetTick>
 800384e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003850:	e008      	b.n	8003864 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003852:	f7fe fc59 	bl	8002108 <HAL_GetTick>
 8003856:	4602      	mov	r2, r0
 8003858:	693b      	ldr	r3, [r7, #16]
 800385a:	1ad3      	subs	r3, r2, r3
 800385c:	2b02      	cmp	r3, #2
 800385e:	d901      	bls.n	8003864 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8003860:	2303      	movs	r3, #3
 8003862:	e118      	b.n	8003a96 <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003864:	4b6c      	ldr	r3, [pc, #432]	@ (8003a18 <HAL_RCC_OscConfig+0x4b0>)
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800386c:	2b00      	cmp	r3, #0
 800386e:	d0f0      	beq.n	8003852 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	689b      	ldr	r3, [r3, #8]
 8003874:	2b01      	cmp	r3, #1
 8003876:	d106      	bne.n	8003886 <HAL_RCC_OscConfig+0x31e>
 8003878:	4b66      	ldr	r3, [pc, #408]	@ (8003a14 <HAL_RCC_OscConfig+0x4ac>)
 800387a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800387c:	4a65      	ldr	r2, [pc, #404]	@ (8003a14 <HAL_RCC_OscConfig+0x4ac>)
 800387e:	f043 0301 	orr.w	r3, r3, #1
 8003882:	6713      	str	r3, [r2, #112]	@ 0x70
 8003884:	e01c      	b.n	80038c0 <HAL_RCC_OscConfig+0x358>
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	689b      	ldr	r3, [r3, #8]
 800388a:	2b05      	cmp	r3, #5
 800388c:	d10c      	bne.n	80038a8 <HAL_RCC_OscConfig+0x340>
 800388e:	4b61      	ldr	r3, [pc, #388]	@ (8003a14 <HAL_RCC_OscConfig+0x4ac>)
 8003890:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003892:	4a60      	ldr	r2, [pc, #384]	@ (8003a14 <HAL_RCC_OscConfig+0x4ac>)
 8003894:	f043 0304 	orr.w	r3, r3, #4
 8003898:	6713      	str	r3, [r2, #112]	@ 0x70
 800389a:	4b5e      	ldr	r3, [pc, #376]	@ (8003a14 <HAL_RCC_OscConfig+0x4ac>)
 800389c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800389e:	4a5d      	ldr	r2, [pc, #372]	@ (8003a14 <HAL_RCC_OscConfig+0x4ac>)
 80038a0:	f043 0301 	orr.w	r3, r3, #1
 80038a4:	6713      	str	r3, [r2, #112]	@ 0x70
 80038a6:	e00b      	b.n	80038c0 <HAL_RCC_OscConfig+0x358>
 80038a8:	4b5a      	ldr	r3, [pc, #360]	@ (8003a14 <HAL_RCC_OscConfig+0x4ac>)
 80038aa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80038ac:	4a59      	ldr	r2, [pc, #356]	@ (8003a14 <HAL_RCC_OscConfig+0x4ac>)
 80038ae:	f023 0301 	bic.w	r3, r3, #1
 80038b2:	6713      	str	r3, [r2, #112]	@ 0x70
 80038b4:	4b57      	ldr	r3, [pc, #348]	@ (8003a14 <HAL_RCC_OscConfig+0x4ac>)
 80038b6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80038b8:	4a56      	ldr	r2, [pc, #344]	@ (8003a14 <HAL_RCC_OscConfig+0x4ac>)
 80038ba:	f023 0304 	bic.w	r3, r3, #4
 80038be:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	689b      	ldr	r3, [r3, #8]
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d015      	beq.n	80038f4 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038c8:	f7fe fc1e 	bl	8002108 <HAL_GetTick>
 80038cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80038ce:	e00a      	b.n	80038e6 <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80038d0:	f7fe fc1a 	bl	8002108 <HAL_GetTick>
 80038d4:	4602      	mov	r2, r0
 80038d6:	693b      	ldr	r3, [r7, #16]
 80038d8:	1ad3      	subs	r3, r2, r3
 80038da:	f241 3288 	movw	r2, #5000	@ 0x1388
 80038de:	4293      	cmp	r3, r2
 80038e0:	d901      	bls.n	80038e6 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80038e2:	2303      	movs	r3, #3
 80038e4:	e0d7      	b.n	8003a96 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80038e6:	4b4b      	ldr	r3, [pc, #300]	@ (8003a14 <HAL_RCC_OscConfig+0x4ac>)
 80038e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80038ea:	f003 0302 	and.w	r3, r3, #2
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d0ee      	beq.n	80038d0 <HAL_RCC_OscConfig+0x368>
 80038f2:	e014      	b.n	800391e <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038f4:	f7fe fc08 	bl	8002108 <HAL_GetTick>
 80038f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80038fa:	e00a      	b.n	8003912 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80038fc:	f7fe fc04 	bl	8002108 <HAL_GetTick>
 8003900:	4602      	mov	r2, r0
 8003902:	693b      	ldr	r3, [r7, #16]
 8003904:	1ad3      	subs	r3, r2, r3
 8003906:	f241 3288 	movw	r2, #5000	@ 0x1388
 800390a:	4293      	cmp	r3, r2
 800390c:	d901      	bls.n	8003912 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800390e:	2303      	movs	r3, #3
 8003910:	e0c1      	b.n	8003a96 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003912:	4b40      	ldr	r3, [pc, #256]	@ (8003a14 <HAL_RCC_OscConfig+0x4ac>)
 8003914:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003916:	f003 0302 	and.w	r3, r3, #2
 800391a:	2b00      	cmp	r3, #0
 800391c:	d1ee      	bne.n	80038fc <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800391e:	7dfb      	ldrb	r3, [r7, #23]
 8003920:	2b01      	cmp	r3, #1
 8003922:	d105      	bne.n	8003930 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003924:	4b3b      	ldr	r3, [pc, #236]	@ (8003a14 <HAL_RCC_OscConfig+0x4ac>)
 8003926:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003928:	4a3a      	ldr	r2, [pc, #232]	@ (8003a14 <HAL_RCC_OscConfig+0x4ac>)
 800392a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800392e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	699b      	ldr	r3, [r3, #24]
 8003934:	2b00      	cmp	r3, #0
 8003936:	f000 80ad 	beq.w	8003a94 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800393a:	4b36      	ldr	r3, [pc, #216]	@ (8003a14 <HAL_RCC_OscConfig+0x4ac>)
 800393c:	689b      	ldr	r3, [r3, #8]
 800393e:	f003 030c 	and.w	r3, r3, #12
 8003942:	2b08      	cmp	r3, #8
 8003944:	d060      	beq.n	8003a08 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	699b      	ldr	r3, [r3, #24]
 800394a:	2b02      	cmp	r3, #2
 800394c:	d145      	bne.n	80039da <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800394e:	4b33      	ldr	r3, [pc, #204]	@ (8003a1c <HAL_RCC_OscConfig+0x4b4>)
 8003950:	2200      	movs	r2, #0
 8003952:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003954:	f7fe fbd8 	bl	8002108 <HAL_GetTick>
 8003958:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800395a:	e008      	b.n	800396e <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800395c:	f7fe fbd4 	bl	8002108 <HAL_GetTick>
 8003960:	4602      	mov	r2, r0
 8003962:	693b      	ldr	r3, [r7, #16]
 8003964:	1ad3      	subs	r3, r2, r3
 8003966:	2b02      	cmp	r3, #2
 8003968:	d901      	bls.n	800396e <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800396a:	2303      	movs	r3, #3
 800396c:	e093      	b.n	8003a96 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800396e:	4b29      	ldr	r3, [pc, #164]	@ (8003a14 <HAL_RCC_OscConfig+0x4ac>)
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003976:	2b00      	cmp	r3, #0
 8003978:	d1f0      	bne.n	800395c <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	69da      	ldr	r2, [r3, #28]
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	6a1b      	ldr	r3, [r3, #32]
 8003982:	431a      	orrs	r2, r3
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003988:	019b      	lsls	r3, r3, #6
 800398a:	431a      	orrs	r2, r3
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003990:	085b      	lsrs	r3, r3, #1
 8003992:	3b01      	subs	r3, #1
 8003994:	041b      	lsls	r3, r3, #16
 8003996:	431a      	orrs	r2, r3
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800399c:	061b      	lsls	r3, r3, #24
 800399e:	431a      	orrs	r2, r3
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039a4:	071b      	lsls	r3, r3, #28
 80039a6:	491b      	ldr	r1, [pc, #108]	@ (8003a14 <HAL_RCC_OscConfig+0x4ac>)
 80039a8:	4313      	orrs	r3, r2
 80039aa:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80039ac:	4b1b      	ldr	r3, [pc, #108]	@ (8003a1c <HAL_RCC_OscConfig+0x4b4>)
 80039ae:	2201      	movs	r2, #1
 80039b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039b2:	f7fe fba9 	bl	8002108 <HAL_GetTick>
 80039b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80039b8:	e008      	b.n	80039cc <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80039ba:	f7fe fba5 	bl	8002108 <HAL_GetTick>
 80039be:	4602      	mov	r2, r0
 80039c0:	693b      	ldr	r3, [r7, #16]
 80039c2:	1ad3      	subs	r3, r2, r3
 80039c4:	2b02      	cmp	r3, #2
 80039c6:	d901      	bls.n	80039cc <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80039c8:	2303      	movs	r3, #3
 80039ca:	e064      	b.n	8003a96 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80039cc:	4b11      	ldr	r3, [pc, #68]	@ (8003a14 <HAL_RCC_OscConfig+0x4ac>)
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d0f0      	beq.n	80039ba <HAL_RCC_OscConfig+0x452>
 80039d8:	e05c      	b.n	8003a94 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80039da:	4b10      	ldr	r3, [pc, #64]	@ (8003a1c <HAL_RCC_OscConfig+0x4b4>)
 80039dc:	2200      	movs	r2, #0
 80039de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039e0:	f7fe fb92 	bl	8002108 <HAL_GetTick>
 80039e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80039e6:	e008      	b.n	80039fa <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80039e8:	f7fe fb8e 	bl	8002108 <HAL_GetTick>
 80039ec:	4602      	mov	r2, r0
 80039ee:	693b      	ldr	r3, [r7, #16]
 80039f0:	1ad3      	subs	r3, r2, r3
 80039f2:	2b02      	cmp	r3, #2
 80039f4:	d901      	bls.n	80039fa <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80039f6:	2303      	movs	r3, #3
 80039f8:	e04d      	b.n	8003a96 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80039fa:	4b06      	ldr	r3, [pc, #24]	@ (8003a14 <HAL_RCC_OscConfig+0x4ac>)
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d1f0      	bne.n	80039e8 <HAL_RCC_OscConfig+0x480>
 8003a06:	e045      	b.n	8003a94 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	699b      	ldr	r3, [r3, #24]
 8003a0c:	2b01      	cmp	r3, #1
 8003a0e:	d107      	bne.n	8003a20 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8003a10:	2301      	movs	r3, #1
 8003a12:	e040      	b.n	8003a96 <HAL_RCC_OscConfig+0x52e>
 8003a14:	40023800 	.word	0x40023800
 8003a18:	40007000 	.word	0x40007000
 8003a1c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003a20:	4b1f      	ldr	r3, [pc, #124]	@ (8003aa0 <HAL_RCC_OscConfig+0x538>)
 8003a22:	685b      	ldr	r3, [r3, #4]
 8003a24:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	699b      	ldr	r3, [r3, #24]
 8003a2a:	2b01      	cmp	r3, #1
 8003a2c:	d030      	beq.n	8003a90 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003a38:	429a      	cmp	r2, r3
 8003a3a:	d129      	bne.n	8003a90 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a46:	429a      	cmp	r2, r3
 8003a48:	d122      	bne.n	8003a90 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003a4a:	68fa      	ldr	r2, [r7, #12]
 8003a4c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003a50:	4013      	ands	r3, r2
 8003a52:	687a      	ldr	r2, [r7, #4]
 8003a54:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003a56:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003a58:	4293      	cmp	r3, r2
 8003a5a:	d119      	bne.n	8003a90 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a66:	085b      	lsrs	r3, r3, #1
 8003a68:	3b01      	subs	r3, #1
 8003a6a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003a6c:	429a      	cmp	r2, r3
 8003a6e:	d10f      	bne.n	8003a90 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a7a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003a7c:	429a      	cmp	r2, r3
 8003a7e:	d107      	bne.n	8003a90 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a8a:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003a8c:	429a      	cmp	r2, r3
 8003a8e:	d001      	beq.n	8003a94 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003a90:	2301      	movs	r3, #1
 8003a92:	e000      	b.n	8003a96 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8003a94:	2300      	movs	r3, #0
}
 8003a96:	4618      	mov	r0, r3
 8003a98:	3718      	adds	r7, #24
 8003a9a:	46bd      	mov	sp, r7
 8003a9c:	bd80      	pop	{r7, pc}
 8003a9e:	bf00      	nop
 8003aa0:	40023800 	.word	0x40023800

08003aa4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003aa4:	b580      	push	{r7, lr}
 8003aa6:	b082      	sub	sp, #8
 8003aa8:	af00      	add	r7, sp, #0
 8003aaa:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d101      	bne.n	8003ab6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003ab2:	2301      	movs	r3, #1
 8003ab4:	e07b      	b.n	8003bae <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d108      	bne.n	8003ad0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	685b      	ldr	r3, [r3, #4]
 8003ac2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003ac6:	d009      	beq.n	8003adc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	2200      	movs	r2, #0
 8003acc:	61da      	str	r2, [r3, #28]
 8003ace:	e005      	b.n	8003adc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	2200      	movs	r2, #0
 8003ad4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	2200      	movs	r2, #0
 8003ada:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	2200      	movs	r2, #0
 8003ae0:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003ae8:	b2db      	uxtb	r3, r3
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d106      	bne.n	8003afc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	2200      	movs	r2, #0
 8003af2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003af6:	6878      	ldr	r0, [r7, #4]
 8003af8:	f7fe f820 	bl	8001b3c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	2202      	movs	r2, #2
 8003b00:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	681a      	ldr	r2, [r3, #0]
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003b12:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	685b      	ldr	r3, [r3, #4]
 8003b18:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	689b      	ldr	r3, [r3, #8]
 8003b20:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8003b24:	431a      	orrs	r2, r3
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	68db      	ldr	r3, [r3, #12]
 8003b2a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003b2e:	431a      	orrs	r2, r3
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	691b      	ldr	r3, [r3, #16]
 8003b34:	f003 0302 	and.w	r3, r3, #2
 8003b38:	431a      	orrs	r2, r3
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	695b      	ldr	r3, [r3, #20]
 8003b3e:	f003 0301 	and.w	r3, r3, #1
 8003b42:	431a      	orrs	r2, r3
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	699b      	ldr	r3, [r3, #24]
 8003b48:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003b4c:	431a      	orrs	r2, r3
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	69db      	ldr	r3, [r3, #28]
 8003b52:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003b56:	431a      	orrs	r2, r3
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	6a1b      	ldr	r3, [r3, #32]
 8003b5c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003b60:	ea42 0103 	orr.w	r1, r2, r3
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b68:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	430a      	orrs	r2, r1
 8003b72:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	699b      	ldr	r3, [r3, #24]
 8003b78:	0c1b      	lsrs	r3, r3, #16
 8003b7a:	f003 0104 	and.w	r1, r3, #4
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b82:	f003 0210 	and.w	r2, r3, #16
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	430a      	orrs	r2, r1
 8003b8c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	69da      	ldr	r2, [r3, #28]
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003b9c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	2200      	movs	r2, #0
 8003ba2:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	2201      	movs	r2, #1
 8003ba8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8003bac:	2300      	movs	r3, #0
}
 8003bae:	4618      	mov	r0, r3
 8003bb0:	3708      	adds	r7, #8
 8003bb2:	46bd      	mov	sp, r7
 8003bb4:	bd80      	pop	{r7, pc}

08003bb6 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003bb6:	b580      	push	{r7, lr}
 8003bb8:	b088      	sub	sp, #32
 8003bba:	af00      	add	r7, sp, #0
 8003bbc:	60f8      	str	r0, [r7, #12]
 8003bbe:	60b9      	str	r1, [r7, #8]
 8003bc0:	603b      	str	r3, [r7, #0]
 8003bc2:	4613      	mov	r3, r2
 8003bc4:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003bc6:	f7fe fa9f 	bl	8002108 <HAL_GetTick>
 8003bca:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8003bcc:	88fb      	ldrh	r3, [r7, #6]
 8003bce:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003bd6:	b2db      	uxtb	r3, r3
 8003bd8:	2b01      	cmp	r3, #1
 8003bda:	d001      	beq.n	8003be0 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8003bdc:	2302      	movs	r3, #2
 8003bde:	e12a      	b.n	8003e36 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8003be0:	68bb      	ldr	r3, [r7, #8]
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d002      	beq.n	8003bec <HAL_SPI_Transmit+0x36>
 8003be6:	88fb      	ldrh	r3, [r7, #6]
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d101      	bne.n	8003bf0 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8003bec:	2301      	movs	r3, #1
 8003bee:	e122      	b.n	8003e36 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003bf6:	2b01      	cmp	r3, #1
 8003bf8:	d101      	bne.n	8003bfe <HAL_SPI_Transmit+0x48>
 8003bfa:	2302      	movs	r3, #2
 8003bfc:	e11b      	b.n	8003e36 <HAL_SPI_Transmit+0x280>
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	2201      	movs	r2, #1
 8003c02:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	2203      	movs	r2, #3
 8003c0a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	2200      	movs	r2, #0
 8003c12:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	68ba      	ldr	r2, [r7, #8]
 8003c18:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	88fa      	ldrh	r2, [r7, #6]
 8003c1e:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	88fa      	ldrh	r2, [r7, #6]
 8003c24:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	2200      	movs	r2, #0
 8003c2a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	2200      	movs	r2, #0
 8003c30:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	2200      	movs	r2, #0
 8003c36:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	2200      	movs	r2, #0
 8003c3c:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	2200      	movs	r2, #0
 8003c42:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	689b      	ldr	r3, [r3, #8]
 8003c48:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003c4c:	d10f      	bne.n	8003c6e <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	681a      	ldr	r2, [r3, #0]
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003c5c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	681a      	ldr	r2, [r3, #0]
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003c6c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c78:	2b40      	cmp	r3, #64	@ 0x40
 8003c7a:	d007      	beq.n	8003c8c <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	681a      	ldr	r2, [r3, #0]
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003c8a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	68db      	ldr	r3, [r3, #12]
 8003c90:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003c94:	d152      	bne.n	8003d3c <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	685b      	ldr	r3, [r3, #4]
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d002      	beq.n	8003ca4 <HAL_SPI_Transmit+0xee>
 8003c9e:	8b7b      	ldrh	r3, [r7, #26]
 8003ca0:	2b01      	cmp	r3, #1
 8003ca2:	d145      	bne.n	8003d30 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ca8:	881a      	ldrh	r2, [r3, #0]
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003cb4:	1c9a      	adds	r2, r3, #2
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003cbe:	b29b      	uxth	r3, r3
 8003cc0:	3b01      	subs	r3, #1
 8003cc2:	b29a      	uxth	r2, r3
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003cc8:	e032      	b.n	8003d30 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	689b      	ldr	r3, [r3, #8]
 8003cd0:	f003 0302 	and.w	r3, r3, #2
 8003cd4:	2b02      	cmp	r3, #2
 8003cd6:	d112      	bne.n	8003cfe <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003cdc:	881a      	ldrh	r2, [r3, #0]
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ce8:	1c9a      	adds	r2, r3, #2
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003cf2:	b29b      	uxth	r3, r3
 8003cf4:	3b01      	subs	r3, #1
 8003cf6:	b29a      	uxth	r2, r3
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	86da      	strh	r2, [r3, #54]	@ 0x36
 8003cfc:	e018      	b.n	8003d30 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003cfe:	f7fe fa03 	bl	8002108 <HAL_GetTick>
 8003d02:	4602      	mov	r2, r0
 8003d04:	69fb      	ldr	r3, [r7, #28]
 8003d06:	1ad3      	subs	r3, r2, r3
 8003d08:	683a      	ldr	r2, [r7, #0]
 8003d0a:	429a      	cmp	r2, r3
 8003d0c:	d803      	bhi.n	8003d16 <HAL_SPI_Transmit+0x160>
 8003d0e:	683b      	ldr	r3, [r7, #0]
 8003d10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d14:	d102      	bne.n	8003d1c <HAL_SPI_Transmit+0x166>
 8003d16:	683b      	ldr	r3, [r7, #0]
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d109      	bne.n	8003d30 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	2201      	movs	r2, #1
 8003d20:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	2200      	movs	r2, #0
 8003d28:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8003d2c:	2303      	movs	r3, #3
 8003d2e:	e082      	b.n	8003e36 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003d34:	b29b      	uxth	r3, r3
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d1c7      	bne.n	8003cca <HAL_SPI_Transmit+0x114>
 8003d3a:	e053      	b.n	8003de4 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	685b      	ldr	r3, [r3, #4]
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d002      	beq.n	8003d4a <HAL_SPI_Transmit+0x194>
 8003d44:	8b7b      	ldrh	r3, [r7, #26]
 8003d46:	2b01      	cmp	r3, #1
 8003d48:	d147      	bne.n	8003dda <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	330c      	adds	r3, #12
 8003d54:	7812      	ldrb	r2, [r2, #0]
 8003d56:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d5c:	1c5a      	adds	r2, r3, #1
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003d66:	b29b      	uxth	r3, r3
 8003d68:	3b01      	subs	r3, #1
 8003d6a:	b29a      	uxth	r2, r3
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003d70:	e033      	b.n	8003dda <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	689b      	ldr	r3, [r3, #8]
 8003d78:	f003 0302 	and.w	r3, r3, #2
 8003d7c:	2b02      	cmp	r3, #2
 8003d7e:	d113      	bne.n	8003da8 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	330c      	adds	r3, #12
 8003d8a:	7812      	ldrb	r2, [r2, #0]
 8003d8c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d92:	1c5a      	adds	r2, r3, #1
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003d9c:	b29b      	uxth	r3, r3
 8003d9e:	3b01      	subs	r3, #1
 8003da0:	b29a      	uxth	r2, r3
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	86da      	strh	r2, [r3, #54]	@ 0x36
 8003da6:	e018      	b.n	8003dda <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003da8:	f7fe f9ae 	bl	8002108 <HAL_GetTick>
 8003dac:	4602      	mov	r2, r0
 8003dae:	69fb      	ldr	r3, [r7, #28]
 8003db0:	1ad3      	subs	r3, r2, r3
 8003db2:	683a      	ldr	r2, [r7, #0]
 8003db4:	429a      	cmp	r2, r3
 8003db6:	d803      	bhi.n	8003dc0 <HAL_SPI_Transmit+0x20a>
 8003db8:	683b      	ldr	r3, [r7, #0]
 8003dba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003dbe:	d102      	bne.n	8003dc6 <HAL_SPI_Transmit+0x210>
 8003dc0:	683b      	ldr	r3, [r7, #0]
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d109      	bne.n	8003dda <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	2201      	movs	r2, #1
 8003dca:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	2200      	movs	r2, #0
 8003dd2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8003dd6:	2303      	movs	r3, #3
 8003dd8:	e02d      	b.n	8003e36 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003dde:	b29b      	uxth	r3, r3
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d1c6      	bne.n	8003d72 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003de4:	69fa      	ldr	r2, [r7, #28]
 8003de6:	6839      	ldr	r1, [r7, #0]
 8003de8:	68f8      	ldr	r0, [r7, #12]
 8003dea:	f000 fbd9 	bl	80045a0 <SPI_EndRxTxTransaction>
 8003dee:	4603      	mov	r3, r0
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d002      	beq.n	8003dfa <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	2220      	movs	r2, #32
 8003df8:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	689b      	ldr	r3, [r3, #8]
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d10a      	bne.n	8003e18 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003e02:	2300      	movs	r3, #0
 8003e04:	617b      	str	r3, [r7, #20]
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	68db      	ldr	r3, [r3, #12]
 8003e0c:	617b      	str	r3, [r7, #20]
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	689b      	ldr	r3, [r3, #8]
 8003e14:	617b      	str	r3, [r7, #20]
 8003e16:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	2201      	movs	r2, #1
 8003e1c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	2200      	movs	r2, #0
 8003e24:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d001      	beq.n	8003e34 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8003e30:	2301      	movs	r3, #1
 8003e32:	e000      	b.n	8003e36 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8003e34:	2300      	movs	r3, #0
  }
}
 8003e36:	4618      	mov	r0, r3
 8003e38:	3720      	adds	r7, #32
 8003e3a:	46bd      	mov	sp, r7
 8003e3c:	bd80      	pop	{r7, pc}

08003e3e <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003e3e:	b580      	push	{r7, lr}
 8003e40:	b088      	sub	sp, #32
 8003e42:	af02      	add	r7, sp, #8
 8003e44:	60f8      	str	r0, [r7, #12]
 8003e46:	60b9      	str	r1, [r7, #8]
 8003e48:	603b      	str	r3, [r7, #0]
 8003e4a:	4613      	mov	r3, r2
 8003e4c:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003e54:	b2db      	uxtb	r3, r3
 8003e56:	2b01      	cmp	r3, #1
 8003e58:	d001      	beq.n	8003e5e <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 8003e5a:	2302      	movs	r3, #2
 8003e5c:	e104      	b.n	8004068 <HAL_SPI_Receive+0x22a>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	685b      	ldr	r3, [r3, #4]
 8003e62:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003e66:	d112      	bne.n	8003e8e <HAL_SPI_Receive+0x50>
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	689b      	ldr	r3, [r3, #8]
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d10e      	bne.n	8003e8e <HAL_SPI_Receive+0x50>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	2204      	movs	r2, #4
 8003e74:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8003e78:	88fa      	ldrh	r2, [r7, #6]
 8003e7a:	683b      	ldr	r3, [r7, #0]
 8003e7c:	9300      	str	r3, [sp, #0]
 8003e7e:	4613      	mov	r3, r2
 8003e80:	68ba      	ldr	r2, [r7, #8]
 8003e82:	68b9      	ldr	r1, [r7, #8]
 8003e84:	68f8      	ldr	r0, [r7, #12]
 8003e86:	f000 f8f3 	bl	8004070 <HAL_SPI_TransmitReceive>
 8003e8a:	4603      	mov	r3, r0
 8003e8c:	e0ec      	b.n	8004068 <HAL_SPI_Receive+0x22a>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003e8e:	f7fe f93b 	bl	8002108 <HAL_GetTick>
 8003e92:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 8003e94:	68bb      	ldr	r3, [r7, #8]
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d002      	beq.n	8003ea0 <HAL_SPI_Receive+0x62>
 8003e9a:	88fb      	ldrh	r3, [r7, #6]
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d101      	bne.n	8003ea4 <HAL_SPI_Receive+0x66>
  {
    return HAL_ERROR;
 8003ea0:	2301      	movs	r3, #1
 8003ea2:	e0e1      	b.n	8004068 <HAL_SPI_Receive+0x22a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003eaa:	2b01      	cmp	r3, #1
 8003eac:	d101      	bne.n	8003eb2 <HAL_SPI_Receive+0x74>
 8003eae:	2302      	movs	r3, #2
 8003eb0:	e0da      	b.n	8004068 <HAL_SPI_Receive+0x22a>
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	2201      	movs	r2, #1
 8003eb6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	2204      	movs	r2, #4
 8003ebe:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	2200      	movs	r2, #0
 8003ec6:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	68ba      	ldr	r2, [r7, #8]
 8003ecc:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	88fa      	ldrh	r2, [r7, #6]
 8003ed2:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	88fa      	ldrh	r2, [r7, #6]
 8003ed8:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	2200      	movs	r2, #0
 8003ede:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	2200      	movs	r2, #0
 8003ee4:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	2200      	movs	r2, #0
 8003eea:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	2200      	movs	r2, #0
 8003ef0:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	2200      	movs	r2, #0
 8003ef6:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	689b      	ldr	r3, [r3, #8]
 8003efc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003f00:	d10f      	bne.n	8003f22 <HAL_SPI_Receive+0xe4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	681a      	ldr	r2, [r3, #0]
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003f10:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	681a      	ldr	r2, [r3, #0]
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8003f20:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f2c:	2b40      	cmp	r3, #64	@ 0x40
 8003f2e:	d007      	beq.n	8003f40 <HAL_SPI_Receive+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	681a      	ldr	r2, [r3, #0]
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003f3e:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	68db      	ldr	r3, [r3, #12]
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d170      	bne.n	800402a <HAL_SPI_Receive+0x1ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8003f48:	e035      	b.n	8003fb6 <HAL_SPI_Receive+0x178>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	689b      	ldr	r3, [r3, #8]
 8003f50:	f003 0301 	and.w	r3, r3, #1
 8003f54:	2b01      	cmp	r3, #1
 8003f56:	d115      	bne.n	8003f84 <HAL_SPI_Receive+0x146>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	f103 020c 	add.w	r2, r3, #12
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f64:	7812      	ldrb	r2, [r2, #0]
 8003f66:	b2d2      	uxtb	r2, r2
 8003f68:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f6e:	1c5a      	adds	r2, r3, #1
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003f78:	b29b      	uxth	r3, r3
 8003f7a:	3b01      	subs	r3, #1
 8003f7c:	b29a      	uxth	r2, r3
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003f82:	e018      	b.n	8003fb6 <HAL_SPI_Receive+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003f84:	f7fe f8c0 	bl	8002108 <HAL_GetTick>
 8003f88:	4602      	mov	r2, r0
 8003f8a:	697b      	ldr	r3, [r7, #20]
 8003f8c:	1ad3      	subs	r3, r2, r3
 8003f8e:	683a      	ldr	r2, [r7, #0]
 8003f90:	429a      	cmp	r2, r3
 8003f92:	d803      	bhi.n	8003f9c <HAL_SPI_Receive+0x15e>
 8003f94:	683b      	ldr	r3, [r7, #0]
 8003f96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f9a:	d102      	bne.n	8003fa2 <HAL_SPI_Receive+0x164>
 8003f9c:	683b      	ldr	r3, [r7, #0]
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d109      	bne.n	8003fb6 <HAL_SPI_Receive+0x178>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	2201      	movs	r2, #1
 8003fa6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	2200      	movs	r2, #0
 8003fae:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8003fb2:	2303      	movs	r3, #3
 8003fb4:	e058      	b.n	8004068 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003fba:	b29b      	uxth	r3, r3
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d1c4      	bne.n	8003f4a <HAL_SPI_Receive+0x10c>
 8003fc0:	e038      	b.n	8004034 <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	689b      	ldr	r3, [r3, #8]
 8003fc8:	f003 0301 	and.w	r3, r3, #1
 8003fcc:	2b01      	cmp	r3, #1
 8003fce:	d113      	bne.n	8003ff8 <HAL_SPI_Receive+0x1ba>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	68da      	ldr	r2, [r3, #12]
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003fda:	b292      	uxth	r2, r2
 8003fdc:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003fe2:	1c9a      	adds	r2, r3, #2
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003fec:	b29b      	uxth	r3, r3
 8003fee:	3b01      	subs	r3, #1
 8003ff0:	b29a      	uxth	r2, r3
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003ff6:	e018      	b.n	800402a <HAL_SPI_Receive+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003ff8:	f7fe f886 	bl	8002108 <HAL_GetTick>
 8003ffc:	4602      	mov	r2, r0
 8003ffe:	697b      	ldr	r3, [r7, #20]
 8004000:	1ad3      	subs	r3, r2, r3
 8004002:	683a      	ldr	r2, [r7, #0]
 8004004:	429a      	cmp	r2, r3
 8004006:	d803      	bhi.n	8004010 <HAL_SPI_Receive+0x1d2>
 8004008:	683b      	ldr	r3, [r7, #0]
 800400a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800400e:	d102      	bne.n	8004016 <HAL_SPI_Receive+0x1d8>
 8004010:	683b      	ldr	r3, [r7, #0]
 8004012:	2b00      	cmp	r3, #0
 8004014:	d109      	bne.n	800402a <HAL_SPI_Receive+0x1ec>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	2201      	movs	r2, #1
 800401a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	2200      	movs	r2, #0
 8004022:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8004026:	2303      	movs	r3, #3
 8004028:	e01e      	b.n	8004068 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800402e:	b29b      	uxth	r3, r3
 8004030:	2b00      	cmp	r3, #0
 8004032:	d1c6      	bne.n	8003fc2 <HAL_SPI_Receive+0x184>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004034:	697a      	ldr	r2, [r7, #20]
 8004036:	6839      	ldr	r1, [r7, #0]
 8004038:	68f8      	ldr	r0, [r7, #12]
 800403a:	f000 fa4b 	bl	80044d4 <SPI_EndRxTransaction>
 800403e:	4603      	mov	r3, r0
 8004040:	2b00      	cmp	r3, #0
 8004042:	d002      	beq.n	800404a <HAL_SPI_Receive+0x20c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	2220      	movs	r2, #32
 8004048:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	2201      	movs	r2, #1
 800404e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	2200      	movs	r2, #0
 8004056:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800405e:	2b00      	cmp	r3, #0
 8004060:	d001      	beq.n	8004066 <HAL_SPI_Receive+0x228>
  {
    return HAL_ERROR;
 8004062:	2301      	movs	r3, #1
 8004064:	e000      	b.n	8004068 <HAL_SPI_Receive+0x22a>
  }
  else
  {
    return HAL_OK;
 8004066:	2300      	movs	r3, #0
  }
}
 8004068:	4618      	mov	r0, r3
 800406a:	3718      	adds	r7, #24
 800406c:	46bd      	mov	sp, r7
 800406e:	bd80      	pop	{r7, pc}

08004070 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8004070:	b580      	push	{r7, lr}
 8004072:	b08a      	sub	sp, #40	@ 0x28
 8004074:	af00      	add	r7, sp, #0
 8004076:	60f8      	str	r0, [r7, #12]
 8004078:	60b9      	str	r1, [r7, #8]
 800407a:	607a      	str	r2, [r7, #4]
 800407c:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800407e:	2301      	movs	r3, #1
 8004080:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004082:	f7fe f841 	bl	8002108 <HAL_GetTick>
 8004086:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800408e:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	685b      	ldr	r3, [r3, #4]
 8004094:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8004096:	887b      	ldrh	r3, [r7, #2]
 8004098:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800409a:	7ffb      	ldrb	r3, [r7, #31]
 800409c:	2b01      	cmp	r3, #1
 800409e:	d00c      	beq.n	80040ba <HAL_SPI_TransmitReceive+0x4a>
 80040a0:	69bb      	ldr	r3, [r7, #24]
 80040a2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80040a6:	d106      	bne.n	80040b6 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	689b      	ldr	r3, [r3, #8]
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d102      	bne.n	80040b6 <HAL_SPI_TransmitReceive+0x46>
 80040b0:	7ffb      	ldrb	r3, [r7, #31]
 80040b2:	2b04      	cmp	r3, #4
 80040b4:	d001      	beq.n	80040ba <HAL_SPI_TransmitReceive+0x4a>
  {
    return HAL_BUSY;
 80040b6:	2302      	movs	r3, #2
 80040b8:	e17f      	b.n	80043ba <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80040ba:	68bb      	ldr	r3, [r7, #8]
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d005      	beq.n	80040cc <HAL_SPI_TransmitReceive+0x5c>
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d002      	beq.n	80040cc <HAL_SPI_TransmitReceive+0x5c>
 80040c6:	887b      	ldrh	r3, [r7, #2]
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d101      	bne.n	80040d0 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 80040cc:	2301      	movs	r3, #1
 80040ce:	e174      	b.n	80043ba <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80040d6:	2b01      	cmp	r3, #1
 80040d8:	d101      	bne.n	80040de <HAL_SPI_TransmitReceive+0x6e>
 80040da:	2302      	movs	r3, #2
 80040dc:	e16d      	b.n	80043ba <HAL_SPI_TransmitReceive+0x34a>
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	2201      	movs	r2, #1
 80040e2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80040ec:	b2db      	uxtb	r3, r3
 80040ee:	2b04      	cmp	r3, #4
 80040f0:	d003      	beq.n	80040fa <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	2205      	movs	r2, #5
 80040f6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	2200      	movs	r2, #0
 80040fe:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	687a      	ldr	r2, [r7, #4]
 8004104:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	887a      	ldrh	r2, [r7, #2]
 800410a:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	887a      	ldrh	r2, [r7, #2]
 8004110:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	68ba      	ldr	r2, [r7, #8]
 8004116:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	887a      	ldrh	r2, [r7, #2]
 800411c:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	887a      	ldrh	r2, [r7, #2]
 8004122:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	2200      	movs	r2, #0
 8004128:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	2200      	movs	r2, #0
 800412e:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800413a:	2b40      	cmp	r3, #64	@ 0x40
 800413c:	d007      	beq.n	800414e <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	681a      	ldr	r2, [r3, #0]
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800414c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	68db      	ldr	r3, [r3, #12]
 8004152:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004156:	d17e      	bne.n	8004256 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	685b      	ldr	r3, [r3, #4]
 800415c:	2b00      	cmp	r3, #0
 800415e:	d002      	beq.n	8004166 <HAL_SPI_TransmitReceive+0xf6>
 8004160:	8afb      	ldrh	r3, [r7, #22]
 8004162:	2b01      	cmp	r3, #1
 8004164:	d16c      	bne.n	8004240 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800416a:	881a      	ldrh	r2, [r3, #0]
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004176:	1c9a      	adds	r2, r3, #2
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004180:	b29b      	uxth	r3, r3
 8004182:	3b01      	subs	r3, #1
 8004184:	b29a      	uxth	r2, r3
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800418a:	e059      	b.n	8004240 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	689b      	ldr	r3, [r3, #8]
 8004192:	f003 0302 	and.w	r3, r3, #2
 8004196:	2b02      	cmp	r3, #2
 8004198:	d11b      	bne.n	80041d2 <HAL_SPI_TransmitReceive+0x162>
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800419e:	b29b      	uxth	r3, r3
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d016      	beq.n	80041d2 <HAL_SPI_TransmitReceive+0x162>
 80041a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041a6:	2b01      	cmp	r3, #1
 80041a8:	d113      	bne.n	80041d2 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80041ae:	881a      	ldrh	r2, [r3, #0]
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80041ba:	1c9a      	adds	r2, r3, #2
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80041c4:	b29b      	uxth	r3, r3
 80041c6:	3b01      	subs	r3, #1
 80041c8:	b29a      	uxth	r2, r3
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80041ce:	2300      	movs	r3, #0
 80041d0:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	689b      	ldr	r3, [r3, #8]
 80041d8:	f003 0301 	and.w	r3, r3, #1
 80041dc:	2b01      	cmp	r3, #1
 80041de:	d119      	bne.n	8004214 <HAL_SPI_TransmitReceive+0x1a4>
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80041e4:	b29b      	uxth	r3, r3
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d014      	beq.n	8004214 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	68da      	ldr	r2, [r3, #12]
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80041f4:	b292      	uxth	r2, r2
 80041f6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80041fc:	1c9a      	adds	r2, r3, #2
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004206:	b29b      	uxth	r3, r3
 8004208:	3b01      	subs	r3, #1
 800420a:	b29a      	uxth	r2, r3
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004210:	2301      	movs	r3, #1
 8004212:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004214:	f7fd ff78 	bl	8002108 <HAL_GetTick>
 8004218:	4602      	mov	r2, r0
 800421a:	6a3b      	ldr	r3, [r7, #32]
 800421c:	1ad3      	subs	r3, r2, r3
 800421e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004220:	429a      	cmp	r2, r3
 8004222:	d80d      	bhi.n	8004240 <HAL_SPI_TransmitReceive+0x1d0>
 8004224:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004226:	f1b3 3fff 	cmp.w	r3, #4294967295
 800422a:	d009      	beq.n	8004240 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	2201      	movs	r2, #1
 8004230:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	2200      	movs	r2, #0
 8004238:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 800423c:	2303      	movs	r3, #3
 800423e:	e0bc      	b.n	80043ba <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004244:	b29b      	uxth	r3, r3
 8004246:	2b00      	cmp	r3, #0
 8004248:	d1a0      	bne.n	800418c <HAL_SPI_TransmitReceive+0x11c>
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800424e:	b29b      	uxth	r3, r3
 8004250:	2b00      	cmp	r3, #0
 8004252:	d19b      	bne.n	800418c <HAL_SPI_TransmitReceive+0x11c>
 8004254:	e082      	b.n	800435c <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	685b      	ldr	r3, [r3, #4]
 800425a:	2b00      	cmp	r3, #0
 800425c:	d002      	beq.n	8004264 <HAL_SPI_TransmitReceive+0x1f4>
 800425e:	8afb      	ldrh	r3, [r7, #22]
 8004260:	2b01      	cmp	r3, #1
 8004262:	d171      	bne.n	8004348 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	330c      	adds	r3, #12
 800426e:	7812      	ldrb	r2, [r2, #0]
 8004270:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004276:	1c5a      	adds	r2, r3, #1
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004280:	b29b      	uxth	r3, r3
 8004282:	3b01      	subs	r3, #1
 8004284:	b29a      	uxth	r2, r3
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800428a:	e05d      	b.n	8004348 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	689b      	ldr	r3, [r3, #8]
 8004292:	f003 0302 	and.w	r3, r3, #2
 8004296:	2b02      	cmp	r3, #2
 8004298:	d11c      	bne.n	80042d4 <HAL_SPI_TransmitReceive+0x264>
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800429e:	b29b      	uxth	r3, r3
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d017      	beq.n	80042d4 <HAL_SPI_TransmitReceive+0x264>
 80042a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042a6:	2b01      	cmp	r3, #1
 80042a8:	d114      	bne.n	80042d4 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	330c      	adds	r3, #12
 80042b4:	7812      	ldrb	r2, [r2, #0]
 80042b6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80042bc:	1c5a      	adds	r2, r3, #1
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80042c6:	b29b      	uxth	r3, r3
 80042c8:	3b01      	subs	r3, #1
 80042ca:	b29a      	uxth	r2, r3
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80042d0:	2300      	movs	r3, #0
 80042d2:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	689b      	ldr	r3, [r3, #8]
 80042da:	f003 0301 	and.w	r3, r3, #1
 80042de:	2b01      	cmp	r3, #1
 80042e0:	d119      	bne.n	8004316 <HAL_SPI_TransmitReceive+0x2a6>
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80042e6:	b29b      	uxth	r3, r3
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d014      	beq.n	8004316 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	68da      	ldr	r2, [r3, #12]
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80042f6:	b2d2      	uxtb	r2, r2
 80042f8:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80042fe:	1c5a      	adds	r2, r3, #1
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004308:	b29b      	uxth	r3, r3
 800430a:	3b01      	subs	r3, #1
 800430c:	b29a      	uxth	r2, r3
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004312:	2301      	movs	r3, #1
 8004314:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004316:	f7fd fef7 	bl	8002108 <HAL_GetTick>
 800431a:	4602      	mov	r2, r0
 800431c:	6a3b      	ldr	r3, [r7, #32]
 800431e:	1ad3      	subs	r3, r2, r3
 8004320:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004322:	429a      	cmp	r2, r3
 8004324:	d803      	bhi.n	800432e <HAL_SPI_TransmitReceive+0x2be>
 8004326:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004328:	f1b3 3fff 	cmp.w	r3, #4294967295
 800432c:	d102      	bne.n	8004334 <HAL_SPI_TransmitReceive+0x2c4>
 800432e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004330:	2b00      	cmp	r3, #0
 8004332:	d109      	bne.n	8004348 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	2201      	movs	r2, #1
 8004338:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	2200      	movs	r2, #0
 8004340:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8004344:	2303      	movs	r3, #3
 8004346:	e038      	b.n	80043ba <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800434c:	b29b      	uxth	r3, r3
 800434e:	2b00      	cmp	r3, #0
 8004350:	d19c      	bne.n	800428c <HAL_SPI_TransmitReceive+0x21c>
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004356:	b29b      	uxth	r3, r3
 8004358:	2b00      	cmp	r3, #0
 800435a:	d197      	bne.n	800428c <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800435c:	6a3a      	ldr	r2, [r7, #32]
 800435e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8004360:	68f8      	ldr	r0, [r7, #12]
 8004362:	f000 f91d 	bl	80045a0 <SPI_EndRxTxTransaction>
 8004366:	4603      	mov	r3, r0
 8004368:	2b00      	cmp	r3, #0
 800436a:	d008      	beq.n	800437e <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	2220      	movs	r2, #32
 8004370:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	2200      	movs	r2, #0
 8004376:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 800437a:	2301      	movs	r3, #1
 800437c:	e01d      	b.n	80043ba <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	689b      	ldr	r3, [r3, #8]
 8004382:	2b00      	cmp	r3, #0
 8004384:	d10a      	bne.n	800439c <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004386:	2300      	movs	r3, #0
 8004388:	613b      	str	r3, [r7, #16]
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	68db      	ldr	r3, [r3, #12]
 8004390:	613b      	str	r3, [r7, #16]
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	689b      	ldr	r3, [r3, #8]
 8004398:	613b      	str	r3, [r7, #16]
 800439a:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	2201      	movs	r2, #1
 80043a0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	2200      	movs	r2, #0
 80043a8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d001      	beq.n	80043b8 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 80043b4:	2301      	movs	r3, #1
 80043b6:	e000      	b.n	80043ba <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 80043b8:	2300      	movs	r3, #0
  }
}
 80043ba:	4618      	mov	r0, r3
 80043bc:	3728      	adds	r7, #40	@ 0x28
 80043be:	46bd      	mov	sp, r7
 80043c0:	bd80      	pop	{r7, pc}
	...

080043c4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80043c4:	b580      	push	{r7, lr}
 80043c6:	b088      	sub	sp, #32
 80043c8:	af00      	add	r7, sp, #0
 80043ca:	60f8      	str	r0, [r7, #12]
 80043cc:	60b9      	str	r1, [r7, #8]
 80043ce:	603b      	str	r3, [r7, #0]
 80043d0:	4613      	mov	r3, r2
 80043d2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80043d4:	f7fd fe98 	bl	8002108 <HAL_GetTick>
 80043d8:	4602      	mov	r2, r0
 80043da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80043dc:	1a9b      	subs	r3, r3, r2
 80043de:	683a      	ldr	r2, [r7, #0]
 80043e0:	4413      	add	r3, r2
 80043e2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80043e4:	f7fd fe90 	bl	8002108 <HAL_GetTick>
 80043e8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80043ea:	4b39      	ldr	r3, [pc, #228]	@ (80044d0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	015b      	lsls	r3, r3, #5
 80043f0:	0d1b      	lsrs	r3, r3, #20
 80043f2:	69fa      	ldr	r2, [r7, #28]
 80043f4:	fb02 f303 	mul.w	r3, r2, r3
 80043f8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80043fa:	e054      	b.n	80044a6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80043fc:	683b      	ldr	r3, [r7, #0]
 80043fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004402:	d050      	beq.n	80044a6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004404:	f7fd fe80 	bl	8002108 <HAL_GetTick>
 8004408:	4602      	mov	r2, r0
 800440a:	69bb      	ldr	r3, [r7, #24]
 800440c:	1ad3      	subs	r3, r2, r3
 800440e:	69fa      	ldr	r2, [r7, #28]
 8004410:	429a      	cmp	r2, r3
 8004412:	d902      	bls.n	800441a <SPI_WaitFlagStateUntilTimeout+0x56>
 8004414:	69fb      	ldr	r3, [r7, #28]
 8004416:	2b00      	cmp	r3, #0
 8004418:	d13d      	bne.n	8004496 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	685a      	ldr	r2, [r3, #4]
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8004428:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	685b      	ldr	r3, [r3, #4]
 800442e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004432:	d111      	bne.n	8004458 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	689b      	ldr	r3, [r3, #8]
 8004438:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800443c:	d004      	beq.n	8004448 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	689b      	ldr	r3, [r3, #8]
 8004442:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004446:	d107      	bne.n	8004458 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	681a      	ldr	r2, [r3, #0]
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004456:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800445c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004460:	d10f      	bne.n	8004482 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	681a      	ldr	r2, [r3, #0]
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004470:	601a      	str	r2, [r3, #0]
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	681a      	ldr	r2, [r3, #0]
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004480:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	2201      	movs	r2, #1
 8004486:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	2200      	movs	r2, #0
 800448e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8004492:	2303      	movs	r3, #3
 8004494:	e017      	b.n	80044c6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004496:	697b      	ldr	r3, [r7, #20]
 8004498:	2b00      	cmp	r3, #0
 800449a:	d101      	bne.n	80044a0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800449c:	2300      	movs	r3, #0
 800449e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80044a0:	697b      	ldr	r3, [r7, #20]
 80044a2:	3b01      	subs	r3, #1
 80044a4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	689a      	ldr	r2, [r3, #8]
 80044ac:	68bb      	ldr	r3, [r7, #8]
 80044ae:	4013      	ands	r3, r2
 80044b0:	68ba      	ldr	r2, [r7, #8]
 80044b2:	429a      	cmp	r2, r3
 80044b4:	bf0c      	ite	eq
 80044b6:	2301      	moveq	r3, #1
 80044b8:	2300      	movne	r3, #0
 80044ba:	b2db      	uxtb	r3, r3
 80044bc:	461a      	mov	r2, r3
 80044be:	79fb      	ldrb	r3, [r7, #7]
 80044c0:	429a      	cmp	r2, r3
 80044c2:	d19b      	bne.n	80043fc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80044c4:	2300      	movs	r3, #0
}
 80044c6:	4618      	mov	r0, r3
 80044c8:	3720      	adds	r7, #32
 80044ca:	46bd      	mov	sp, r7
 80044cc:	bd80      	pop	{r7, pc}
 80044ce:	bf00      	nop
 80044d0:	20000000 	.word	0x20000000

080044d4 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80044d4:	b580      	push	{r7, lr}
 80044d6:	b086      	sub	sp, #24
 80044d8:	af02      	add	r7, sp, #8
 80044da:	60f8      	str	r0, [r7, #12]
 80044dc:	60b9      	str	r1, [r7, #8]
 80044de:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	685b      	ldr	r3, [r3, #4]
 80044e4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80044e8:	d111      	bne.n	800450e <SPI_EndRxTransaction+0x3a>
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	689b      	ldr	r3, [r3, #8]
 80044ee:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80044f2:	d004      	beq.n	80044fe <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	689b      	ldr	r3, [r3, #8]
 80044f8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80044fc:	d107      	bne.n	800450e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	681a      	ldr	r2, [r3, #0]
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800450c:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	685b      	ldr	r3, [r3, #4]
 8004512:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004516:	d12a      	bne.n	800456e <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	689b      	ldr	r3, [r3, #8]
 800451c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004520:	d012      	beq.n	8004548 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	9300      	str	r3, [sp, #0]
 8004526:	68bb      	ldr	r3, [r7, #8]
 8004528:	2200      	movs	r2, #0
 800452a:	2180      	movs	r1, #128	@ 0x80
 800452c:	68f8      	ldr	r0, [r7, #12]
 800452e:	f7ff ff49 	bl	80043c4 <SPI_WaitFlagStateUntilTimeout>
 8004532:	4603      	mov	r3, r0
 8004534:	2b00      	cmp	r3, #0
 8004536:	d02d      	beq.n	8004594 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800453c:	f043 0220 	orr.w	r2, r3, #32
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8004544:	2303      	movs	r3, #3
 8004546:	e026      	b.n	8004596 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	9300      	str	r3, [sp, #0]
 800454c:	68bb      	ldr	r3, [r7, #8]
 800454e:	2200      	movs	r2, #0
 8004550:	2101      	movs	r1, #1
 8004552:	68f8      	ldr	r0, [r7, #12]
 8004554:	f7ff ff36 	bl	80043c4 <SPI_WaitFlagStateUntilTimeout>
 8004558:	4603      	mov	r3, r0
 800455a:	2b00      	cmp	r3, #0
 800455c:	d01a      	beq.n	8004594 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004562:	f043 0220 	orr.w	r2, r3, #32
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 800456a:	2303      	movs	r3, #3
 800456c:	e013      	b.n	8004596 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	9300      	str	r3, [sp, #0]
 8004572:	68bb      	ldr	r3, [r7, #8]
 8004574:	2200      	movs	r2, #0
 8004576:	2101      	movs	r1, #1
 8004578:	68f8      	ldr	r0, [r7, #12]
 800457a:	f7ff ff23 	bl	80043c4 <SPI_WaitFlagStateUntilTimeout>
 800457e:	4603      	mov	r3, r0
 8004580:	2b00      	cmp	r3, #0
 8004582:	d007      	beq.n	8004594 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004588:	f043 0220 	orr.w	r2, r3, #32
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8004590:	2303      	movs	r3, #3
 8004592:	e000      	b.n	8004596 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8004594:	2300      	movs	r3, #0
}
 8004596:	4618      	mov	r0, r3
 8004598:	3710      	adds	r7, #16
 800459a:	46bd      	mov	sp, r7
 800459c:	bd80      	pop	{r7, pc}
	...

080045a0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80045a0:	b580      	push	{r7, lr}
 80045a2:	b088      	sub	sp, #32
 80045a4:	af02      	add	r7, sp, #8
 80045a6:	60f8      	str	r0, [r7, #12]
 80045a8:	60b9      	str	r1, [r7, #8]
 80045aa:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	9300      	str	r3, [sp, #0]
 80045b0:	68bb      	ldr	r3, [r7, #8]
 80045b2:	2201      	movs	r2, #1
 80045b4:	2102      	movs	r1, #2
 80045b6:	68f8      	ldr	r0, [r7, #12]
 80045b8:	f7ff ff04 	bl	80043c4 <SPI_WaitFlagStateUntilTimeout>
 80045bc:	4603      	mov	r3, r0
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d007      	beq.n	80045d2 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80045c6:	f043 0220 	orr.w	r2, r3, #32
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 80045ce:	2303      	movs	r3, #3
 80045d0:	e032      	b.n	8004638 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80045d2:	4b1b      	ldr	r3, [pc, #108]	@ (8004640 <SPI_EndRxTxTransaction+0xa0>)
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	4a1b      	ldr	r2, [pc, #108]	@ (8004644 <SPI_EndRxTxTransaction+0xa4>)
 80045d8:	fba2 2303 	umull	r2, r3, r2, r3
 80045dc:	0d5b      	lsrs	r3, r3, #21
 80045de:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80045e2:	fb02 f303 	mul.w	r3, r2, r3
 80045e6:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	685b      	ldr	r3, [r3, #4]
 80045ec:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80045f0:	d112      	bne.n	8004618 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	9300      	str	r3, [sp, #0]
 80045f6:	68bb      	ldr	r3, [r7, #8]
 80045f8:	2200      	movs	r2, #0
 80045fa:	2180      	movs	r1, #128	@ 0x80
 80045fc:	68f8      	ldr	r0, [r7, #12]
 80045fe:	f7ff fee1 	bl	80043c4 <SPI_WaitFlagStateUntilTimeout>
 8004602:	4603      	mov	r3, r0
 8004604:	2b00      	cmp	r3, #0
 8004606:	d016      	beq.n	8004636 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800460c:	f043 0220 	orr.w	r2, r3, #32
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8004614:	2303      	movs	r3, #3
 8004616:	e00f      	b.n	8004638 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004618:	697b      	ldr	r3, [r7, #20]
 800461a:	2b00      	cmp	r3, #0
 800461c:	d00a      	beq.n	8004634 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 800461e:	697b      	ldr	r3, [r7, #20]
 8004620:	3b01      	subs	r3, #1
 8004622:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	689b      	ldr	r3, [r3, #8]
 800462a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800462e:	2b80      	cmp	r3, #128	@ 0x80
 8004630:	d0f2      	beq.n	8004618 <SPI_EndRxTxTransaction+0x78>
 8004632:	e000      	b.n	8004636 <SPI_EndRxTxTransaction+0x96>
        break;
 8004634:	bf00      	nop
  }

  return HAL_OK;
 8004636:	2300      	movs	r3, #0
}
 8004638:	4618      	mov	r0, r3
 800463a:	3718      	adds	r7, #24
 800463c:	46bd      	mov	sp, r7
 800463e:	bd80      	pop	{r7, pc}
 8004640:	20000000 	.word	0x20000000
 8004644:	165e9f81 	.word	0x165e9f81

08004648 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004648:	b580      	push	{r7, lr}
 800464a:	b082      	sub	sp, #8
 800464c:	af00      	add	r7, sp, #0
 800464e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	2b00      	cmp	r3, #0
 8004654:	d101      	bne.n	800465a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004656:	2301      	movs	r3, #1
 8004658:	e041      	b.n	80046de <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004660:	b2db      	uxtb	r3, r3
 8004662:	2b00      	cmp	r3, #0
 8004664:	d106      	bne.n	8004674 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	2200      	movs	r2, #0
 800466a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800466e:	6878      	ldr	r0, [r7, #4]
 8004670:	f7fd fabc 	bl	8001bec <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	2202      	movs	r2, #2
 8004678:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681a      	ldr	r2, [r3, #0]
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	3304      	adds	r3, #4
 8004684:	4619      	mov	r1, r3
 8004686:	4610      	mov	r0, r2
 8004688:	f000 fce8 	bl	800505c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	2201      	movs	r2, #1
 8004690:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	2201      	movs	r2, #1
 8004698:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	2201      	movs	r2, #1
 80046a0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	2201      	movs	r2, #1
 80046a8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	2201      	movs	r2, #1
 80046b0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	2201      	movs	r2, #1
 80046b8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	2201      	movs	r2, #1
 80046c0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	2201      	movs	r2, #1
 80046c8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	2201      	movs	r2, #1
 80046d0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	2201      	movs	r2, #1
 80046d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80046dc:	2300      	movs	r3, #0
}
 80046de:	4618      	mov	r0, r3
 80046e0:	3708      	adds	r7, #8
 80046e2:	46bd      	mov	sp, r7
 80046e4:	bd80      	pop	{r7, pc}
	...

080046e8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80046e8:	b480      	push	{r7}
 80046ea:	b085      	sub	sp, #20
 80046ec:	af00      	add	r7, sp, #0
 80046ee:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80046f6:	b2db      	uxtb	r3, r3
 80046f8:	2b01      	cmp	r3, #1
 80046fa:	d001      	beq.n	8004700 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80046fc:	2301      	movs	r3, #1
 80046fe:	e046      	b.n	800478e <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	2202      	movs	r2, #2
 8004704:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	4a23      	ldr	r2, [pc, #140]	@ (800479c <HAL_TIM_Base_Start+0xb4>)
 800470e:	4293      	cmp	r3, r2
 8004710:	d022      	beq.n	8004758 <HAL_TIM_Base_Start+0x70>
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800471a:	d01d      	beq.n	8004758 <HAL_TIM_Base_Start+0x70>
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	4a1f      	ldr	r2, [pc, #124]	@ (80047a0 <HAL_TIM_Base_Start+0xb8>)
 8004722:	4293      	cmp	r3, r2
 8004724:	d018      	beq.n	8004758 <HAL_TIM_Base_Start+0x70>
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	4a1e      	ldr	r2, [pc, #120]	@ (80047a4 <HAL_TIM_Base_Start+0xbc>)
 800472c:	4293      	cmp	r3, r2
 800472e:	d013      	beq.n	8004758 <HAL_TIM_Base_Start+0x70>
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	4a1c      	ldr	r2, [pc, #112]	@ (80047a8 <HAL_TIM_Base_Start+0xc0>)
 8004736:	4293      	cmp	r3, r2
 8004738:	d00e      	beq.n	8004758 <HAL_TIM_Base_Start+0x70>
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	4a1b      	ldr	r2, [pc, #108]	@ (80047ac <HAL_TIM_Base_Start+0xc4>)
 8004740:	4293      	cmp	r3, r2
 8004742:	d009      	beq.n	8004758 <HAL_TIM_Base_Start+0x70>
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	4a19      	ldr	r2, [pc, #100]	@ (80047b0 <HAL_TIM_Base_Start+0xc8>)
 800474a:	4293      	cmp	r3, r2
 800474c:	d004      	beq.n	8004758 <HAL_TIM_Base_Start+0x70>
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	4a18      	ldr	r2, [pc, #96]	@ (80047b4 <HAL_TIM_Base_Start+0xcc>)
 8004754:	4293      	cmp	r3, r2
 8004756:	d111      	bne.n	800477c <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	689b      	ldr	r3, [r3, #8]
 800475e:	f003 0307 	and.w	r3, r3, #7
 8004762:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	2b06      	cmp	r3, #6
 8004768:	d010      	beq.n	800478c <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	681a      	ldr	r2, [r3, #0]
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	f042 0201 	orr.w	r2, r2, #1
 8004778:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800477a:	e007      	b.n	800478c <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	681a      	ldr	r2, [r3, #0]
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	f042 0201 	orr.w	r2, r2, #1
 800478a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800478c:	2300      	movs	r3, #0
}
 800478e:	4618      	mov	r0, r3
 8004790:	3714      	adds	r7, #20
 8004792:	46bd      	mov	sp, r7
 8004794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004798:	4770      	bx	lr
 800479a:	bf00      	nop
 800479c:	40010000 	.word	0x40010000
 80047a0:	40000400 	.word	0x40000400
 80047a4:	40000800 	.word	0x40000800
 80047a8:	40000c00 	.word	0x40000c00
 80047ac:	40010400 	.word	0x40010400
 80047b0:	40014000 	.word	0x40014000
 80047b4:	40001800 	.word	0x40001800

080047b8 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 80047b8:	b480      	push	{r7}
 80047ba:	b083      	sub	sp, #12
 80047bc:	af00      	add	r7, sp, #0
 80047be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	6a1a      	ldr	r2, [r3, #32]
 80047c6:	f241 1311 	movw	r3, #4369	@ 0x1111
 80047ca:	4013      	ands	r3, r2
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d10f      	bne.n	80047f0 <HAL_TIM_Base_Stop+0x38>
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	6a1a      	ldr	r2, [r3, #32]
 80047d6:	f240 4344 	movw	r3, #1092	@ 0x444
 80047da:	4013      	ands	r3, r2
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d107      	bne.n	80047f0 <HAL_TIM_Base_Stop+0x38>
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	681a      	ldr	r2, [r3, #0]
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	f022 0201 	bic.w	r2, r2, #1
 80047ee:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	2201      	movs	r2, #1
 80047f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 80047f8:	2300      	movs	r3, #0
}
 80047fa:	4618      	mov	r0, r3
 80047fc:	370c      	adds	r7, #12
 80047fe:	46bd      	mov	sp, r7
 8004800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004804:	4770      	bx	lr
	...

08004808 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004808:	b480      	push	{r7}
 800480a:	b085      	sub	sp, #20
 800480c:	af00      	add	r7, sp, #0
 800480e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004816:	b2db      	uxtb	r3, r3
 8004818:	2b01      	cmp	r3, #1
 800481a:	d001      	beq.n	8004820 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800481c:	2301      	movs	r3, #1
 800481e:	e04e      	b.n	80048be <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	2202      	movs	r2, #2
 8004824:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	68da      	ldr	r2, [r3, #12]
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	f042 0201 	orr.w	r2, r2, #1
 8004836:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	4a23      	ldr	r2, [pc, #140]	@ (80048cc <HAL_TIM_Base_Start_IT+0xc4>)
 800483e:	4293      	cmp	r3, r2
 8004840:	d022      	beq.n	8004888 <HAL_TIM_Base_Start_IT+0x80>
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800484a:	d01d      	beq.n	8004888 <HAL_TIM_Base_Start_IT+0x80>
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	4a1f      	ldr	r2, [pc, #124]	@ (80048d0 <HAL_TIM_Base_Start_IT+0xc8>)
 8004852:	4293      	cmp	r3, r2
 8004854:	d018      	beq.n	8004888 <HAL_TIM_Base_Start_IT+0x80>
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	4a1e      	ldr	r2, [pc, #120]	@ (80048d4 <HAL_TIM_Base_Start_IT+0xcc>)
 800485c:	4293      	cmp	r3, r2
 800485e:	d013      	beq.n	8004888 <HAL_TIM_Base_Start_IT+0x80>
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	4a1c      	ldr	r2, [pc, #112]	@ (80048d8 <HAL_TIM_Base_Start_IT+0xd0>)
 8004866:	4293      	cmp	r3, r2
 8004868:	d00e      	beq.n	8004888 <HAL_TIM_Base_Start_IT+0x80>
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	4a1b      	ldr	r2, [pc, #108]	@ (80048dc <HAL_TIM_Base_Start_IT+0xd4>)
 8004870:	4293      	cmp	r3, r2
 8004872:	d009      	beq.n	8004888 <HAL_TIM_Base_Start_IT+0x80>
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	4a19      	ldr	r2, [pc, #100]	@ (80048e0 <HAL_TIM_Base_Start_IT+0xd8>)
 800487a:	4293      	cmp	r3, r2
 800487c:	d004      	beq.n	8004888 <HAL_TIM_Base_Start_IT+0x80>
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	4a18      	ldr	r2, [pc, #96]	@ (80048e4 <HAL_TIM_Base_Start_IT+0xdc>)
 8004884:	4293      	cmp	r3, r2
 8004886:	d111      	bne.n	80048ac <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	689b      	ldr	r3, [r3, #8]
 800488e:	f003 0307 	and.w	r3, r3, #7
 8004892:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	2b06      	cmp	r3, #6
 8004898:	d010      	beq.n	80048bc <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	681a      	ldr	r2, [r3, #0]
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	f042 0201 	orr.w	r2, r2, #1
 80048a8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80048aa:	e007      	b.n	80048bc <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	681a      	ldr	r2, [r3, #0]
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	f042 0201 	orr.w	r2, r2, #1
 80048ba:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80048bc:	2300      	movs	r3, #0
}
 80048be:	4618      	mov	r0, r3
 80048c0:	3714      	adds	r7, #20
 80048c2:	46bd      	mov	sp, r7
 80048c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c8:	4770      	bx	lr
 80048ca:	bf00      	nop
 80048cc:	40010000 	.word	0x40010000
 80048d0:	40000400 	.word	0x40000400
 80048d4:	40000800 	.word	0x40000800
 80048d8:	40000c00 	.word	0x40000c00
 80048dc:	40010400 	.word	0x40010400
 80048e0:	40014000 	.word	0x40014000
 80048e4:	40001800 	.word	0x40001800

080048e8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80048e8:	b580      	push	{r7, lr}
 80048ea:	b082      	sub	sp, #8
 80048ec:	af00      	add	r7, sp, #0
 80048ee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d101      	bne.n	80048fa <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80048f6:	2301      	movs	r3, #1
 80048f8:	e041      	b.n	800497e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004900:	b2db      	uxtb	r3, r3
 8004902:	2b00      	cmp	r3, #0
 8004904:	d106      	bne.n	8004914 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	2200      	movs	r2, #0
 800490a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800490e:	6878      	ldr	r0, [r7, #4]
 8004910:	f7fd f9d4 	bl	8001cbc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	2202      	movs	r2, #2
 8004918:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681a      	ldr	r2, [r3, #0]
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	3304      	adds	r3, #4
 8004924:	4619      	mov	r1, r3
 8004926:	4610      	mov	r0, r2
 8004928:	f000 fb98 	bl	800505c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	2201      	movs	r2, #1
 8004930:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	2201      	movs	r2, #1
 8004938:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	2201      	movs	r2, #1
 8004940:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	2201      	movs	r2, #1
 8004948:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	2201      	movs	r2, #1
 8004950:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	2201      	movs	r2, #1
 8004958:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	2201      	movs	r2, #1
 8004960:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	2201      	movs	r2, #1
 8004968:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	2201      	movs	r2, #1
 8004970:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	2201      	movs	r2, #1
 8004978:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800497c:	2300      	movs	r3, #0
}
 800497e:	4618      	mov	r0, r3
 8004980:	3708      	adds	r7, #8
 8004982:	46bd      	mov	sp, r7
 8004984:	bd80      	pop	{r7, pc}
	...

08004988 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004988:	b580      	push	{r7, lr}
 800498a:	b084      	sub	sp, #16
 800498c:	af00      	add	r7, sp, #0
 800498e:	6078      	str	r0, [r7, #4]
 8004990:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004992:	683b      	ldr	r3, [r7, #0]
 8004994:	2b00      	cmp	r3, #0
 8004996:	d109      	bne.n	80049ac <HAL_TIM_PWM_Start+0x24>
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800499e:	b2db      	uxtb	r3, r3
 80049a0:	2b01      	cmp	r3, #1
 80049a2:	bf14      	ite	ne
 80049a4:	2301      	movne	r3, #1
 80049a6:	2300      	moveq	r3, #0
 80049a8:	b2db      	uxtb	r3, r3
 80049aa:	e022      	b.n	80049f2 <HAL_TIM_PWM_Start+0x6a>
 80049ac:	683b      	ldr	r3, [r7, #0]
 80049ae:	2b04      	cmp	r3, #4
 80049b0:	d109      	bne.n	80049c6 <HAL_TIM_PWM_Start+0x3e>
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80049b8:	b2db      	uxtb	r3, r3
 80049ba:	2b01      	cmp	r3, #1
 80049bc:	bf14      	ite	ne
 80049be:	2301      	movne	r3, #1
 80049c0:	2300      	moveq	r3, #0
 80049c2:	b2db      	uxtb	r3, r3
 80049c4:	e015      	b.n	80049f2 <HAL_TIM_PWM_Start+0x6a>
 80049c6:	683b      	ldr	r3, [r7, #0]
 80049c8:	2b08      	cmp	r3, #8
 80049ca:	d109      	bne.n	80049e0 <HAL_TIM_PWM_Start+0x58>
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80049d2:	b2db      	uxtb	r3, r3
 80049d4:	2b01      	cmp	r3, #1
 80049d6:	bf14      	ite	ne
 80049d8:	2301      	movne	r3, #1
 80049da:	2300      	moveq	r3, #0
 80049dc:	b2db      	uxtb	r3, r3
 80049de:	e008      	b.n	80049f2 <HAL_TIM_PWM_Start+0x6a>
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80049e6:	b2db      	uxtb	r3, r3
 80049e8:	2b01      	cmp	r3, #1
 80049ea:	bf14      	ite	ne
 80049ec:	2301      	movne	r3, #1
 80049ee:	2300      	moveq	r3, #0
 80049f0:	b2db      	uxtb	r3, r3
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d001      	beq.n	80049fa <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80049f6:	2301      	movs	r3, #1
 80049f8:	e07c      	b.n	8004af4 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80049fa:	683b      	ldr	r3, [r7, #0]
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d104      	bne.n	8004a0a <HAL_TIM_PWM_Start+0x82>
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	2202      	movs	r2, #2
 8004a04:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004a08:	e013      	b.n	8004a32 <HAL_TIM_PWM_Start+0xaa>
 8004a0a:	683b      	ldr	r3, [r7, #0]
 8004a0c:	2b04      	cmp	r3, #4
 8004a0e:	d104      	bne.n	8004a1a <HAL_TIM_PWM_Start+0x92>
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	2202      	movs	r2, #2
 8004a14:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004a18:	e00b      	b.n	8004a32 <HAL_TIM_PWM_Start+0xaa>
 8004a1a:	683b      	ldr	r3, [r7, #0]
 8004a1c:	2b08      	cmp	r3, #8
 8004a1e:	d104      	bne.n	8004a2a <HAL_TIM_PWM_Start+0xa2>
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	2202      	movs	r2, #2
 8004a24:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004a28:	e003      	b.n	8004a32 <HAL_TIM_PWM_Start+0xaa>
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	2202      	movs	r2, #2
 8004a2e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	2201      	movs	r2, #1
 8004a38:	6839      	ldr	r1, [r7, #0]
 8004a3a:	4618      	mov	r0, r3
 8004a3c:	f000 fe04 	bl	8005648 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	4a2d      	ldr	r2, [pc, #180]	@ (8004afc <HAL_TIM_PWM_Start+0x174>)
 8004a46:	4293      	cmp	r3, r2
 8004a48:	d004      	beq.n	8004a54 <HAL_TIM_PWM_Start+0xcc>
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	4a2c      	ldr	r2, [pc, #176]	@ (8004b00 <HAL_TIM_PWM_Start+0x178>)
 8004a50:	4293      	cmp	r3, r2
 8004a52:	d101      	bne.n	8004a58 <HAL_TIM_PWM_Start+0xd0>
 8004a54:	2301      	movs	r3, #1
 8004a56:	e000      	b.n	8004a5a <HAL_TIM_PWM_Start+0xd2>
 8004a58:	2300      	movs	r3, #0
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d007      	beq.n	8004a6e <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004a6c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	4a22      	ldr	r2, [pc, #136]	@ (8004afc <HAL_TIM_PWM_Start+0x174>)
 8004a74:	4293      	cmp	r3, r2
 8004a76:	d022      	beq.n	8004abe <HAL_TIM_PWM_Start+0x136>
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004a80:	d01d      	beq.n	8004abe <HAL_TIM_PWM_Start+0x136>
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	4a1f      	ldr	r2, [pc, #124]	@ (8004b04 <HAL_TIM_PWM_Start+0x17c>)
 8004a88:	4293      	cmp	r3, r2
 8004a8a:	d018      	beq.n	8004abe <HAL_TIM_PWM_Start+0x136>
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	4a1d      	ldr	r2, [pc, #116]	@ (8004b08 <HAL_TIM_PWM_Start+0x180>)
 8004a92:	4293      	cmp	r3, r2
 8004a94:	d013      	beq.n	8004abe <HAL_TIM_PWM_Start+0x136>
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	4a1c      	ldr	r2, [pc, #112]	@ (8004b0c <HAL_TIM_PWM_Start+0x184>)
 8004a9c:	4293      	cmp	r3, r2
 8004a9e:	d00e      	beq.n	8004abe <HAL_TIM_PWM_Start+0x136>
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	4a16      	ldr	r2, [pc, #88]	@ (8004b00 <HAL_TIM_PWM_Start+0x178>)
 8004aa6:	4293      	cmp	r3, r2
 8004aa8:	d009      	beq.n	8004abe <HAL_TIM_PWM_Start+0x136>
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	4a18      	ldr	r2, [pc, #96]	@ (8004b10 <HAL_TIM_PWM_Start+0x188>)
 8004ab0:	4293      	cmp	r3, r2
 8004ab2:	d004      	beq.n	8004abe <HAL_TIM_PWM_Start+0x136>
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	4a16      	ldr	r2, [pc, #88]	@ (8004b14 <HAL_TIM_PWM_Start+0x18c>)
 8004aba:	4293      	cmp	r3, r2
 8004abc:	d111      	bne.n	8004ae2 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	689b      	ldr	r3, [r3, #8]
 8004ac4:	f003 0307 	and.w	r3, r3, #7
 8004ac8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	2b06      	cmp	r3, #6
 8004ace:	d010      	beq.n	8004af2 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	681a      	ldr	r2, [r3, #0]
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	f042 0201 	orr.w	r2, r2, #1
 8004ade:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ae0:	e007      	b.n	8004af2 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	681a      	ldr	r2, [r3, #0]
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	f042 0201 	orr.w	r2, r2, #1
 8004af0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004af2:	2300      	movs	r3, #0
}
 8004af4:	4618      	mov	r0, r3
 8004af6:	3710      	adds	r7, #16
 8004af8:	46bd      	mov	sp, r7
 8004afa:	bd80      	pop	{r7, pc}
 8004afc:	40010000 	.word	0x40010000
 8004b00:	40010400 	.word	0x40010400
 8004b04:	40000400 	.word	0x40000400
 8004b08:	40000800 	.word	0x40000800
 8004b0c:	40000c00 	.word	0x40000c00
 8004b10:	40014000 	.word	0x40014000
 8004b14:	40001800 	.word	0x40001800

08004b18 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004b18:	b580      	push	{r7, lr}
 8004b1a:	b084      	sub	sp, #16
 8004b1c:	af00      	add	r7, sp, #0
 8004b1e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	68db      	ldr	r3, [r3, #12]
 8004b26:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	691b      	ldr	r3, [r3, #16]
 8004b2e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004b30:	68bb      	ldr	r3, [r7, #8]
 8004b32:	f003 0302 	and.w	r3, r3, #2
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d020      	beq.n	8004b7c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	f003 0302 	and.w	r3, r3, #2
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d01b      	beq.n	8004b7c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	f06f 0202 	mvn.w	r2, #2
 8004b4c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	2201      	movs	r2, #1
 8004b52:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	699b      	ldr	r3, [r3, #24]
 8004b5a:	f003 0303 	and.w	r3, r3, #3
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d003      	beq.n	8004b6a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004b62:	6878      	ldr	r0, [r7, #4]
 8004b64:	f000 fa5b 	bl	800501e <HAL_TIM_IC_CaptureCallback>
 8004b68:	e005      	b.n	8004b76 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b6a:	6878      	ldr	r0, [r7, #4]
 8004b6c:	f000 fa4d 	bl	800500a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b70:	6878      	ldr	r0, [r7, #4]
 8004b72:	f000 fa5e 	bl	8005032 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	2200      	movs	r2, #0
 8004b7a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004b7c:	68bb      	ldr	r3, [r7, #8]
 8004b7e:	f003 0304 	and.w	r3, r3, #4
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d020      	beq.n	8004bc8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	f003 0304 	and.w	r3, r3, #4
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d01b      	beq.n	8004bc8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	f06f 0204 	mvn.w	r2, #4
 8004b98:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	2202      	movs	r2, #2
 8004b9e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	699b      	ldr	r3, [r3, #24]
 8004ba6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d003      	beq.n	8004bb6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004bae:	6878      	ldr	r0, [r7, #4]
 8004bb0:	f000 fa35 	bl	800501e <HAL_TIM_IC_CaptureCallback>
 8004bb4:	e005      	b.n	8004bc2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004bb6:	6878      	ldr	r0, [r7, #4]
 8004bb8:	f000 fa27 	bl	800500a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004bbc:	6878      	ldr	r0, [r7, #4]
 8004bbe:	f000 fa38 	bl	8005032 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	2200      	movs	r2, #0
 8004bc6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004bc8:	68bb      	ldr	r3, [r7, #8]
 8004bca:	f003 0308 	and.w	r3, r3, #8
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d020      	beq.n	8004c14 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	f003 0308 	and.w	r3, r3, #8
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d01b      	beq.n	8004c14 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	f06f 0208 	mvn.w	r2, #8
 8004be4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	2204      	movs	r2, #4
 8004bea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	69db      	ldr	r3, [r3, #28]
 8004bf2:	f003 0303 	and.w	r3, r3, #3
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d003      	beq.n	8004c02 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004bfa:	6878      	ldr	r0, [r7, #4]
 8004bfc:	f000 fa0f 	bl	800501e <HAL_TIM_IC_CaptureCallback>
 8004c00:	e005      	b.n	8004c0e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c02:	6878      	ldr	r0, [r7, #4]
 8004c04:	f000 fa01 	bl	800500a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c08:	6878      	ldr	r0, [r7, #4]
 8004c0a:	f000 fa12 	bl	8005032 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	2200      	movs	r2, #0
 8004c12:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004c14:	68bb      	ldr	r3, [r7, #8]
 8004c16:	f003 0310 	and.w	r3, r3, #16
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d020      	beq.n	8004c60 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	f003 0310 	and.w	r3, r3, #16
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d01b      	beq.n	8004c60 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	f06f 0210 	mvn.w	r2, #16
 8004c30:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	2208      	movs	r2, #8
 8004c36:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	69db      	ldr	r3, [r3, #28]
 8004c3e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d003      	beq.n	8004c4e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004c46:	6878      	ldr	r0, [r7, #4]
 8004c48:	f000 f9e9 	bl	800501e <HAL_TIM_IC_CaptureCallback>
 8004c4c:	e005      	b.n	8004c5a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c4e:	6878      	ldr	r0, [r7, #4]
 8004c50:	f000 f9db 	bl	800500a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c54:	6878      	ldr	r0, [r7, #4]
 8004c56:	f000 f9ec 	bl	8005032 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	2200      	movs	r2, #0
 8004c5e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004c60:	68bb      	ldr	r3, [r7, #8]
 8004c62:	f003 0301 	and.w	r3, r3, #1
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d00c      	beq.n	8004c84 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	f003 0301 	and.w	r3, r3, #1
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d007      	beq.n	8004c84 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	f06f 0201 	mvn.w	r2, #1
 8004c7c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004c7e:	6878      	ldr	r0, [r7, #4]
 8004c80:	f7fc fc94 	bl	80015ac <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004c84:	68bb      	ldr	r3, [r7, #8]
 8004c86:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d00c      	beq.n	8004ca8 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d007      	beq.n	8004ca8 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8004ca0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004ca2:	6878      	ldr	r0, [r7, #4]
 8004ca4:	f000 fd7c 	bl	80057a0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004ca8:	68bb      	ldr	r3, [r7, #8]
 8004caa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d00c      	beq.n	8004ccc <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d007      	beq.n	8004ccc <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004cc4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004cc6:	6878      	ldr	r0, [r7, #4]
 8004cc8:	f000 f9bd 	bl	8005046 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004ccc:	68bb      	ldr	r3, [r7, #8]
 8004cce:	f003 0320 	and.w	r3, r3, #32
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d00c      	beq.n	8004cf0 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	f003 0320 	and.w	r3, r3, #32
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d007      	beq.n	8004cf0 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	f06f 0220 	mvn.w	r2, #32
 8004ce8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004cea:	6878      	ldr	r0, [r7, #4]
 8004cec:	f000 fd4e 	bl	800578c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004cf0:	bf00      	nop
 8004cf2:	3710      	adds	r7, #16
 8004cf4:	46bd      	mov	sp, r7
 8004cf6:	bd80      	pop	{r7, pc}

08004cf8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004cf8:	b580      	push	{r7, lr}
 8004cfa:	b086      	sub	sp, #24
 8004cfc:	af00      	add	r7, sp, #0
 8004cfe:	60f8      	str	r0, [r7, #12]
 8004d00:	60b9      	str	r1, [r7, #8]
 8004d02:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004d04:	2300      	movs	r3, #0
 8004d06:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004d0e:	2b01      	cmp	r3, #1
 8004d10:	d101      	bne.n	8004d16 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004d12:	2302      	movs	r3, #2
 8004d14:	e0ae      	b.n	8004e74 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	2201      	movs	r2, #1
 8004d1a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	2b0c      	cmp	r3, #12
 8004d22:	f200 809f 	bhi.w	8004e64 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004d26:	a201      	add	r2, pc, #4	@ (adr r2, 8004d2c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004d28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d2c:	08004d61 	.word	0x08004d61
 8004d30:	08004e65 	.word	0x08004e65
 8004d34:	08004e65 	.word	0x08004e65
 8004d38:	08004e65 	.word	0x08004e65
 8004d3c:	08004da1 	.word	0x08004da1
 8004d40:	08004e65 	.word	0x08004e65
 8004d44:	08004e65 	.word	0x08004e65
 8004d48:	08004e65 	.word	0x08004e65
 8004d4c:	08004de3 	.word	0x08004de3
 8004d50:	08004e65 	.word	0x08004e65
 8004d54:	08004e65 	.word	0x08004e65
 8004d58:	08004e65 	.word	0x08004e65
 8004d5c:	08004e23 	.word	0x08004e23
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	68b9      	ldr	r1, [r7, #8]
 8004d66:	4618      	mov	r0, r3
 8004d68:	f000 fa24 	bl	80051b4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	699a      	ldr	r2, [r3, #24]
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	f042 0208 	orr.w	r2, r2, #8
 8004d7a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	699a      	ldr	r2, [r3, #24]
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	f022 0204 	bic.w	r2, r2, #4
 8004d8a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	6999      	ldr	r1, [r3, #24]
 8004d92:	68bb      	ldr	r3, [r7, #8]
 8004d94:	691a      	ldr	r2, [r3, #16]
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	430a      	orrs	r2, r1
 8004d9c:	619a      	str	r2, [r3, #24]
      break;
 8004d9e:	e064      	b.n	8004e6a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	68b9      	ldr	r1, [r7, #8]
 8004da6:	4618      	mov	r0, r3
 8004da8:	f000 fa74 	bl	8005294 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	699a      	ldr	r2, [r3, #24]
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004dba:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	699a      	ldr	r2, [r3, #24]
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004dca:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	6999      	ldr	r1, [r3, #24]
 8004dd2:	68bb      	ldr	r3, [r7, #8]
 8004dd4:	691b      	ldr	r3, [r3, #16]
 8004dd6:	021a      	lsls	r2, r3, #8
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	430a      	orrs	r2, r1
 8004dde:	619a      	str	r2, [r3, #24]
      break;
 8004de0:	e043      	b.n	8004e6a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	68b9      	ldr	r1, [r7, #8]
 8004de8:	4618      	mov	r0, r3
 8004dea:	f000 fac9 	bl	8005380 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	69da      	ldr	r2, [r3, #28]
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	f042 0208 	orr.w	r2, r2, #8
 8004dfc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	69da      	ldr	r2, [r3, #28]
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	f022 0204 	bic.w	r2, r2, #4
 8004e0c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	69d9      	ldr	r1, [r3, #28]
 8004e14:	68bb      	ldr	r3, [r7, #8]
 8004e16:	691a      	ldr	r2, [r3, #16]
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	430a      	orrs	r2, r1
 8004e1e:	61da      	str	r2, [r3, #28]
      break;
 8004e20:	e023      	b.n	8004e6a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	68b9      	ldr	r1, [r7, #8]
 8004e28:	4618      	mov	r0, r3
 8004e2a:	f000 fb1d 	bl	8005468 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	69da      	ldr	r2, [r3, #28]
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004e3c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	69da      	ldr	r2, [r3, #28]
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004e4c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	69d9      	ldr	r1, [r3, #28]
 8004e54:	68bb      	ldr	r3, [r7, #8]
 8004e56:	691b      	ldr	r3, [r3, #16]
 8004e58:	021a      	lsls	r2, r3, #8
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	430a      	orrs	r2, r1
 8004e60:	61da      	str	r2, [r3, #28]
      break;
 8004e62:	e002      	b.n	8004e6a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004e64:	2301      	movs	r3, #1
 8004e66:	75fb      	strb	r3, [r7, #23]
      break;
 8004e68:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	2200      	movs	r2, #0
 8004e6e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004e72:	7dfb      	ldrb	r3, [r7, #23]
}
 8004e74:	4618      	mov	r0, r3
 8004e76:	3718      	adds	r7, #24
 8004e78:	46bd      	mov	sp, r7
 8004e7a:	bd80      	pop	{r7, pc}

08004e7c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004e7c:	b580      	push	{r7, lr}
 8004e7e:	b084      	sub	sp, #16
 8004e80:	af00      	add	r7, sp, #0
 8004e82:	6078      	str	r0, [r7, #4]
 8004e84:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004e86:	2300      	movs	r3, #0
 8004e88:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004e90:	2b01      	cmp	r3, #1
 8004e92:	d101      	bne.n	8004e98 <HAL_TIM_ConfigClockSource+0x1c>
 8004e94:	2302      	movs	r3, #2
 8004e96:	e0b4      	b.n	8005002 <HAL_TIM_ConfigClockSource+0x186>
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	2201      	movs	r2, #1
 8004e9c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	2202      	movs	r2, #2
 8004ea4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	689b      	ldr	r3, [r3, #8]
 8004eae:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004eb0:	68bb      	ldr	r3, [r7, #8]
 8004eb2:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8004eb6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004eb8:	68bb      	ldr	r3, [r7, #8]
 8004eba:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004ebe:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	68ba      	ldr	r2, [r7, #8]
 8004ec6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004ec8:	683b      	ldr	r3, [r7, #0]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004ed0:	d03e      	beq.n	8004f50 <HAL_TIM_ConfigClockSource+0xd4>
 8004ed2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004ed6:	f200 8087 	bhi.w	8004fe8 <HAL_TIM_ConfigClockSource+0x16c>
 8004eda:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004ede:	f000 8086 	beq.w	8004fee <HAL_TIM_ConfigClockSource+0x172>
 8004ee2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004ee6:	d87f      	bhi.n	8004fe8 <HAL_TIM_ConfigClockSource+0x16c>
 8004ee8:	2b70      	cmp	r3, #112	@ 0x70
 8004eea:	d01a      	beq.n	8004f22 <HAL_TIM_ConfigClockSource+0xa6>
 8004eec:	2b70      	cmp	r3, #112	@ 0x70
 8004eee:	d87b      	bhi.n	8004fe8 <HAL_TIM_ConfigClockSource+0x16c>
 8004ef0:	2b60      	cmp	r3, #96	@ 0x60
 8004ef2:	d050      	beq.n	8004f96 <HAL_TIM_ConfigClockSource+0x11a>
 8004ef4:	2b60      	cmp	r3, #96	@ 0x60
 8004ef6:	d877      	bhi.n	8004fe8 <HAL_TIM_ConfigClockSource+0x16c>
 8004ef8:	2b50      	cmp	r3, #80	@ 0x50
 8004efa:	d03c      	beq.n	8004f76 <HAL_TIM_ConfigClockSource+0xfa>
 8004efc:	2b50      	cmp	r3, #80	@ 0x50
 8004efe:	d873      	bhi.n	8004fe8 <HAL_TIM_ConfigClockSource+0x16c>
 8004f00:	2b40      	cmp	r3, #64	@ 0x40
 8004f02:	d058      	beq.n	8004fb6 <HAL_TIM_ConfigClockSource+0x13a>
 8004f04:	2b40      	cmp	r3, #64	@ 0x40
 8004f06:	d86f      	bhi.n	8004fe8 <HAL_TIM_ConfigClockSource+0x16c>
 8004f08:	2b30      	cmp	r3, #48	@ 0x30
 8004f0a:	d064      	beq.n	8004fd6 <HAL_TIM_ConfigClockSource+0x15a>
 8004f0c:	2b30      	cmp	r3, #48	@ 0x30
 8004f0e:	d86b      	bhi.n	8004fe8 <HAL_TIM_ConfigClockSource+0x16c>
 8004f10:	2b20      	cmp	r3, #32
 8004f12:	d060      	beq.n	8004fd6 <HAL_TIM_ConfigClockSource+0x15a>
 8004f14:	2b20      	cmp	r3, #32
 8004f16:	d867      	bhi.n	8004fe8 <HAL_TIM_ConfigClockSource+0x16c>
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d05c      	beq.n	8004fd6 <HAL_TIM_ConfigClockSource+0x15a>
 8004f1c:	2b10      	cmp	r3, #16
 8004f1e:	d05a      	beq.n	8004fd6 <HAL_TIM_ConfigClockSource+0x15a>
 8004f20:	e062      	b.n	8004fe8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004f26:	683b      	ldr	r3, [r7, #0]
 8004f28:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004f2a:	683b      	ldr	r3, [r7, #0]
 8004f2c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004f2e:	683b      	ldr	r3, [r7, #0]
 8004f30:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004f32:	f000 fb69 	bl	8005608 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	689b      	ldr	r3, [r3, #8]
 8004f3c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004f3e:	68bb      	ldr	r3, [r7, #8]
 8004f40:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004f44:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	68ba      	ldr	r2, [r7, #8]
 8004f4c:	609a      	str	r2, [r3, #8]
      break;
 8004f4e:	e04f      	b.n	8004ff0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004f54:	683b      	ldr	r3, [r7, #0]
 8004f56:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004f58:	683b      	ldr	r3, [r7, #0]
 8004f5a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004f5c:	683b      	ldr	r3, [r7, #0]
 8004f5e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004f60:	f000 fb52 	bl	8005608 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	689a      	ldr	r2, [r3, #8]
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004f72:	609a      	str	r2, [r3, #8]
      break;
 8004f74:	e03c      	b.n	8004ff0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004f7a:	683b      	ldr	r3, [r7, #0]
 8004f7c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004f7e:	683b      	ldr	r3, [r7, #0]
 8004f80:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004f82:	461a      	mov	r2, r3
 8004f84:	f000 fac6 	bl	8005514 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	2150      	movs	r1, #80	@ 0x50
 8004f8e:	4618      	mov	r0, r3
 8004f90:	f000 fb1f 	bl	80055d2 <TIM_ITRx_SetConfig>
      break;
 8004f94:	e02c      	b.n	8004ff0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004f9a:	683b      	ldr	r3, [r7, #0]
 8004f9c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004f9e:	683b      	ldr	r3, [r7, #0]
 8004fa0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004fa2:	461a      	mov	r2, r3
 8004fa4:	f000 fae5 	bl	8005572 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	2160      	movs	r1, #96	@ 0x60
 8004fae:	4618      	mov	r0, r3
 8004fb0:	f000 fb0f 	bl	80055d2 <TIM_ITRx_SetConfig>
      break;
 8004fb4:	e01c      	b.n	8004ff0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004fba:	683b      	ldr	r3, [r7, #0]
 8004fbc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004fbe:	683b      	ldr	r3, [r7, #0]
 8004fc0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004fc2:	461a      	mov	r2, r3
 8004fc4:	f000 faa6 	bl	8005514 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	2140      	movs	r1, #64	@ 0x40
 8004fce:	4618      	mov	r0, r3
 8004fd0:	f000 faff 	bl	80055d2 <TIM_ITRx_SetConfig>
      break;
 8004fd4:	e00c      	b.n	8004ff0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681a      	ldr	r2, [r3, #0]
 8004fda:	683b      	ldr	r3, [r7, #0]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	4619      	mov	r1, r3
 8004fe0:	4610      	mov	r0, r2
 8004fe2:	f000 faf6 	bl	80055d2 <TIM_ITRx_SetConfig>
      break;
 8004fe6:	e003      	b.n	8004ff0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004fe8:	2301      	movs	r3, #1
 8004fea:	73fb      	strb	r3, [r7, #15]
      break;
 8004fec:	e000      	b.n	8004ff0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004fee:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	2201      	movs	r2, #1
 8004ff4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	2200      	movs	r2, #0
 8004ffc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005000:	7bfb      	ldrb	r3, [r7, #15]
}
 8005002:	4618      	mov	r0, r3
 8005004:	3710      	adds	r7, #16
 8005006:	46bd      	mov	sp, r7
 8005008:	bd80      	pop	{r7, pc}

0800500a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800500a:	b480      	push	{r7}
 800500c:	b083      	sub	sp, #12
 800500e:	af00      	add	r7, sp, #0
 8005010:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005012:	bf00      	nop
 8005014:	370c      	adds	r7, #12
 8005016:	46bd      	mov	sp, r7
 8005018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800501c:	4770      	bx	lr

0800501e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800501e:	b480      	push	{r7}
 8005020:	b083      	sub	sp, #12
 8005022:	af00      	add	r7, sp, #0
 8005024:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005026:	bf00      	nop
 8005028:	370c      	adds	r7, #12
 800502a:	46bd      	mov	sp, r7
 800502c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005030:	4770      	bx	lr

08005032 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005032:	b480      	push	{r7}
 8005034:	b083      	sub	sp, #12
 8005036:	af00      	add	r7, sp, #0
 8005038:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800503a:	bf00      	nop
 800503c:	370c      	adds	r7, #12
 800503e:	46bd      	mov	sp, r7
 8005040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005044:	4770      	bx	lr

08005046 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005046:	b480      	push	{r7}
 8005048:	b083      	sub	sp, #12
 800504a:	af00      	add	r7, sp, #0
 800504c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800504e:	bf00      	nop
 8005050:	370c      	adds	r7, #12
 8005052:	46bd      	mov	sp, r7
 8005054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005058:	4770      	bx	lr
	...

0800505c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800505c:	b480      	push	{r7}
 800505e:	b085      	sub	sp, #20
 8005060:	af00      	add	r7, sp, #0
 8005062:	6078      	str	r0, [r7, #4]
 8005064:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	4a46      	ldr	r2, [pc, #280]	@ (8005188 <TIM_Base_SetConfig+0x12c>)
 8005070:	4293      	cmp	r3, r2
 8005072:	d013      	beq.n	800509c <TIM_Base_SetConfig+0x40>
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800507a:	d00f      	beq.n	800509c <TIM_Base_SetConfig+0x40>
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	4a43      	ldr	r2, [pc, #268]	@ (800518c <TIM_Base_SetConfig+0x130>)
 8005080:	4293      	cmp	r3, r2
 8005082:	d00b      	beq.n	800509c <TIM_Base_SetConfig+0x40>
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	4a42      	ldr	r2, [pc, #264]	@ (8005190 <TIM_Base_SetConfig+0x134>)
 8005088:	4293      	cmp	r3, r2
 800508a:	d007      	beq.n	800509c <TIM_Base_SetConfig+0x40>
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	4a41      	ldr	r2, [pc, #260]	@ (8005194 <TIM_Base_SetConfig+0x138>)
 8005090:	4293      	cmp	r3, r2
 8005092:	d003      	beq.n	800509c <TIM_Base_SetConfig+0x40>
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	4a40      	ldr	r2, [pc, #256]	@ (8005198 <TIM_Base_SetConfig+0x13c>)
 8005098:	4293      	cmp	r3, r2
 800509a:	d108      	bne.n	80050ae <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80050a2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80050a4:	683b      	ldr	r3, [r7, #0]
 80050a6:	685b      	ldr	r3, [r3, #4]
 80050a8:	68fa      	ldr	r2, [r7, #12]
 80050aa:	4313      	orrs	r3, r2
 80050ac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	4a35      	ldr	r2, [pc, #212]	@ (8005188 <TIM_Base_SetConfig+0x12c>)
 80050b2:	4293      	cmp	r3, r2
 80050b4:	d02b      	beq.n	800510e <TIM_Base_SetConfig+0xb2>
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80050bc:	d027      	beq.n	800510e <TIM_Base_SetConfig+0xb2>
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	4a32      	ldr	r2, [pc, #200]	@ (800518c <TIM_Base_SetConfig+0x130>)
 80050c2:	4293      	cmp	r3, r2
 80050c4:	d023      	beq.n	800510e <TIM_Base_SetConfig+0xb2>
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	4a31      	ldr	r2, [pc, #196]	@ (8005190 <TIM_Base_SetConfig+0x134>)
 80050ca:	4293      	cmp	r3, r2
 80050cc:	d01f      	beq.n	800510e <TIM_Base_SetConfig+0xb2>
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	4a30      	ldr	r2, [pc, #192]	@ (8005194 <TIM_Base_SetConfig+0x138>)
 80050d2:	4293      	cmp	r3, r2
 80050d4:	d01b      	beq.n	800510e <TIM_Base_SetConfig+0xb2>
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	4a2f      	ldr	r2, [pc, #188]	@ (8005198 <TIM_Base_SetConfig+0x13c>)
 80050da:	4293      	cmp	r3, r2
 80050dc:	d017      	beq.n	800510e <TIM_Base_SetConfig+0xb2>
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	4a2e      	ldr	r2, [pc, #184]	@ (800519c <TIM_Base_SetConfig+0x140>)
 80050e2:	4293      	cmp	r3, r2
 80050e4:	d013      	beq.n	800510e <TIM_Base_SetConfig+0xb2>
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	4a2d      	ldr	r2, [pc, #180]	@ (80051a0 <TIM_Base_SetConfig+0x144>)
 80050ea:	4293      	cmp	r3, r2
 80050ec:	d00f      	beq.n	800510e <TIM_Base_SetConfig+0xb2>
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	4a2c      	ldr	r2, [pc, #176]	@ (80051a4 <TIM_Base_SetConfig+0x148>)
 80050f2:	4293      	cmp	r3, r2
 80050f4:	d00b      	beq.n	800510e <TIM_Base_SetConfig+0xb2>
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	4a2b      	ldr	r2, [pc, #172]	@ (80051a8 <TIM_Base_SetConfig+0x14c>)
 80050fa:	4293      	cmp	r3, r2
 80050fc:	d007      	beq.n	800510e <TIM_Base_SetConfig+0xb2>
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	4a2a      	ldr	r2, [pc, #168]	@ (80051ac <TIM_Base_SetConfig+0x150>)
 8005102:	4293      	cmp	r3, r2
 8005104:	d003      	beq.n	800510e <TIM_Base_SetConfig+0xb2>
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	4a29      	ldr	r2, [pc, #164]	@ (80051b0 <TIM_Base_SetConfig+0x154>)
 800510a:	4293      	cmp	r3, r2
 800510c:	d108      	bne.n	8005120 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005114:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005116:	683b      	ldr	r3, [r7, #0]
 8005118:	68db      	ldr	r3, [r3, #12]
 800511a:	68fa      	ldr	r2, [r7, #12]
 800511c:	4313      	orrs	r3, r2
 800511e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005126:	683b      	ldr	r3, [r7, #0]
 8005128:	695b      	ldr	r3, [r3, #20]
 800512a:	4313      	orrs	r3, r2
 800512c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	68fa      	ldr	r2, [r7, #12]
 8005132:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005134:	683b      	ldr	r3, [r7, #0]
 8005136:	689a      	ldr	r2, [r3, #8]
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800513c:	683b      	ldr	r3, [r7, #0]
 800513e:	681a      	ldr	r2, [r3, #0]
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	4a10      	ldr	r2, [pc, #64]	@ (8005188 <TIM_Base_SetConfig+0x12c>)
 8005148:	4293      	cmp	r3, r2
 800514a:	d003      	beq.n	8005154 <TIM_Base_SetConfig+0xf8>
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	4a12      	ldr	r2, [pc, #72]	@ (8005198 <TIM_Base_SetConfig+0x13c>)
 8005150:	4293      	cmp	r3, r2
 8005152:	d103      	bne.n	800515c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005154:	683b      	ldr	r3, [r7, #0]
 8005156:	691a      	ldr	r2, [r3, #16]
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	2201      	movs	r2, #1
 8005160:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	691b      	ldr	r3, [r3, #16]
 8005166:	f003 0301 	and.w	r3, r3, #1
 800516a:	2b01      	cmp	r3, #1
 800516c:	d105      	bne.n	800517a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	691b      	ldr	r3, [r3, #16]
 8005172:	f023 0201 	bic.w	r2, r3, #1
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	611a      	str	r2, [r3, #16]
  }
}
 800517a:	bf00      	nop
 800517c:	3714      	adds	r7, #20
 800517e:	46bd      	mov	sp, r7
 8005180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005184:	4770      	bx	lr
 8005186:	bf00      	nop
 8005188:	40010000 	.word	0x40010000
 800518c:	40000400 	.word	0x40000400
 8005190:	40000800 	.word	0x40000800
 8005194:	40000c00 	.word	0x40000c00
 8005198:	40010400 	.word	0x40010400
 800519c:	40014000 	.word	0x40014000
 80051a0:	40014400 	.word	0x40014400
 80051a4:	40014800 	.word	0x40014800
 80051a8:	40001800 	.word	0x40001800
 80051ac:	40001c00 	.word	0x40001c00
 80051b0:	40002000 	.word	0x40002000

080051b4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80051b4:	b480      	push	{r7}
 80051b6:	b087      	sub	sp, #28
 80051b8:	af00      	add	r7, sp, #0
 80051ba:	6078      	str	r0, [r7, #4]
 80051bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	6a1b      	ldr	r3, [r3, #32]
 80051c2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	6a1b      	ldr	r3, [r3, #32]
 80051c8:	f023 0201 	bic.w	r2, r3, #1
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	685b      	ldr	r3, [r3, #4]
 80051d4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	699b      	ldr	r3, [r3, #24]
 80051da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80051e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	f023 0303 	bic.w	r3, r3, #3
 80051ea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80051ec:	683b      	ldr	r3, [r7, #0]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	68fa      	ldr	r2, [r7, #12]
 80051f2:	4313      	orrs	r3, r2
 80051f4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80051f6:	697b      	ldr	r3, [r7, #20]
 80051f8:	f023 0302 	bic.w	r3, r3, #2
 80051fc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80051fe:	683b      	ldr	r3, [r7, #0]
 8005200:	689b      	ldr	r3, [r3, #8]
 8005202:	697a      	ldr	r2, [r7, #20]
 8005204:	4313      	orrs	r3, r2
 8005206:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	4a20      	ldr	r2, [pc, #128]	@ (800528c <TIM_OC1_SetConfig+0xd8>)
 800520c:	4293      	cmp	r3, r2
 800520e:	d003      	beq.n	8005218 <TIM_OC1_SetConfig+0x64>
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	4a1f      	ldr	r2, [pc, #124]	@ (8005290 <TIM_OC1_SetConfig+0xdc>)
 8005214:	4293      	cmp	r3, r2
 8005216:	d10c      	bne.n	8005232 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005218:	697b      	ldr	r3, [r7, #20]
 800521a:	f023 0308 	bic.w	r3, r3, #8
 800521e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005220:	683b      	ldr	r3, [r7, #0]
 8005222:	68db      	ldr	r3, [r3, #12]
 8005224:	697a      	ldr	r2, [r7, #20]
 8005226:	4313      	orrs	r3, r2
 8005228:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800522a:	697b      	ldr	r3, [r7, #20]
 800522c:	f023 0304 	bic.w	r3, r3, #4
 8005230:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	4a15      	ldr	r2, [pc, #84]	@ (800528c <TIM_OC1_SetConfig+0xd8>)
 8005236:	4293      	cmp	r3, r2
 8005238:	d003      	beq.n	8005242 <TIM_OC1_SetConfig+0x8e>
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	4a14      	ldr	r2, [pc, #80]	@ (8005290 <TIM_OC1_SetConfig+0xdc>)
 800523e:	4293      	cmp	r3, r2
 8005240:	d111      	bne.n	8005266 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005242:	693b      	ldr	r3, [r7, #16]
 8005244:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005248:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800524a:	693b      	ldr	r3, [r7, #16]
 800524c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005250:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005252:	683b      	ldr	r3, [r7, #0]
 8005254:	695b      	ldr	r3, [r3, #20]
 8005256:	693a      	ldr	r2, [r7, #16]
 8005258:	4313      	orrs	r3, r2
 800525a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800525c:	683b      	ldr	r3, [r7, #0]
 800525e:	699b      	ldr	r3, [r3, #24]
 8005260:	693a      	ldr	r2, [r7, #16]
 8005262:	4313      	orrs	r3, r2
 8005264:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	693a      	ldr	r2, [r7, #16]
 800526a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	68fa      	ldr	r2, [r7, #12]
 8005270:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005272:	683b      	ldr	r3, [r7, #0]
 8005274:	685a      	ldr	r2, [r3, #4]
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	697a      	ldr	r2, [r7, #20]
 800527e:	621a      	str	r2, [r3, #32]
}
 8005280:	bf00      	nop
 8005282:	371c      	adds	r7, #28
 8005284:	46bd      	mov	sp, r7
 8005286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800528a:	4770      	bx	lr
 800528c:	40010000 	.word	0x40010000
 8005290:	40010400 	.word	0x40010400

08005294 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005294:	b480      	push	{r7}
 8005296:	b087      	sub	sp, #28
 8005298:	af00      	add	r7, sp, #0
 800529a:	6078      	str	r0, [r7, #4]
 800529c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	6a1b      	ldr	r3, [r3, #32]
 80052a2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	6a1b      	ldr	r3, [r3, #32]
 80052a8:	f023 0210 	bic.w	r2, r3, #16
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	685b      	ldr	r3, [r3, #4]
 80052b4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	699b      	ldr	r3, [r3, #24]
 80052ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80052c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80052ca:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80052cc:	683b      	ldr	r3, [r7, #0]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	021b      	lsls	r3, r3, #8
 80052d2:	68fa      	ldr	r2, [r7, #12]
 80052d4:	4313      	orrs	r3, r2
 80052d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80052d8:	697b      	ldr	r3, [r7, #20]
 80052da:	f023 0320 	bic.w	r3, r3, #32
 80052de:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80052e0:	683b      	ldr	r3, [r7, #0]
 80052e2:	689b      	ldr	r3, [r3, #8]
 80052e4:	011b      	lsls	r3, r3, #4
 80052e6:	697a      	ldr	r2, [r7, #20]
 80052e8:	4313      	orrs	r3, r2
 80052ea:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	4a22      	ldr	r2, [pc, #136]	@ (8005378 <TIM_OC2_SetConfig+0xe4>)
 80052f0:	4293      	cmp	r3, r2
 80052f2:	d003      	beq.n	80052fc <TIM_OC2_SetConfig+0x68>
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	4a21      	ldr	r2, [pc, #132]	@ (800537c <TIM_OC2_SetConfig+0xe8>)
 80052f8:	4293      	cmp	r3, r2
 80052fa:	d10d      	bne.n	8005318 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80052fc:	697b      	ldr	r3, [r7, #20]
 80052fe:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005302:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005304:	683b      	ldr	r3, [r7, #0]
 8005306:	68db      	ldr	r3, [r3, #12]
 8005308:	011b      	lsls	r3, r3, #4
 800530a:	697a      	ldr	r2, [r7, #20]
 800530c:	4313      	orrs	r3, r2
 800530e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005310:	697b      	ldr	r3, [r7, #20]
 8005312:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005316:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	4a17      	ldr	r2, [pc, #92]	@ (8005378 <TIM_OC2_SetConfig+0xe4>)
 800531c:	4293      	cmp	r3, r2
 800531e:	d003      	beq.n	8005328 <TIM_OC2_SetConfig+0x94>
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	4a16      	ldr	r2, [pc, #88]	@ (800537c <TIM_OC2_SetConfig+0xe8>)
 8005324:	4293      	cmp	r3, r2
 8005326:	d113      	bne.n	8005350 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005328:	693b      	ldr	r3, [r7, #16]
 800532a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800532e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005330:	693b      	ldr	r3, [r7, #16]
 8005332:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005336:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005338:	683b      	ldr	r3, [r7, #0]
 800533a:	695b      	ldr	r3, [r3, #20]
 800533c:	009b      	lsls	r3, r3, #2
 800533e:	693a      	ldr	r2, [r7, #16]
 8005340:	4313      	orrs	r3, r2
 8005342:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005344:	683b      	ldr	r3, [r7, #0]
 8005346:	699b      	ldr	r3, [r3, #24]
 8005348:	009b      	lsls	r3, r3, #2
 800534a:	693a      	ldr	r2, [r7, #16]
 800534c:	4313      	orrs	r3, r2
 800534e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	693a      	ldr	r2, [r7, #16]
 8005354:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	68fa      	ldr	r2, [r7, #12]
 800535a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800535c:	683b      	ldr	r3, [r7, #0]
 800535e:	685a      	ldr	r2, [r3, #4]
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	697a      	ldr	r2, [r7, #20]
 8005368:	621a      	str	r2, [r3, #32]
}
 800536a:	bf00      	nop
 800536c:	371c      	adds	r7, #28
 800536e:	46bd      	mov	sp, r7
 8005370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005374:	4770      	bx	lr
 8005376:	bf00      	nop
 8005378:	40010000 	.word	0x40010000
 800537c:	40010400 	.word	0x40010400

08005380 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005380:	b480      	push	{r7}
 8005382:	b087      	sub	sp, #28
 8005384:	af00      	add	r7, sp, #0
 8005386:	6078      	str	r0, [r7, #4]
 8005388:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	6a1b      	ldr	r3, [r3, #32]
 800538e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	6a1b      	ldr	r3, [r3, #32]
 8005394:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	685b      	ldr	r3, [r3, #4]
 80053a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	69db      	ldr	r3, [r3, #28]
 80053a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80053ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	f023 0303 	bic.w	r3, r3, #3
 80053b6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80053b8:	683b      	ldr	r3, [r7, #0]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	68fa      	ldr	r2, [r7, #12]
 80053be:	4313      	orrs	r3, r2
 80053c0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80053c2:	697b      	ldr	r3, [r7, #20]
 80053c4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80053c8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80053ca:	683b      	ldr	r3, [r7, #0]
 80053cc:	689b      	ldr	r3, [r3, #8]
 80053ce:	021b      	lsls	r3, r3, #8
 80053d0:	697a      	ldr	r2, [r7, #20]
 80053d2:	4313      	orrs	r3, r2
 80053d4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	4a21      	ldr	r2, [pc, #132]	@ (8005460 <TIM_OC3_SetConfig+0xe0>)
 80053da:	4293      	cmp	r3, r2
 80053dc:	d003      	beq.n	80053e6 <TIM_OC3_SetConfig+0x66>
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	4a20      	ldr	r2, [pc, #128]	@ (8005464 <TIM_OC3_SetConfig+0xe4>)
 80053e2:	4293      	cmp	r3, r2
 80053e4:	d10d      	bne.n	8005402 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80053e6:	697b      	ldr	r3, [r7, #20]
 80053e8:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80053ec:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80053ee:	683b      	ldr	r3, [r7, #0]
 80053f0:	68db      	ldr	r3, [r3, #12]
 80053f2:	021b      	lsls	r3, r3, #8
 80053f4:	697a      	ldr	r2, [r7, #20]
 80053f6:	4313      	orrs	r3, r2
 80053f8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80053fa:	697b      	ldr	r3, [r7, #20]
 80053fc:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005400:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	4a16      	ldr	r2, [pc, #88]	@ (8005460 <TIM_OC3_SetConfig+0xe0>)
 8005406:	4293      	cmp	r3, r2
 8005408:	d003      	beq.n	8005412 <TIM_OC3_SetConfig+0x92>
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	4a15      	ldr	r2, [pc, #84]	@ (8005464 <TIM_OC3_SetConfig+0xe4>)
 800540e:	4293      	cmp	r3, r2
 8005410:	d113      	bne.n	800543a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005412:	693b      	ldr	r3, [r7, #16]
 8005414:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005418:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800541a:	693b      	ldr	r3, [r7, #16]
 800541c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005420:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005422:	683b      	ldr	r3, [r7, #0]
 8005424:	695b      	ldr	r3, [r3, #20]
 8005426:	011b      	lsls	r3, r3, #4
 8005428:	693a      	ldr	r2, [r7, #16]
 800542a:	4313      	orrs	r3, r2
 800542c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800542e:	683b      	ldr	r3, [r7, #0]
 8005430:	699b      	ldr	r3, [r3, #24]
 8005432:	011b      	lsls	r3, r3, #4
 8005434:	693a      	ldr	r2, [r7, #16]
 8005436:	4313      	orrs	r3, r2
 8005438:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	693a      	ldr	r2, [r7, #16]
 800543e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	68fa      	ldr	r2, [r7, #12]
 8005444:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005446:	683b      	ldr	r3, [r7, #0]
 8005448:	685a      	ldr	r2, [r3, #4]
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	697a      	ldr	r2, [r7, #20]
 8005452:	621a      	str	r2, [r3, #32]
}
 8005454:	bf00      	nop
 8005456:	371c      	adds	r7, #28
 8005458:	46bd      	mov	sp, r7
 800545a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800545e:	4770      	bx	lr
 8005460:	40010000 	.word	0x40010000
 8005464:	40010400 	.word	0x40010400

08005468 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005468:	b480      	push	{r7}
 800546a:	b087      	sub	sp, #28
 800546c:	af00      	add	r7, sp, #0
 800546e:	6078      	str	r0, [r7, #4]
 8005470:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	6a1b      	ldr	r3, [r3, #32]
 8005476:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	6a1b      	ldr	r3, [r3, #32]
 800547c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	685b      	ldr	r3, [r3, #4]
 8005488:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	69db      	ldr	r3, [r3, #28]
 800548e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005496:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800549e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80054a0:	683b      	ldr	r3, [r7, #0]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	021b      	lsls	r3, r3, #8
 80054a6:	68fa      	ldr	r2, [r7, #12]
 80054a8:	4313      	orrs	r3, r2
 80054aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80054ac:	693b      	ldr	r3, [r7, #16]
 80054ae:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80054b2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80054b4:	683b      	ldr	r3, [r7, #0]
 80054b6:	689b      	ldr	r3, [r3, #8]
 80054b8:	031b      	lsls	r3, r3, #12
 80054ba:	693a      	ldr	r2, [r7, #16]
 80054bc:	4313      	orrs	r3, r2
 80054be:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	4a12      	ldr	r2, [pc, #72]	@ (800550c <TIM_OC4_SetConfig+0xa4>)
 80054c4:	4293      	cmp	r3, r2
 80054c6:	d003      	beq.n	80054d0 <TIM_OC4_SetConfig+0x68>
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	4a11      	ldr	r2, [pc, #68]	@ (8005510 <TIM_OC4_SetConfig+0xa8>)
 80054cc:	4293      	cmp	r3, r2
 80054ce:	d109      	bne.n	80054e4 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80054d0:	697b      	ldr	r3, [r7, #20]
 80054d2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80054d6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80054d8:	683b      	ldr	r3, [r7, #0]
 80054da:	695b      	ldr	r3, [r3, #20]
 80054dc:	019b      	lsls	r3, r3, #6
 80054de:	697a      	ldr	r2, [r7, #20]
 80054e0:	4313      	orrs	r3, r2
 80054e2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	697a      	ldr	r2, [r7, #20]
 80054e8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	68fa      	ldr	r2, [r7, #12]
 80054ee:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80054f0:	683b      	ldr	r3, [r7, #0]
 80054f2:	685a      	ldr	r2, [r3, #4]
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	693a      	ldr	r2, [r7, #16]
 80054fc:	621a      	str	r2, [r3, #32]
}
 80054fe:	bf00      	nop
 8005500:	371c      	adds	r7, #28
 8005502:	46bd      	mov	sp, r7
 8005504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005508:	4770      	bx	lr
 800550a:	bf00      	nop
 800550c:	40010000 	.word	0x40010000
 8005510:	40010400 	.word	0x40010400

08005514 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005514:	b480      	push	{r7}
 8005516:	b087      	sub	sp, #28
 8005518:	af00      	add	r7, sp, #0
 800551a:	60f8      	str	r0, [r7, #12]
 800551c:	60b9      	str	r1, [r7, #8]
 800551e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	6a1b      	ldr	r3, [r3, #32]
 8005524:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	6a1b      	ldr	r3, [r3, #32]
 800552a:	f023 0201 	bic.w	r2, r3, #1
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	699b      	ldr	r3, [r3, #24]
 8005536:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005538:	693b      	ldr	r3, [r7, #16]
 800553a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800553e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	011b      	lsls	r3, r3, #4
 8005544:	693a      	ldr	r2, [r7, #16]
 8005546:	4313      	orrs	r3, r2
 8005548:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800554a:	697b      	ldr	r3, [r7, #20]
 800554c:	f023 030a 	bic.w	r3, r3, #10
 8005550:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005552:	697a      	ldr	r2, [r7, #20]
 8005554:	68bb      	ldr	r3, [r7, #8]
 8005556:	4313      	orrs	r3, r2
 8005558:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	693a      	ldr	r2, [r7, #16]
 800555e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	697a      	ldr	r2, [r7, #20]
 8005564:	621a      	str	r2, [r3, #32]
}
 8005566:	bf00      	nop
 8005568:	371c      	adds	r7, #28
 800556a:	46bd      	mov	sp, r7
 800556c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005570:	4770      	bx	lr

08005572 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005572:	b480      	push	{r7}
 8005574:	b087      	sub	sp, #28
 8005576:	af00      	add	r7, sp, #0
 8005578:	60f8      	str	r0, [r7, #12]
 800557a:	60b9      	str	r1, [r7, #8]
 800557c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	6a1b      	ldr	r3, [r3, #32]
 8005582:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	6a1b      	ldr	r3, [r3, #32]
 8005588:	f023 0210 	bic.w	r2, r3, #16
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	699b      	ldr	r3, [r3, #24]
 8005594:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005596:	693b      	ldr	r3, [r7, #16]
 8005598:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800559c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	031b      	lsls	r3, r3, #12
 80055a2:	693a      	ldr	r2, [r7, #16]
 80055a4:	4313      	orrs	r3, r2
 80055a6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80055a8:	697b      	ldr	r3, [r7, #20]
 80055aa:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80055ae:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80055b0:	68bb      	ldr	r3, [r7, #8]
 80055b2:	011b      	lsls	r3, r3, #4
 80055b4:	697a      	ldr	r2, [r7, #20]
 80055b6:	4313      	orrs	r3, r2
 80055b8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	693a      	ldr	r2, [r7, #16]
 80055be:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	697a      	ldr	r2, [r7, #20]
 80055c4:	621a      	str	r2, [r3, #32]
}
 80055c6:	bf00      	nop
 80055c8:	371c      	adds	r7, #28
 80055ca:	46bd      	mov	sp, r7
 80055cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d0:	4770      	bx	lr

080055d2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80055d2:	b480      	push	{r7}
 80055d4:	b085      	sub	sp, #20
 80055d6:	af00      	add	r7, sp, #0
 80055d8:	6078      	str	r0, [r7, #4]
 80055da:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	689b      	ldr	r3, [r3, #8]
 80055e0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80055e8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80055ea:	683a      	ldr	r2, [r7, #0]
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	4313      	orrs	r3, r2
 80055f0:	f043 0307 	orr.w	r3, r3, #7
 80055f4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	68fa      	ldr	r2, [r7, #12]
 80055fa:	609a      	str	r2, [r3, #8]
}
 80055fc:	bf00      	nop
 80055fe:	3714      	adds	r7, #20
 8005600:	46bd      	mov	sp, r7
 8005602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005606:	4770      	bx	lr

08005608 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005608:	b480      	push	{r7}
 800560a:	b087      	sub	sp, #28
 800560c:	af00      	add	r7, sp, #0
 800560e:	60f8      	str	r0, [r7, #12]
 8005610:	60b9      	str	r1, [r7, #8]
 8005612:	607a      	str	r2, [r7, #4]
 8005614:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	689b      	ldr	r3, [r3, #8]
 800561a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800561c:	697b      	ldr	r3, [r7, #20]
 800561e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005622:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005624:	683b      	ldr	r3, [r7, #0]
 8005626:	021a      	lsls	r2, r3, #8
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	431a      	orrs	r2, r3
 800562c:	68bb      	ldr	r3, [r7, #8]
 800562e:	4313      	orrs	r3, r2
 8005630:	697a      	ldr	r2, [r7, #20]
 8005632:	4313      	orrs	r3, r2
 8005634:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	697a      	ldr	r2, [r7, #20]
 800563a:	609a      	str	r2, [r3, #8]
}
 800563c:	bf00      	nop
 800563e:	371c      	adds	r7, #28
 8005640:	46bd      	mov	sp, r7
 8005642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005646:	4770      	bx	lr

08005648 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005648:	b480      	push	{r7}
 800564a:	b087      	sub	sp, #28
 800564c:	af00      	add	r7, sp, #0
 800564e:	60f8      	str	r0, [r7, #12]
 8005650:	60b9      	str	r1, [r7, #8]
 8005652:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005654:	68bb      	ldr	r3, [r7, #8]
 8005656:	f003 031f 	and.w	r3, r3, #31
 800565a:	2201      	movs	r2, #1
 800565c:	fa02 f303 	lsl.w	r3, r2, r3
 8005660:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	6a1a      	ldr	r2, [r3, #32]
 8005666:	697b      	ldr	r3, [r7, #20]
 8005668:	43db      	mvns	r3, r3
 800566a:	401a      	ands	r2, r3
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	6a1a      	ldr	r2, [r3, #32]
 8005674:	68bb      	ldr	r3, [r7, #8]
 8005676:	f003 031f 	and.w	r3, r3, #31
 800567a:	6879      	ldr	r1, [r7, #4]
 800567c:	fa01 f303 	lsl.w	r3, r1, r3
 8005680:	431a      	orrs	r2, r3
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	621a      	str	r2, [r3, #32]
}
 8005686:	bf00      	nop
 8005688:	371c      	adds	r7, #28
 800568a:	46bd      	mov	sp, r7
 800568c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005690:	4770      	bx	lr
	...

08005694 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005694:	b480      	push	{r7}
 8005696:	b085      	sub	sp, #20
 8005698:	af00      	add	r7, sp, #0
 800569a:	6078      	str	r0, [r7, #4]
 800569c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80056a4:	2b01      	cmp	r3, #1
 80056a6:	d101      	bne.n	80056ac <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80056a8:	2302      	movs	r3, #2
 80056aa:	e05a      	b.n	8005762 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	2201      	movs	r2, #1
 80056b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	2202      	movs	r2, #2
 80056b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	685b      	ldr	r3, [r3, #4]
 80056c2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	689b      	ldr	r3, [r3, #8]
 80056ca:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80056d2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80056d4:	683b      	ldr	r3, [r7, #0]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	68fa      	ldr	r2, [r7, #12]
 80056da:	4313      	orrs	r3, r2
 80056dc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	68fa      	ldr	r2, [r7, #12]
 80056e4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	4a21      	ldr	r2, [pc, #132]	@ (8005770 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80056ec:	4293      	cmp	r3, r2
 80056ee:	d022      	beq.n	8005736 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80056f8:	d01d      	beq.n	8005736 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	4a1d      	ldr	r2, [pc, #116]	@ (8005774 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005700:	4293      	cmp	r3, r2
 8005702:	d018      	beq.n	8005736 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	4a1b      	ldr	r2, [pc, #108]	@ (8005778 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800570a:	4293      	cmp	r3, r2
 800570c:	d013      	beq.n	8005736 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	4a1a      	ldr	r2, [pc, #104]	@ (800577c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005714:	4293      	cmp	r3, r2
 8005716:	d00e      	beq.n	8005736 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	4a18      	ldr	r2, [pc, #96]	@ (8005780 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800571e:	4293      	cmp	r3, r2
 8005720:	d009      	beq.n	8005736 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	4a17      	ldr	r2, [pc, #92]	@ (8005784 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005728:	4293      	cmp	r3, r2
 800572a:	d004      	beq.n	8005736 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	4a15      	ldr	r2, [pc, #84]	@ (8005788 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005732:	4293      	cmp	r3, r2
 8005734:	d10c      	bne.n	8005750 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005736:	68bb      	ldr	r3, [r7, #8]
 8005738:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800573c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800573e:	683b      	ldr	r3, [r7, #0]
 8005740:	685b      	ldr	r3, [r3, #4]
 8005742:	68ba      	ldr	r2, [r7, #8]
 8005744:	4313      	orrs	r3, r2
 8005746:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	68ba      	ldr	r2, [r7, #8]
 800574e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	2201      	movs	r2, #1
 8005754:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	2200      	movs	r2, #0
 800575c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005760:	2300      	movs	r3, #0
}
 8005762:	4618      	mov	r0, r3
 8005764:	3714      	adds	r7, #20
 8005766:	46bd      	mov	sp, r7
 8005768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800576c:	4770      	bx	lr
 800576e:	bf00      	nop
 8005770:	40010000 	.word	0x40010000
 8005774:	40000400 	.word	0x40000400
 8005778:	40000800 	.word	0x40000800
 800577c:	40000c00 	.word	0x40000c00
 8005780:	40010400 	.word	0x40010400
 8005784:	40014000 	.word	0x40014000
 8005788:	40001800 	.word	0x40001800

0800578c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800578c:	b480      	push	{r7}
 800578e:	b083      	sub	sp, #12
 8005790:	af00      	add	r7, sp, #0
 8005792:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005794:	bf00      	nop
 8005796:	370c      	adds	r7, #12
 8005798:	46bd      	mov	sp, r7
 800579a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800579e:	4770      	bx	lr

080057a0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80057a0:	b480      	push	{r7}
 80057a2:	b083      	sub	sp, #12
 80057a4:	af00      	add	r7, sp, #0
 80057a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80057a8:	bf00      	nop
 80057aa:	370c      	adds	r7, #12
 80057ac:	46bd      	mov	sp, r7
 80057ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b2:	4770      	bx	lr

080057b4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80057b4:	b580      	push	{r7, lr}
 80057b6:	b082      	sub	sp, #8
 80057b8:	af00      	add	r7, sp, #0
 80057ba:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d101      	bne.n	80057c6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80057c2:	2301      	movs	r3, #1
 80057c4:	e042      	b.n	800584c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80057cc:	b2db      	uxtb	r3, r3
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d106      	bne.n	80057e0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	2200      	movs	r2, #0
 80057d6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80057da:	6878      	ldr	r0, [r7, #4]
 80057dc:	f7fc fb3e 	bl	8001e5c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	2224      	movs	r2, #36	@ 0x24
 80057e4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	68da      	ldr	r2, [r3, #12]
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80057f6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80057f8:	6878      	ldr	r0, [r7, #4]
 80057fa:	f000 f82b 	bl	8005854 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	691a      	ldr	r2, [r3, #16]
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800580c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	695a      	ldr	r2, [r3, #20]
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800581c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	68da      	ldr	r2, [r3, #12]
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800582c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	2200      	movs	r2, #0
 8005832:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	2220      	movs	r2, #32
 8005838:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	2220      	movs	r2, #32
 8005840:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	2200      	movs	r2, #0
 8005848:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800584a:	2300      	movs	r3, #0
}
 800584c:	4618      	mov	r0, r3
 800584e:	3708      	adds	r7, #8
 8005850:	46bd      	mov	sp, r7
 8005852:	bd80      	pop	{r7, pc}

08005854 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005854:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005858:	b0c0      	sub	sp, #256	@ 0x100
 800585a:	af00      	add	r7, sp, #0
 800585c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005860:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	691b      	ldr	r3, [r3, #16]
 8005868:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800586c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005870:	68d9      	ldr	r1, [r3, #12]
 8005872:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005876:	681a      	ldr	r2, [r3, #0]
 8005878:	ea40 0301 	orr.w	r3, r0, r1
 800587c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800587e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005882:	689a      	ldr	r2, [r3, #8]
 8005884:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005888:	691b      	ldr	r3, [r3, #16]
 800588a:	431a      	orrs	r2, r3
 800588c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005890:	695b      	ldr	r3, [r3, #20]
 8005892:	431a      	orrs	r2, r3
 8005894:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005898:	69db      	ldr	r3, [r3, #28]
 800589a:	4313      	orrs	r3, r2
 800589c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80058a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	68db      	ldr	r3, [r3, #12]
 80058a8:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80058ac:	f021 010c 	bic.w	r1, r1, #12
 80058b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80058b4:	681a      	ldr	r2, [r3, #0]
 80058b6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80058ba:	430b      	orrs	r3, r1
 80058bc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80058be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	695b      	ldr	r3, [r3, #20]
 80058c6:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80058ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80058ce:	6999      	ldr	r1, [r3, #24]
 80058d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80058d4:	681a      	ldr	r2, [r3, #0]
 80058d6:	ea40 0301 	orr.w	r3, r0, r1
 80058da:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80058dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80058e0:	681a      	ldr	r2, [r3, #0]
 80058e2:	4b8f      	ldr	r3, [pc, #572]	@ (8005b20 <UART_SetConfig+0x2cc>)
 80058e4:	429a      	cmp	r2, r3
 80058e6:	d005      	beq.n	80058f4 <UART_SetConfig+0xa0>
 80058e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80058ec:	681a      	ldr	r2, [r3, #0]
 80058ee:	4b8d      	ldr	r3, [pc, #564]	@ (8005b24 <UART_SetConfig+0x2d0>)
 80058f0:	429a      	cmp	r2, r3
 80058f2:	d104      	bne.n	80058fe <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80058f4:	f7fd fbc2 	bl	800307c <HAL_RCC_GetPCLK2Freq>
 80058f8:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80058fc:	e003      	b.n	8005906 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80058fe:	f7fd fba9 	bl	8003054 <HAL_RCC_GetPCLK1Freq>
 8005902:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005906:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800590a:	69db      	ldr	r3, [r3, #28]
 800590c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005910:	f040 810c 	bne.w	8005b2c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005914:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005918:	2200      	movs	r2, #0
 800591a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800591e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8005922:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8005926:	4622      	mov	r2, r4
 8005928:	462b      	mov	r3, r5
 800592a:	1891      	adds	r1, r2, r2
 800592c:	65b9      	str	r1, [r7, #88]	@ 0x58
 800592e:	415b      	adcs	r3, r3
 8005930:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005932:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8005936:	4621      	mov	r1, r4
 8005938:	eb12 0801 	adds.w	r8, r2, r1
 800593c:	4629      	mov	r1, r5
 800593e:	eb43 0901 	adc.w	r9, r3, r1
 8005942:	f04f 0200 	mov.w	r2, #0
 8005946:	f04f 0300 	mov.w	r3, #0
 800594a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800594e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005952:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005956:	4690      	mov	r8, r2
 8005958:	4699      	mov	r9, r3
 800595a:	4623      	mov	r3, r4
 800595c:	eb18 0303 	adds.w	r3, r8, r3
 8005960:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005964:	462b      	mov	r3, r5
 8005966:	eb49 0303 	adc.w	r3, r9, r3
 800596a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800596e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005972:	685b      	ldr	r3, [r3, #4]
 8005974:	2200      	movs	r2, #0
 8005976:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800597a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800597e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8005982:	460b      	mov	r3, r1
 8005984:	18db      	adds	r3, r3, r3
 8005986:	653b      	str	r3, [r7, #80]	@ 0x50
 8005988:	4613      	mov	r3, r2
 800598a:	eb42 0303 	adc.w	r3, r2, r3
 800598e:	657b      	str	r3, [r7, #84]	@ 0x54
 8005990:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8005994:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8005998:	f7fa fc3a 	bl	8000210 <__aeabi_uldivmod>
 800599c:	4602      	mov	r2, r0
 800599e:	460b      	mov	r3, r1
 80059a0:	4b61      	ldr	r3, [pc, #388]	@ (8005b28 <UART_SetConfig+0x2d4>)
 80059a2:	fba3 2302 	umull	r2, r3, r3, r2
 80059a6:	095b      	lsrs	r3, r3, #5
 80059a8:	011c      	lsls	r4, r3, #4
 80059aa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80059ae:	2200      	movs	r2, #0
 80059b0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80059b4:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80059b8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80059bc:	4642      	mov	r2, r8
 80059be:	464b      	mov	r3, r9
 80059c0:	1891      	adds	r1, r2, r2
 80059c2:	64b9      	str	r1, [r7, #72]	@ 0x48
 80059c4:	415b      	adcs	r3, r3
 80059c6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80059c8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80059cc:	4641      	mov	r1, r8
 80059ce:	eb12 0a01 	adds.w	sl, r2, r1
 80059d2:	4649      	mov	r1, r9
 80059d4:	eb43 0b01 	adc.w	fp, r3, r1
 80059d8:	f04f 0200 	mov.w	r2, #0
 80059dc:	f04f 0300 	mov.w	r3, #0
 80059e0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80059e4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80059e8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80059ec:	4692      	mov	sl, r2
 80059ee:	469b      	mov	fp, r3
 80059f0:	4643      	mov	r3, r8
 80059f2:	eb1a 0303 	adds.w	r3, sl, r3
 80059f6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80059fa:	464b      	mov	r3, r9
 80059fc:	eb4b 0303 	adc.w	r3, fp, r3
 8005a00:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005a04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a08:	685b      	ldr	r3, [r3, #4]
 8005a0a:	2200      	movs	r2, #0
 8005a0c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005a10:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8005a14:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8005a18:	460b      	mov	r3, r1
 8005a1a:	18db      	adds	r3, r3, r3
 8005a1c:	643b      	str	r3, [r7, #64]	@ 0x40
 8005a1e:	4613      	mov	r3, r2
 8005a20:	eb42 0303 	adc.w	r3, r2, r3
 8005a24:	647b      	str	r3, [r7, #68]	@ 0x44
 8005a26:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8005a2a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8005a2e:	f7fa fbef 	bl	8000210 <__aeabi_uldivmod>
 8005a32:	4602      	mov	r2, r0
 8005a34:	460b      	mov	r3, r1
 8005a36:	4611      	mov	r1, r2
 8005a38:	4b3b      	ldr	r3, [pc, #236]	@ (8005b28 <UART_SetConfig+0x2d4>)
 8005a3a:	fba3 2301 	umull	r2, r3, r3, r1
 8005a3e:	095b      	lsrs	r3, r3, #5
 8005a40:	2264      	movs	r2, #100	@ 0x64
 8005a42:	fb02 f303 	mul.w	r3, r2, r3
 8005a46:	1acb      	subs	r3, r1, r3
 8005a48:	00db      	lsls	r3, r3, #3
 8005a4a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8005a4e:	4b36      	ldr	r3, [pc, #216]	@ (8005b28 <UART_SetConfig+0x2d4>)
 8005a50:	fba3 2302 	umull	r2, r3, r3, r2
 8005a54:	095b      	lsrs	r3, r3, #5
 8005a56:	005b      	lsls	r3, r3, #1
 8005a58:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8005a5c:	441c      	add	r4, r3
 8005a5e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005a62:	2200      	movs	r2, #0
 8005a64:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005a68:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8005a6c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8005a70:	4642      	mov	r2, r8
 8005a72:	464b      	mov	r3, r9
 8005a74:	1891      	adds	r1, r2, r2
 8005a76:	63b9      	str	r1, [r7, #56]	@ 0x38
 8005a78:	415b      	adcs	r3, r3
 8005a7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005a7c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8005a80:	4641      	mov	r1, r8
 8005a82:	1851      	adds	r1, r2, r1
 8005a84:	6339      	str	r1, [r7, #48]	@ 0x30
 8005a86:	4649      	mov	r1, r9
 8005a88:	414b      	adcs	r3, r1
 8005a8a:	637b      	str	r3, [r7, #52]	@ 0x34
 8005a8c:	f04f 0200 	mov.w	r2, #0
 8005a90:	f04f 0300 	mov.w	r3, #0
 8005a94:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8005a98:	4659      	mov	r1, fp
 8005a9a:	00cb      	lsls	r3, r1, #3
 8005a9c:	4651      	mov	r1, sl
 8005a9e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005aa2:	4651      	mov	r1, sl
 8005aa4:	00ca      	lsls	r2, r1, #3
 8005aa6:	4610      	mov	r0, r2
 8005aa8:	4619      	mov	r1, r3
 8005aaa:	4603      	mov	r3, r0
 8005aac:	4642      	mov	r2, r8
 8005aae:	189b      	adds	r3, r3, r2
 8005ab0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005ab4:	464b      	mov	r3, r9
 8005ab6:	460a      	mov	r2, r1
 8005ab8:	eb42 0303 	adc.w	r3, r2, r3
 8005abc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005ac0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005ac4:	685b      	ldr	r3, [r3, #4]
 8005ac6:	2200      	movs	r2, #0
 8005ac8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005acc:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8005ad0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8005ad4:	460b      	mov	r3, r1
 8005ad6:	18db      	adds	r3, r3, r3
 8005ad8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005ada:	4613      	mov	r3, r2
 8005adc:	eb42 0303 	adc.w	r3, r2, r3
 8005ae0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005ae2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005ae6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8005aea:	f7fa fb91 	bl	8000210 <__aeabi_uldivmod>
 8005aee:	4602      	mov	r2, r0
 8005af0:	460b      	mov	r3, r1
 8005af2:	4b0d      	ldr	r3, [pc, #52]	@ (8005b28 <UART_SetConfig+0x2d4>)
 8005af4:	fba3 1302 	umull	r1, r3, r3, r2
 8005af8:	095b      	lsrs	r3, r3, #5
 8005afa:	2164      	movs	r1, #100	@ 0x64
 8005afc:	fb01 f303 	mul.w	r3, r1, r3
 8005b00:	1ad3      	subs	r3, r2, r3
 8005b02:	00db      	lsls	r3, r3, #3
 8005b04:	3332      	adds	r3, #50	@ 0x32
 8005b06:	4a08      	ldr	r2, [pc, #32]	@ (8005b28 <UART_SetConfig+0x2d4>)
 8005b08:	fba2 2303 	umull	r2, r3, r2, r3
 8005b0c:	095b      	lsrs	r3, r3, #5
 8005b0e:	f003 0207 	and.w	r2, r3, #7
 8005b12:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	4422      	add	r2, r4
 8005b1a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005b1c:	e106      	b.n	8005d2c <UART_SetConfig+0x4d8>
 8005b1e:	bf00      	nop
 8005b20:	40011000 	.word	0x40011000
 8005b24:	40011400 	.word	0x40011400
 8005b28:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005b2c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005b30:	2200      	movs	r2, #0
 8005b32:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8005b36:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8005b3a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8005b3e:	4642      	mov	r2, r8
 8005b40:	464b      	mov	r3, r9
 8005b42:	1891      	adds	r1, r2, r2
 8005b44:	6239      	str	r1, [r7, #32]
 8005b46:	415b      	adcs	r3, r3
 8005b48:	627b      	str	r3, [r7, #36]	@ 0x24
 8005b4a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005b4e:	4641      	mov	r1, r8
 8005b50:	1854      	adds	r4, r2, r1
 8005b52:	4649      	mov	r1, r9
 8005b54:	eb43 0501 	adc.w	r5, r3, r1
 8005b58:	f04f 0200 	mov.w	r2, #0
 8005b5c:	f04f 0300 	mov.w	r3, #0
 8005b60:	00eb      	lsls	r3, r5, #3
 8005b62:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005b66:	00e2      	lsls	r2, r4, #3
 8005b68:	4614      	mov	r4, r2
 8005b6a:	461d      	mov	r5, r3
 8005b6c:	4643      	mov	r3, r8
 8005b6e:	18e3      	adds	r3, r4, r3
 8005b70:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005b74:	464b      	mov	r3, r9
 8005b76:	eb45 0303 	adc.w	r3, r5, r3
 8005b7a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005b7e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005b82:	685b      	ldr	r3, [r3, #4]
 8005b84:	2200      	movs	r2, #0
 8005b86:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005b8a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005b8e:	f04f 0200 	mov.w	r2, #0
 8005b92:	f04f 0300 	mov.w	r3, #0
 8005b96:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8005b9a:	4629      	mov	r1, r5
 8005b9c:	008b      	lsls	r3, r1, #2
 8005b9e:	4621      	mov	r1, r4
 8005ba0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005ba4:	4621      	mov	r1, r4
 8005ba6:	008a      	lsls	r2, r1, #2
 8005ba8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8005bac:	f7fa fb30 	bl	8000210 <__aeabi_uldivmod>
 8005bb0:	4602      	mov	r2, r0
 8005bb2:	460b      	mov	r3, r1
 8005bb4:	4b60      	ldr	r3, [pc, #384]	@ (8005d38 <UART_SetConfig+0x4e4>)
 8005bb6:	fba3 2302 	umull	r2, r3, r3, r2
 8005bba:	095b      	lsrs	r3, r3, #5
 8005bbc:	011c      	lsls	r4, r3, #4
 8005bbe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005bc2:	2200      	movs	r2, #0
 8005bc4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005bc8:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8005bcc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8005bd0:	4642      	mov	r2, r8
 8005bd2:	464b      	mov	r3, r9
 8005bd4:	1891      	adds	r1, r2, r2
 8005bd6:	61b9      	str	r1, [r7, #24]
 8005bd8:	415b      	adcs	r3, r3
 8005bda:	61fb      	str	r3, [r7, #28]
 8005bdc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005be0:	4641      	mov	r1, r8
 8005be2:	1851      	adds	r1, r2, r1
 8005be4:	6139      	str	r1, [r7, #16]
 8005be6:	4649      	mov	r1, r9
 8005be8:	414b      	adcs	r3, r1
 8005bea:	617b      	str	r3, [r7, #20]
 8005bec:	f04f 0200 	mov.w	r2, #0
 8005bf0:	f04f 0300 	mov.w	r3, #0
 8005bf4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005bf8:	4659      	mov	r1, fp
 8005bfa:	00cb      	lsls	r3, r1, #3
 8005bfc:	4651      	mov	r1, sl
 8005bfe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005c02:	4651      	mov	r1, sl
 8005c04:	00ca      	lsls	r2, r1, #3
 8005c06:	4610      	mov	r0, r2
 8005c08:	4619      	mov	r1, r3
 8005c0a:	4603      	mov	r3, r0
 8005c0c:	4642      	mov	r2, r8
 8005c0e:	189b      	adds	r3, r3, r2
 8005c10:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005c14:	464b      	mov	r3, r9
 8005c16:	460a      	mov	r2, r1
 8005c18:	eb42 0303 	adc.w	r3, r2, r3
 8005c1c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005c20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005c24:	685b      	ldr	r3, [r3, #4]
 8005c26:	2200      	movs	r2, #0
 8005c28:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005c2a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8005c2c:	f04f 0200 	mov.w	r2, #0
 8005c30:	f04f 0300 	mov.w	r3, #0
 8005c34:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8005c38:	4649      	mov	r1, r9
 8005c3a:	008b      	lsls	r3, r1, #2
 8005c3c:	4641      	mov	r1, r8
 8005c3e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005c42:	4641      	mov	r1, r8
 8005c44:	008a      	lsls	r2, r1, #2
 8005c46:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8005c4a:	f7fa fae1 	bl	8000210 <__aeabi_uldivmod>
 8005c4e:	4602      	mov	r2, r0
 8005c50:	460b      	mov	r3, r1
 8005c52:	4611      	mov	r1, r2
 8005c54:	4b38      	ldr	r3, [pc, #224]	@ (8005d38 <UART_SetConfig+0x4e4>)
 8005c56:	fba3 2301 	umull	r2, r3, r3, r1
 8005c5a:	095b      	lsrs	r3, r3, #5
 8005c5c:	2264      	movs	r2, #100	@ 0x64
 8005c5e:	fb02 f303 	mul.w	r3, r2, r3
 8005c62:	1acb      	subs	r3, r1, r3
 8005c64:	011b      	lsls	r3, r3, #4
 8005c66:	3332      	adds	r3, #50	@ 0x32
 8005c68:	4a33      	ldr	r2, [pc, #204]	@ (8005d38 <UART_SetConfig+0x4e4>)
 8005c6a:	fba2 2303 	umull	r2, r3, r2, r3
 8005c6e:	095b      	lsrs	r3, r3, #5
 8005c70:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005c74:	441c      	add	r4, r3
 8005c76:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005c7a:	2200      	movs	r2, #0
 8005c7c:	673b      	str	r3, [r7, #112]	@ 0x70
 8005c7e:	677a      	str	r2, [r7, #116]	@ 0x74
 8005c80:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8005c84:	4642      	mov	r2, r8
 8005c86:	464b      	mov	r3, r9
 8005c88:	1891      	adds	r1, r2, r2
 8005c8a:	60b9      	str	r1, [r7, #8]
 8005c8c:	415b      	adcs	r3, r3
 8005c8e:	60fb      	str	r3, [r7, #12]
 8005c90:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005c94:	4641      	mov	r1, r8
 8005c96:	1851      	adds	r1, r2, r1
 8005c98:	6039      	str	r1, [r7, #0]
 8005c9a:	4649      	mov	r1, r9
 8005c9c:	414b      	adcs	r3, r1
 8005c9e:	607b      	str	r3, [r7, #4]
 8005ca0:	f04f 0200 	mov.w	r2, #0
 8005ca4:	f04f 0300 	mov.w	r3, #0
 8005ca8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005cac:	4659      	mov	r1, fp
 8005cae:	00cb      	lsls	r3, r1, #3
 8005cb0:	4651      	mov	r1, sl
 8005cb2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005cb6:	4651      	mov	r1, sl
 8005cb8:	00ca      	lsls	r2, r1, #3
 8005cba:	4610      	mov	r0, r2
 8005cbc:	4619      	mov	r1, r3
 8005cbe:	4603      	mov	r3, r0
 8005cc0:	4642      	mov	r2, r8
 8005cc2:	189b      	adds	r3, r3, r2
 8005cc4:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005cc6:	464b      	mov	r3, r9
 8005cc8:	460a      	mov	r2, r1
 8005cca:	eb42 0303 	adc.w	r3, r2, r3
 8005cce:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005cd0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005cd4:	685b      	ldr	r3, [r3, #4]
 8005cd6:	2200      	movs	r2, #0
 8005cd8:	663b      	str	r3, [r7, #96]	@ 0x60
 8005cda:	667a      	str	r2, [r7, #100]	@ 0x64
 8005cdc:	f04f 0200 	mov.w	r2, #0
 8005ce0:	f04f 0300 	mov.w	r3, #0
 8005ce4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8005ce8:	4649      	mov	r1, r9
 8005cea:	008b      	lsls	r3, r1, #2
 8005cec:	4641      	mov	r1, r8
 8005cee:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005cf2:	4641      	mov	r1, r8
 8005cf4:	008a      	lsls	r2, r1, #2
 8005cf6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8005cfa:	f7fa fa89 	bl	8000210 <__aeabi_uldivmod>
 8005cfe:	4602      	mov	r2, r0
 8005d00:	460b      	mov	r3, r1
 8005d02:	4b0d      	ldr	r3, [pc, #52]	@ (8005d38 <UART_SetConfig+0x4e4>)
 8005d04:	fba3 1302 	umull	r1, r3, r3, r2
 8005d08:	095b      	lsrs	r3, r3, #5
 8005d0a:	2164      	movs	r1, #100	@ 0x64
 8005d0c:	fb01 f303 	mul.w	r3, r1, r3
 8005d10:	1ad3      	subs	r3, r2, r3
 8005d12:	011b      	lsls	r3, r3, #4
 8005d14:	3332      	adds	r3, #50	@ 0x32
 8005d16:	4a08      	ldr	r2, [pc, #32]	@ (8005d38 <UART_SetConfig+0x4e4>)
 8005d18:	fba2 2303 	umull	r2, r3, r2, r3
 8005d1c:	095b      	lsrs	r3, r3, #5
 8005d1e:	f003 020f 	and.w	r2, r3, #15
 8005d22:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	4422      	add	r2, r4
 8005d2a:	609a      	str	r2, [r3, #8]
}
 8005d2c:	bf00      	nop
 8005d2e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8005d32:	46bd      	mov	sp, r7
 8005d34:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005d38:	51eb851f 	.word	0x51eb851f

08005d3c <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8005d3c:	b480      	push	{r7}
 8005d3e:	b085      	sub	sp, #20
 8005d40:	af00      	add	r7, sp, #0
 8005d42:	4603      	mov	r3, r0
 8005d44:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8005d46:	2300      	movs	r3, #0
 8005d48:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8005d4a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005d4e:	2b84      	cmp	r3, #132	@ 0x84
 8005d50:	d005      	beq.n	8005d5e <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8005d52:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	4413      	add	r3, r2
 8005d5a:	3303      	adds	r3, #3
 8005d5c:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8005d5e:	68fb      	ldr	r3, [r7, #12]
}
 8005d60:	4618      	mov	r0, r3
 8005d62:	3714      	adds	r7, #20
 8005d64:	46bd      	mov	sp, r7
 8005d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d6a:	4770      	bx	lr

08005d6c <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8005d6c:	b580      	push	{r7, lr}
 8005d6e:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8005d70:	f000 fafc 	bl	800636c <vTaskStartScheduler>
  
  return osOK;
 8005d74:	2300      	movs	r3, #0
}
 8005d76:	4618      	mov	r0, r3
 8005d78:	bd80      	pop	{r7, pc}

08005d7a <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8005d7a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005d7c:	b089      	sub	sp, #36	@ 0x24
 8005d7e:	af04      	add	r7, sp, #16
 8005d80:	6078      	str	r0, [r7, #4]
 8005d82:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	695b      	ldr	r3, [r3, #20]
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d020      	beq.n	8005dce <osThreadCreate+0x54>
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	699b      	ldr	r3, [r3, #24]
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d01c      	beq.n	8005dce <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	685c      	ldr	r4, [r3, #4]
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	691e      	ldr	r6, [r3, #16]
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005da6:	4618      	mov	r0, r3
 8005da8:	f7ff ffc8 	bl	8005d3c <makeFreeRtosPriority>
 8005dac:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	695b      	ldr	r3, [r3, #20]
 8005db2:	687a      	ldr	r2, [r7, #4]
 8005db4:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005db6:	9202      	str	r2, [sp, #8]
 8005db8:	9301      	str	r3, [sp, #4]
 8005dba:	9100      	str	r1, [sp, #0]
 8005dbc:	683b      	ldr	r3, [r7, #0]
 8005dbe:	4632      	mov	r2, r6
 8005dc0:	4629      	mov	r1, r5
 8005dc2:	4620      	mov	r0, r4
 8005dc4:	f000 f8ed 	bl	8005fa2 <xTaskCreateStatic>
 8005dc8:	4603      	mov	r3, r0
 8005dca:	60fb      	str	r3, [r7, #12]
 8005dcc:	e01c      	b.n	8005e08 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	685c      	ldr	r4, [r3, #4]
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005dda:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005de2:	4618      	mov	r0, r3
 8005de4:	f7ff ffaa 	bl	8005d3c <makeFreeRtosPriority>
 8005de8:	4602      	mov	r2, r0
 8005dea:	f107 030c 	add.w	r3, r7, #12
 8005dee:	9301      	str	r3, [sp, #4]
 8005df0:	9200      	str	r2, [sp, #0]
 8005df2:	683b      	ldr	r3, [r7, #0]
 8005df4:	4632      	mov	r2, r6
 8005df6:	4629      	mov	r1, r5
 8005df8:	4620      	mov	r0, r4
 8005dfa:	f000 f932 	bl	8006062 <xTaskCreate>
 8005dfe:	4603      	mov	r3, r0
 8005e00:	2b01      	cmp	r3, #1
 8005e02:	d001      	beq.n	8005e08 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8005e04:	2300      	movs	r3, #0
 8005e06:	e000      	b.n	8005e0a <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8005e08:	68fb      	ldr	r3, [r7, #12]
}
 8005e0a:	4618      	mov	r0, r3
 8005e0c:	3714      	adds	r7, #20
 8005e0e:	46bd      	mov	sp, r7
 8005e10:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005e12 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8005e12:	b580      	push	{r7, lr}
 8005e14:	b084      	sub	sp, #16
 8005e16:	af00      	add	r7, sp, #0
 8005e18:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d001      	beq.n	8005e28 <osDelay+0x16>
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	e000      	b.n	8005e2a <osDelay+0x18>
 8005e28:	2301      	movs	r3, #1
 8005e2a:	4618      	mov	r0, r3
 8005e2c:	f000 fa68 	bl	8006300 <vTaskDelay>
  
  return osOK;
 8005e30:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8005e32:	4618      	mov	r0, r3
 8005e34:	3710      	adds	r7, #16
 8005e36:	46bd      	mov	sp, r7
 8005e38:	bd80      	pop	{r7, pc}

08005e3a <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005e3a:	b480      	push	{r7}
 8005e3c:	b083      	sub	sp, #12
 8005e3e:	af00      	add	r7, sp, #0
 8005e40:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	f103 0208 	add.w	r2, r3, #8
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	f04f 32ff 	mov.w	r2, #4294967295
 8005e52:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	f103 0208 	add.w	r2, r3, #8
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	f103 0208 	add.w	r2, r3, #8
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	2200      	movs	r2, #0
 8005e6c:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005e6e:	bf00      	nop
 8005e70:	370c      	adds	r7, #12
 8005e72:	46bd      	mov	sp, r7
 8005e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e78:	4770      	bx	lr

08005e7a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005e7a:	b480      	push	{r7}
 8005e7c:	b083      	sub	sp, #12
 8005e7e:	af00      	add	r7, sp, #0
 8005e80:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	2200      	movs	r2, #0
 8005e86:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005e88:	bf00      	nop
 8005e8a:	370c      	adds	r7, #12
 8005e8c:	46bd      	mov	sp, r7
 8005e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e92:	4770      	bx	lr

08005e94 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005e94:	b480      	push	{r7}
 8005e96:	b085      	sub	sp, #20
 8005e98:	af00      	add	r7, sp, #0
 8005e9a:	6078      	str	r0, [r7, #4]
 8005e9c:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	685b      	ldr	r3, [r3, #4]
 8005ea2:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005ea4:	683b      	ldr	r3, [r7, #0]
 8005ea6:	68fa      	ldr	r2, [r7, #12]
 8005ea8:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	689a      	ldr	r2, [r3, #8]
 8005eae:	683b      	ldr	r3, [r7, #0]
 8005eb0:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	689b      	ldr	r3, [r3, #8]
 8005eb6:	683a      	ldr	r2, [r7, #0]
 8005eb8:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	683a      	ldr	r2, [r7, #0]
 8005ebe:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8005ec0:	683b      	ldr	r3, [r7, #0]
 8005ec2:	687a      	ldr	r2, [r7, #4]
 8005ec4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	1c5a      	adds	r2, r3, #1
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	601a      	str	r2, [r3, #0]
}
 8005ed0:	bf00      	nop
 8005ed2:	3714      	adds	r7, #20
 8005ed4:	46bd      	mov	sp, r7
 8005ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eda:	4770      	bx	lr

08005edc <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005edc:	b480      	push	{r7}
 8005ede:	b085      	sub	sp, #20
 8005ee0:	af00      	add	r7, sp, #0
 8005ee2:	6078      	str	r0, [r7, #4]
 8005ee4:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005ee6:	683b      	ldr	r3, [r7, #0]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005eec:	68bb      	ldr	r3, [r7, #8]
 8005eee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ef2:	d103      	bne.n	8005efc <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	691b      	ldr	r3, [r3, #16]
 8005ef8:	60fb      	str	r3, [r7, #12]
 8005efa:	e00c      	b.n	8005f16 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	3308      	adds	r3, #8
 8005f00:	60fb      	str	r3, [r7, #12]
 8005f02:	e002      	b.n	8005f0a <vListInsert+0x2e>
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	685b      	ldr	r3, [r3, #4]
 8005f08:	60fb      	str	r3, [r7, #12]
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	685b      	ldr	r3, [r3, #4]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	68ba      	ldr	r2, [r7, #8]
 8005f12:	429a      	cmp	r2, r3
 8005f14:	d2f6      	bcs.n	8005f04 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	685a      	ldr	r2, [r3, #4]
 8005f1a:	683b      	ldr	r3, [r7, #0]
 8005f1c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005f1e:	683b      	ldr	r3, [r7, #0]
 8005f20:	685b      	ldr	r3, [r3, #4]
 8005f22:	683a      	ldr	r2, [r7, #0]
 8005f24:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005f26:	683b      	ldr	r3, [r7, #0]
 8005f28:	68fa      	ldr	r2, [r7, #12]
 8005f2a:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	683a      	ldr	r2, [r7, #0]
 8005f30:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8005f32:	683b      	ldr	r3, [r7, #0]
 8005f34:	687a      	ldr	r2, [r7, #4]
 8005f36:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	1c5a      	adds	r2, r3, #1
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	601a      	str	r2, [r3, #0]
}
 8005f42:	bf00      	nop
 8005f44:	3714      	adds	r7, #20
 8005f46:	46bd      	mov	sp, r7
 8005f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f4c:	4770      	bx	lr

08005f4e <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005f4e:	b480      	push	{r7}
 8005f50:	b085      	sub	sp, #20
 8005f52:	af00      	add	r7, sp, #0
 8005f54:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	691b      	ldr	r3, [r3, #16]
 8005f5a:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	685b      	ldr	r3, [r3, #4]
 8005f60:	687a      	ldr	r2, [r7, #4]
 8005f62:	6892      	ldr	r2, [r2, #8]
 8005f64:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	689b      	ldr	r3, [r3, #8]
 8005f6a:	687a      	ldr	r2, [r7, #4]
 8005f6c:	6852      	ldr	r2, [r2, #4]
 8005f6e:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	685b      	ldr	r3, [r3, #4]
 8005f74:	687a      	ldr	r2, [r7, #4]
 8005f76:	429a      	cmp	r2, r3
 8005f78:	d103      	bne.n	8005f82 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	689a      	ldr	r2, [r3, #8]
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	2200      	movs	r2, #0
 8005f86:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	1e5a      	subs	r2, r3, #1
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	681b      	ldr	r3, [r3, #0]
}
 8005f96:	4618      	mov	r0, r3
 8005f98:	3714      	adds	r7, #20
 8005f9a:	46bd      	mov	sp, r7
 8005f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fa0:	4770      	bx	lr

08005fa2 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005fa2:	b580      	push	{r7, lr}
 8005fa4:	b08e      	sub	sp, #56	@ 0x38
 8005fa6:	af04      	add	r7, sp, #16
 8005fa8:	60f8      	str	r0, [r7, #12]
 8005faa:	60b9      	str	r1, [r7, #8]
 8005fac:	607a      	str	r2, [r7, #4]
 8005fae:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005fb0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d10b      	bne.n	8005fce <xTaskCreateStatic+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005fb6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005fba:	f383 8811 	msr	BASEPRI, r3
 8005fbe:	f3bf 8f6f 	isb	sy
 8005fc2:	f3bf 8f4f 	dsb	sy
 8005fc6:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8005fc8:	bf00      	nop
 8005fca:	bf00      	nop
 8005fcc:	e7fd      	b.n	8005fca <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8005fce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d10b      	bne.n	8005fec <xTaskCreateStatic+0x4a>
	__asm volatile
 8005fd4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005fd8:	f383 8811 	msr	BASEPRI, r3
 8005fdc:	f3bf 8f6f 	isb	sy
 8005fe0:	f3bf 8f4f 	dsb	sy
 8005fe4:	61fb      	str	r3, [r7, #28]
}
 8005fe6:	bf00      	nop
 8005fe8:	bf00      	nop
 8005fea:	e7fd      	b.n	8005fe8 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005fec:	23a0      	movs	r3, #160	@ 0xa0
 8005fee:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005ff0:	693b      	ldr	r3, [r7, #16]
 8005ff2:	2ba0      	cmp	r3, #160	@ 0xa0
 8005ff4:	d00b      	beq.n	800600e <xTaskCreateStatic+0x6c>
	__asm volatile
 8005ff6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ffa:	f383 8811 	msr	BASEPRI, r3
 8005ffe:	f3bf 8f6f 	isb	sy
 8006002:	f3bf 8f4f 	dsb	sy
 8006006:	61bb      	str	r3, [r7, #24]
}
 8006008:	bf00      	nop
 800600a:	bf00      	nop
 800600c:	e7fd      	b.n	800600a <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800600e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8006010:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006012:	2b00      	cmp	r3, #0
 8006014:	d01e      	beq.n	8006054 <xTaskCreateStatic+0xb2>
 8006016:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006018:	2b00      	cmp	r3, #0
 800601a:	d01b      	beq.n	8006054 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800601c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800601e:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006020:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006022:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006024:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006026:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006028:	2202      	movs	r2, #2
 800602a:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800602e:	2300      	movs	r3, #0
 8006030:	9303      	str	r3, [sp, #12]
 8006032:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006034:	9302      	str	r3, [sp, #8]
 8006036:	f107 0314 	add.w	r3, r7, #20
 800603a:	9301      	str	r3, [sp, #4]
 800603c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800603e:	9300      	str	r3, [sp, #0]
 8006040:	683b      	ldr	r3, [r7, #0]
 8006042:	687a      	ldr	r2, [r7, #4]
 8006044:	68b9      	ldr	r1, [r7, #8]
 8006046:	68f8      	ldr	r0, [r7, #12]
 8006048:	f000 f850 	bl	80060ec <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800604c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800604e:	f000 f8ed 	bl	800622c <prvAddNewTaskToReadyList>
 8006052:	e001      	b.n	8006058 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8006054:	2300      	movs	r3, #0
 8006056:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8006058:	697b      	ldr	r3, [r7, #20]
	}
 800605a:	4618      	mov	r0, r3
 800605c:	3728      	adds	r7, #40	@ 0x28
 800605e:	46bd      	mov	sp, r7
 8006060:	bd80      	pop	{r7, pc}

08006062 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8006062:	b580      	push	{r7, lr}
 8006064:	b08c      	sub	sp, #48	@ 0x30
 8006066:	af04      	add	r7, sp, #16
 8006068:	60f8      	str	r0, [r7, #12]
 800606a:	60b9      	str	r1, [r7, #8]
 800606c:	603b      	str	r3, [r7, #0]
 800606e:	4613      	mov	r3, r2
 8006070:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8006072:	88fb      	ldrh	r3, [r7, #6]
 8006074:	009b      	lsls	r3, r3, #2
 8006076:	4618      	mov	r0, r3
 8006078:	f000 fefe 	bl	8006e78 <pvPortMalloc>
 800607c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800607e:	697b      	ldr	r3, [r7, #20]
 8006080:	2b00      	cmp	r3, #0
 8006082:	d00e      	beq.n	80060a2 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8006084:	20a0      	movs	r0, #160	@ 0xa0
 8006086:	f000 fef7 	bl	8006e78 <pvPortMalloc>
 800608a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800608c:	69fb      	ldr	r3, [r7, #28]
 800608e:	2b00      	cmp	r3, #0
 8006090:	d003      	beq.n	800609a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8006092:	69fb      	ldr	r3, [r7, #28]
 8006094:	697a      	ldr	r2, [r7, #20]
 8006096:	631a      	str	r2, [r3, #48]	@ 0x30
 8006098:	e005      	b.n	80060a6 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800609a:	6978      	ldr	r0, [r7, #20]
 800609c:	f000 ffba 	bl	8007014 <vPortFree>
 80060a0:	e001      	b.n	80060a6 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80060a2:	2300      	movs	r3, #0
 80060a4:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80060a6:	69fb      	ldr	r3, [r7, #28]
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d017      	beq.n	80060dc <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80060ac:	69fb      	ldr	r3, [r7, #28]
 80060ae:	2200      	movs	r2, #0
 80060b0:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80060b4:	88fa      	ldrh	r2, [r7, #6]
 80060b6:	2300      	movs	r3, #0
 80060b8:	9303      	str	r3, [sp, #12]
 80060ba:	69fb      	ldr	r3, [r7, #28]
 80060bc:	9302      	str	r3, [sp, #8]
 80060be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80060c0:	9301      	str	r3, [sp, #4]
 80060c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80060c4:	9300      	str	r3, [sp, #0]
 80060c6:	683b      	ldr	r3, [r7, #0]
 80060c8:	68b9      	ldr	r1, [r7, #8]
 80060ca:	68f8      	ldr	r0, [r7, #12]
 80060cc:	f000 f80e 	bl	80060ec <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80060d0:	69f8      	ldr	r0, [r7, #28]
 80060d2:	f000 f8ab 	bl	800622c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80060d6:	2301      	movs	r3, #1
 80060d8:	61bb      	str	r3, [r7, #24]
 80060da:	e002      	b.n	80060e2 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80060dc:	f04f 33ff 	mov.w	r3, #4294967295
 80060e0:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80060e2:	69bb      	ldr	r3, [r7, #24]
	}
 80060e4:	4618      	mov	r0, r3
 80060e6:	3720      	adds	r7, #32
 80060e8:	46bd      	mov	sp, r7
 80060ea:	bd80      	pop	{r7, pc}

080060ec <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80060ec:	b580      	push	{r7, lr}
 80060ee:	b088      	sub	sp, #32
 80060f0:	af00      	add	r7, sp, #0
 80060f2:	60f8      	str	r0, [r7, #12]
 80060f4:	60b9      	str	r1, [r7, #8]
 80060f6:	607a      	str	r2, [r7, #4]
 80060f8:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80060fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060fc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006104:	3b01      	subs	r3, #1
 8006106:	009b      	lsls	r3, r3, #2
 8006108:	4413      	add	r3, r2
 800610a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800610c:	69bb      	ldr	r3, [r7, #24]
 800610e:	f023 0307 	bic.w	r3, r3, #7
 8006112:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006114:	69bb      	ldr	r3, [r7, #24]
 8006116:	f003 0307 	and.w	r3, r3, #7
 800611a:	2b00      	cmp	r3, #0
 800611c:	d00b      	beq.n	8006136 <prvInitialiseNewTask+0x4a>
	__asm volatile
 800611e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006122:	f383 8811 	msr	BASEPRI, r3
 8006126:	f3bf 8f6f 	isb	sy
 800612a:	f3bf 8f4f 	dsb	sy
 800612e:	617b      	str	r3, [r7, #20]
}
 8006130:	bf00      	nop
 8006132:	bf00      	nop
 8006134:	e7fd      	b.n	8006132 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8006136:	68bb      	ldr	r3, [r7, #8]
 8006138:	2b00      	cmp	r3, #0
 800613a:	d01f      	beq.n	800617c <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800613c:	2300      	movs	r3, #0
 800613e:	61fb      	str	r3, [r7, #28]
 8006140:	e012      	b.n	8006168 <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006142:	68ba      	ldr	r2, [r7, #8]
 8006144:	69fb      	ldr	r3, [r7, #28]
 8006146:	4413      	add	r3, r2
 8006148:	7819      	ldrb	r1, [r3, #0]
 800614a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800614c:	69fb      	ldr	r3, [r7, #28]
 800614e:	4413      	add	r3, r2
 8006150:	3334      	adds	r3, #52	@ 0x34
 8006152:	460a      	mov	r2, r1
 8006154:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8006156:	68ba      	ldr	r2, [r7, #8]
 8006158:	69fb      	ldr	r3, [r7, #28]
 800615a:	4413      	add	r3, r2
 800615c:	781b      	ldrb	r3, [r3, #0]
 800615e:	2b00      	cmp	r3, #0
 8006160:	d006      	beq.n	8006170 <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006162:	69fb      	ldr	r3, [r7, #28]
 8006164:	3301      	adds	r3, #1
 8006166:	61fb      	str	r3, [r7, #28]
 8006168:	69fb      	ldr	r3, [r7, #28]
 800616a:	2b0f      	cmp	r3, #15
 800616c:	d9e9      	bls.n	8006142 <prvInitialiseNewTask+0x56>
 800616e:	e000      	b.n	8006172 <prvInitialiseNewTask+0x86>
			{
				break;
 8006170:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006172:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006174:	2200      	movs	r2, #0
 8006176:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800617a:	e003      	b.n	8006184 <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800617c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800617e:	2200      	movs	r2, #0
 8006180:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006184:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006186:	2b06      	cmp	r3, #6
 8006188:	d901      	bls.n	800618e <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800618a:	2306      	movs	r3, #6
 800618c:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800618e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006190:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006192:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006194:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006196:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006198:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800619a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800619c:	2200      	movs	r2, #0
 800619e:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80061a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061a2:	3304      	adds	r3, #4
 80061a4:	4618      	mov	r0, r3
 80061a6:	f7ff fe68 	bl	8005e7a <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80061aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061ac:	3318      	adds	r3, #24
 80061ae:	4618      	mov	r0, r3
 80061b0:	f7ff fe63 	bl	8005e7a <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80061b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061b6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80061b8:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80061ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80061bc:	f1c3 0207 	rsb	r2, r3, #7
 80061c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061c2:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80061c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061c6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80061c8:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80061ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061cc:	2200      	movs	r2, #0
 80061ce:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80061d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061d4:	2200      	movs	r2, #0
 80061d6:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80061da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061dc:	334c      	adds	r3, #76	@ 0x4c
 80061de:	224c      	movs	r2, #76	@ 0x4c
 80061e0:	2100      	movs	r1, #0
 80061e2:	4618      	mov	r0, r3
 80061e4:	f001 f836 	bl	8007254 <memset>
 80061e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061ea:	4a0d      	ldr	r2, [pc, #52]	@ (8006220 <prvInitialiseNewTask+0x134>)
 80061ec:	651a      	str	r2, [r3, #80]	@ 0x50
 80061ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061f0:	4a0c      	ldr	r2, [pc, #48]	@ (8006224 <prvInitialiseNewTask+0x138>)
 80061f2:	655a      	str	r2, [r3, #84]	@ 0x54
 80061f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061f6:	4a0c      	ldr	r2, [pc, #48]	@ (8006228 <prvInitialiseNewTask+0x13c>)
 80061f8:	659a      	str	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80061fa:	683a      	ldr	r2, [r7, #0]
 80061fc:	68f9      	ldr	r1, [r7, #12]
 80061fe:	69b8      	ldr	r0, [r7, #24]
 8006200:	f000 fc2a 	bl	8006a58 <pxPortInitialiseStack>
 8006204:	4602      	mov	r2, r0
 8006206:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006208:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800620a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800620c:	2b00      	cmp	r3, #0
 800620e:	d002      	beq.n	8006216 <prvInitialiseNewTask+0x12a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006210:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006212:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006214:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006216:	bf00      	nop
 8006218:	3720      	adds	r7, #32
 800621a:	46bd      	mov	sp, r7
 800621c:	bd80      	pop	{r7, pc}
 800621e:	bf00      	nop
 8006220:	2000438c 	.word	0x2000438c
 8006224:	200043f4 	.word	0x200043f4
 8006228:	2000445c 	.word	0x2000445c

0800622c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800622c:	b580      	push	{r7, lr}
 800622e:	b082      	sub	sp, #8
 8006230:	af00      	add	r7, sp, #0
 8006232:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006234:	f000 fd40 	bl	8006cb8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006238:	4b2a      	ldr	r3, [pc, #168]	@ (80062e4 <prvAddNewTaskToReadyList+0xb8>)
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	3301      	adds	r3, #1
 800623e:	4a29      	ldr	r2, [pc, #164]	@ (80062e4 <prvAddNewTaskToReadyList+0xb8>)
 8006240:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8006242:	4b29      	ldr	r3, [pc, #164]	@ (80062e8 <prvAddNewTaskToReadyList+0xbc>)
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	2b00      	cmp	r3, #0
 8006248:	d109      	bne.n	800625e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800624a:	4a27      	ldr	r2, [pc, #156]	@ (80062e8 <prvAddNewTaskToReadyList+0xbc>)
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006250:	4b24      	ldr	r3, [pc, #144]	@ (80062e4 <prvAddNewTaskToReadyList+0xb8>)
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	2b01      	cmp	r3, #1
 8006256:	d110      	bne.n	800627a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006258:	f000 fad4 	bl	8006804 <prvInitialiseTaskLists>
 800625c:	e00d      	b.n	800627a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800625e:	4b23      	ldr	r3, [pc, #140]	@ (80062ec <prvAddNewTaskToReadyList+0xc0>)
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	2b00      	cmp	r3, #0
 8006264:	d109      	bne.n	800627a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006266:	4b20      	ldr	r3, [pc, #128]	@ (80062e8 <prvAddNewTaskToReadyList+0xbc>)
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006270:	429a      	cmp	r2, r3
 8006272:	d802      	bhi.n	800627a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006274:	4a1c      	ldr	r2, [pc, #112]	@ (80062e8 <prvAddNewTaskToReadyList+0xbc>)
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800627a:	4b1d      	ldr	r3, [pc, #116]	@ (80062f0 <prvAddNewTaskToReadyList+0xc4>)
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	3301      	adds	r3, #1
 8006280:	4a1b      	ldr	r2, [pc, #108]	@ (80062f0 <prvAddNewTaskToReadyList+0xc4>)
 8006282:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006288:	2201      	movs	r2, #1
 800628a:	409a      	lsls	r2, r3
 800628c:	4b19      	ldr	r3, [pc, #100]	@ (80062f4 <prvAddNewTaskToReadyList+0xc8>)
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	4313      	orrs	r3, r2
 8006292:	4a18      	ldr	r2, [pc, #96]	@ (80062f4 <prvAddNewTaskToReadyList+0xc8>)
 8006294:	6013      	str	r3, [r2, #0]
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800629a:	4613      	mov	r3, r2
 800629c:	009b      	lsls	r3, r3, #2
 800629e:	4413      	add	r3, r2
 80062a0:	009b      	lsls	r3, r3, #2
 80062a2:	4a15      	ldr	r2, [pc, #84]	@ (80062f8 <prvAddNewTaskToReadyList+0xcc>)
 80062a4:	441a      	add	r2, r3
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	3304      	adds	r3, #4
 80062aa:	4619      	mov	r1, r3
 80062ac:	4610      	mov	r0, r2
 80062ae:	f7ff fdf1 	bl	8005e94 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80062b2:	f000 fd33 	bl	8006d1c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80062b6:	4b0d      	ldr	r3, [pc, #52]	@ (80062ec <prvAddNewTaskToReadyList+0xc0>)
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d00e      	beq.n	80062dc <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80062be:	4b0a      	ldr	r3, [pc, #40]	@ (80062e8 <prvAddNewTaskToReadyList+0xbc>)
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80062c8:	429a      	cmp	r2, r3
 80062ca:	d207      	bcs.n	80062dc <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80062cc:	4b0b      	ldr	r3, [pc, #44]	@ (80062fc <prvAddNewTaskToReadyList+0xd0>)
 80062ce:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80062d2:	601a      	str	r2, [r3, #0]
 80062d4:	f3bf 8f4f 	dsb	sy
 80062d8:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80062dc:	bf00      	nop
 80062de:	3708      	adds	r7, #8
 80062e0:	46bd      	mov	sp, r7
 80062e2:	bd80      	pop	{r7, pc}
 80062e4:	20000738 	.word	0x20000738
 80062e8:	20000638 	.word	0x20000638
 80062ec:	20000744 	.word	0x20000744
 80062f0:	20000754 	.word	0x20000754
 80062f4:	20000740 	.word	0x20000740
 80062f8:	2000063c 	.word	0x2000063c
 80062fc:	e000ed04 	.word	0xe000ed04

08006300 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006300:	b580      	push	{r7, lr}
 8006302:	b084      	sub	sp, #16
 8006304:	af00      	add	r7, sp, #0
 8006306:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006308:	2300      	movs	r3, #0
 800630a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	2b00      	cmp	r3, #0
 8006310:	d018      	beq.n	8006344 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8006312:	4b14      	ldr	r3, [pc, #80]	@ (8006364 <vTaskDelay+0x64>)
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	2b00      	cmp	r3, #0
 8006318:	d00b      	beq.n	8006332 <vTaskDelay+0x32>
	__asm volatile
 800631a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800631e:	f383 8811 	msr	BASEPRI, r3
 8006322:	f3bf 8f6f 	isb	sy
 8006326:	f3bf 8f4f 	dsb	sy
 800632a:	60bb      	str	r3, [r7, #8]
}
 800632c:	bf00      	nop
 800632e:	bf00      	nop
 8006330:	e7fd      	b.n	800632e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8006332:	f000 f885 	bl	8006440 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006336:	2100      	movs	r1, #0
 8006338:	6878      	ldr	r0, [r7, #4]
 800633a:	f000 fb27 	bl	800698c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800633e:	f000 f88d 	bl	800645c <xTaskResumeAll>
 8006342:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	2b00      	cmp	r3, #0
 8006348:	d107      	bne.n	800635a <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800634a:	4b07      	ldr	r3, [pc, #28]	@ (8006368 <vTaskDelay+0x68>)
 800634c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006350:	601a      	str	r2, [r3, #0]
 8006352:	f3bf 8f4f 	dsb	sy
 8006356:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800635a:	bf00      	nop
 800635c:	3710      	adds	r7, #16
 800635e:	46bd      	mov	sp, r7
 8006360:	bd80      	pop	{r7, pc}
 8006362:	bf00      	nop
 8006364:	20000760 	.word	0x20000760
 8006368:	e000ed04 	.word	0xe000ed04

0800636c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800636c:	b580      	push	{r7, lr}
 800636e:	b08a      	sub	sp, #40	@ 0x28
 8006370:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006372:	2300      	movs	r3, #0
 8006374:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006376:	2300      	movs	r3, #0
 8006378:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800637a:	463a      	mov	r2, r7
 800637c:	1d39      	adds	r1, r7, #4
 800637e:	f107 0308 	add.w	r3, r7, #8
 8006382:	4618      	mov	r0, r3
 8006384:	f7fa fc3c 	bl	8000c00 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006388:	6839      	ldr	r1, [r7, #0]
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	68ba      	ldr	r2, [r7, #8]
 800638e:	9202      	str	r2, [sp, #8]
 8006390:	9301      	str	r3, [sp, #4]
 8006392:	2300      	movs	r3, #0
 8006394:	9300      	str	r3, [sp, #0]
 8006396:	2300      	movs	r3, #0
 8006398:	460a      	mov	r2, r1
 800639a:	4921      	ldr	r1, [pc, #132]	@ (8006420 <vTaskStartScheduler+0xb4>)
 800639c:	4821      	ldr	r0, [pc, #132]	@ (8006424 <vTaskStartScheduler+0xb8>)
 800639e:	f7ff fe00 	bl	8005fa2 <xTaskCreateStatic>
 80063a2:	4603      	mov	r3, r0
 80063a4:	4a20      	ldr	r2, [pc, #128]	@ (8006428 <vTaskStartScheduler+0xbc>)
 80063a6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80063a8:	4b1f      	ldr	r3, [pc, #124]	@ (8006428 <vTaskStartScheduler+0xbc>)
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d002      	beq.n	80063b6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80063b0:	2301      	movs	r3, #1
 80063b2:	617b      	str	r3, [r7, #20]
 80063b4:	e001      	b.n	80063ba <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80063b6:	2300      	movs	r3, #0
 80063b8:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80063ba:	697b      	ldr	r3, [r7, #20]
 80063bc:	2b01      	cmp	r3, #1
 80063be:	d11b      	bne.n	80063f8 <vTaskStartScheduler+0x8c>
	__asm volatile
 80063c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80063c4:	f383 8811 	msr	BASEPRI, r3
 80063c8:	f3bf 8f6f 	isb	sy
 80063cc:	f3bf 8f4f 	dsb	sy
 80063d0:	613b      	str	r3, [r7, #16]
}
 80063d2:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80063d4:	4b15      	ldr	r3, [pc, #84]	@ (800642c <vTaskStartScheduler+0xc0>)
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	334c      	adds	r3, #76	@ 0x4c
 80063da:	4a15      	ldr	r2, [pc, #84]	@ (8006430 <vTaskStartScheduler+0xc4>)
 80063dc:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80063de:	4b15      	ldr	r3, [pc, #84]	@ (8006434 <vTaskStartScheduler+0xc8>)
 80063e0:	f04f 32ff 	mov.w	r2, #4294967295
 80063e4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80063e6:	4b14      	ldr	r3, [pc, #80]	@ (8006438 <vTaskStartScheduler+0xcc>)
 80063e8:	2201      	movs	r2, #1
 80063ea:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80063ec:	4b13      	ldr	r3, [pc, #76]	@ (800643c <vTaskStartScheduler+0xd0>)
 80063ee:	2200      	movs	r2, #0
 80063f0:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80063f2:	f000 fbbd 	bl	8006b70 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80063f6:	e00f      	b.n	8006418 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80063f8:	697b      	ldr	r3, [r7, #20]
 80063fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063fe:	d10b      	bne.n	8006418 <vTaskStartScheduler+0xac>
	__asm volatile
 8006400:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006404:	f383 8811 	msr	BASEPRI, r3
 8006408:	f3bf 8f6f 	isb	sy
 800640c:	f3bf 8f4f 	dsb	sy
 8006410:	60fb      	str	r3, [r7, #12]
}
 8006412:	bf00      	nop
 8006414:	bf00      	nop
 8006416:	e7fd      	b.n	8006414 <vTaskStartScheduler+0xa8>
}
 8006418:	bf00      	nop
 800641a:	3718      	adds	r7, #24
 800641c:	46bd      	mov	sp, r7
 800641e:	bd80      	pop	{r7, pc}
 8006420:	0800749c 	.word	0x0800749c
 8006424:	080067d5 	.word	0x080067d5
 8006428:	2000075c 	.word	0x2000075c
 800642c:	20000638 	.word	0x20000638
 8006430:	20000010 	.word	0x20000010
 8006434:	20000758 	.word	0x20000758
 8006438:	20000744 	.word	0x20000744
 800643c:	2000073c 	.word	0x2000073c

08006440 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006440:	b480      	push	{r7}
 8006442:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8006444:	4b04      	ldr	r3, [pc, #16]	@ (8006458 <vTaskSuspendAll+0x18>)
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	3301      	adds	r3, #1
 800644a:	4a03      	ldr	r2, [pc, #12]	@ (8006458 <vTaskSuspendAll+0x18>)
 800644c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800644e:	bf00      	nop
 8006450:	46bd      	mov	sp, r7
 8006452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006456:	4770      	bx	lr
 8006458:	20000760 	.word	0x20000760

0800645c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800645c:	b580      	push	{r7, lr}
 800645e:	b084      	sub	sp, #16
 8006460:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006462:	2300      	movs	r3, #0
 8006464:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006466:	2300      	movs	r3, #0
 8006468:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800646a:	4b42      	ldr	r3, [pc, #264]	@ (8006574 <xTaskResumeAll+0x118>)
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	2b00      	cmp	r3, #0
 8006470:	d10b      	bne.n	800648a <xTaskResumeAll+0x2e>
	__asm volatile
 8006472:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006476:	f383 8811 	msr	BASEPRI, r3
 800647a:	f3bf 8f6f 	isb	sy
 800647e:	f3bf 8f4f 	dsb	sy
 8006482:	603b      	str	r3, [r7, #0]
}
 8006484:	bf00      	nop
 8006486:	bf00      	nop
 8006488:	e7fd      	b.n	8006486 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800648a:	f000 fc15 	bl	8006cb8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800648e:	4b39      	ldr	r3, [pc, #228]	@ (8006574 <xTaskResumeAll+0x118>)
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	3b01      	subs	r3, #1
 8006494:	4a37      	ldr	r2, [pc, #220]	@ (8006574 <xTaskResumeAll+0x118>)
 8006496:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006498:	4b36      	ldr	r3, [pc, #216]	@ (8006574 <xTaskResumeAll+0x118>)
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	2b00      	cmp	r3, #0
 800649e:	d161      	bne.n	8006564 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80064a0:	4b35      	ldr	r3, [pc, #212]	@ (8006578 <xTaskResumeAll+0x11c>)
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d05d      	beq.n	8006564 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80064a8:	e02e      	b.n	8006508 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80064aa:	4b34      	ldr	r3, [pc, #208]	@ (800657c <xTaskResumeAll+0x120>)
 80064ac:	68db      	ldr	r3, [r3, #12]
 80064ae:	68db      	ldr	r3, [r3, #12]
 80064b0:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	3318      	adds	r3, #24
 80064b6:	4618      	mov	r0, r3
 80064b8:	f7ff fd49 	bl	8005f4e <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	3304      	adds	r3, #4
 80064c0:	4618      	mov	r0, r3
 80064c2:	f7ff fd44 	bl	8005f4e <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80064ca:	2201      	movs	r2, #1
 80064cc:	409a      	lsls	r2, r3
 80064ce:	4b2c      	ldr	r3, [pc, #176]	@ (8006580 <xTaskResumeAll+0x124>)
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	4313      	orrs	r3, r2
 80064d4:	4a2a      	ldr	r2, [pc, #168]	@ (8006580 <xTaskResumeAll+0x124>)
 80064d6:	6013      	str	r3, [r2, #0]
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80064dc:	4613      	mov	r3, r2
 80064de:	009b      	lsls	r3, r3, #2
 80064e0:	4413      	add	r3, r2
 80064e2:	009b      	lsls	r3, r3, #2
 80064e4:	4a27      	ldr	r2, [pc, #156]	@ (8006584 <xTaskResumeAll+0x128>)
 80064e6:	441a      	add	r2, r3
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	3304      	adds	r3, #4
 80064ec:	4619      	mov	r1, r3
 80064ee:	4610      	mov	r0, r2
 80064f0:	f7ff fcd0 	bl	8005e94 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80064f8:	4b23      	ldr	r3, [pc, #140]	@ (8006588 <xTaskResumeAll+0x12c>)
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80064fe:	429a      	cmp	r2, r3
 8006500:	d302      	bcc.n	8006508 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8006502:	4b22      	ldr	r3, [pc, #136]	@ (800658c <xTaskResumeAll+0x130>)
 8006504:	2201      	movs	r2, #1
 8006506:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006508:	4b1c      	ldr	r3, [pc, #112]	@ (800657c <xTaskResumeAll+0x120>)
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	2b00      	cmp	r3, #0
 800650e:	d1cc      	bne.n	80064aa <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	2b00      	cmp	r3, #0
 8006514:	d001      	beq.n	800651a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006516:	f000 fa19 	bl	800694c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800651a:	4b1d      	ldr	r3, [pc, #116]	@ (8006590 <xTaskResumeAll+0x134>)
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	2b00      	cmp	r3, #0
 8006524:	d010      	beq.n	8006548 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006526:	f000 f837 	bl	8006598 <xTaskIncrementTick>
 800652a:	4603      	mov	r3, r0
 800652c:	2b00      	cmp	r3, #0
 800652e:	d002      	beq.n	8006536 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8006530:	4b16      	ldr	r3, [pc, #88]	@ (800658c <xTaskResumeAll+0x130>)
 8006532:	2201      	movs	r2, #1
 8006534:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	3b01      	subs	r3, #1
 800653a:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	2b00      	cmp	r3, #0
 8006540:	d1f1      	bne.n	8006526 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8006542:	4b13      	ldr	r3, [pc, #76]	@ (8006590 <xTaskResumeAll+0x134>)
 8006544:	2200      	movs	r2, #0
 8006546:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006548:	4b10      	ldr	r3, [pc, #64]	@ (800658c <xTaskResumeAll+0x130>)
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	2b00      	cmp	r3, #0
 800654e:	d009      	beq.n	8006564 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006550:	2301      	movs	r3, #1
 8006552:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006554:	4b0f      	ldr	r3, [pc, #60]	@ (8006594 <xTaskResumeAll+0x138>)
 8006556:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800655a:	601a      	str	r2, [r3, #0]
 800655c:	f3bf 8f4f 	dsb	sy
 8006560:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006564:	f000 fbda 	bl	8006d1c <vPortExitCritical>

	return xAlreadyYielded;
 8006568:	68bb      	ldr	r3, [r7, #8]
}
 800656a:	4618      	mov	r0, r3
 800656c:	3710      	adds	r7, #16
 800656e:	46bd      	mov	sp, r7
 8006570:	bd80      	pop	{r7, pc}
 8006572:	bf00      	nop
 8006574:	20000760 	.word	0x20000760
 8006578:	20000738 	.word	0x20000738
 800657c:	200006f8 	.word	0x200006f8
 8006580:	20000740 	.word	0x20000740
 8006584:	2000063c 	.word	0x2000063c
 8006588:	20000638 	.word	0x20000638
 800658c:	2000074c 	.word	0x2000074c
 8006590:	20000748 	.word	0x20000748
 8006594:	e000ed04 	.word	0xe000ed04

08006598 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006598:	b580      	push	{r7, lr}
 800659a:	b086      	sub	sp, #24
 800659c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800659e:	2300      	movs	r3, #0
 80065a0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80065a2:	4b4f      	ldr	r3, [pc, #316]	@ (80066e0 <xTaskIncrementTick+0x148>)
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	f040 808f 	bne.w	80066ca <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80065ac:	4b4d      	ldr	r3, [pc, #308]	@ (80066e4 <xTaskIncrementTick+0x14c>)
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	3301      	adds	r3, #1
 80065b2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80065b4:	4a4b      	ldr	r2, [pc, #300]	@ (80066e4 <xTaskIncrementTick+0x14c>)
 80065b6:	693b      	ldr	r3, [r7, #16]
 80065b8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80065ba:	693b      	ldr	r3, [r7, #16]
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d121      	bne.n	8006604 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 80065c0:	4b49      	ldr	r3, [pc, #292]	@ (80066e8 <xTaskIncrementTick+0x150>)
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d00b      	beq.n	80065e2 <xTaskIncrementTick+0x4a>
	__asm volatile
 80065ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80065ce:	f383 8811 	msr	BASEPRI, r3
 80065d2:	f3bf 8f6f 	isb	sy
 80065d6:	f3bf 8f4f 	dsb	sy
 80065da:	603b      	str	r3, [r7, #0]
}
 80065dc:	bf00      	nop
 80065de:	bf00      	nop
 80065e0:	e7fd      	b.n	80065de <xTaskIncrementTick+0x46>
 80065e2:	4b41      	ldr	r3, [pc, #260]	@ (80066e8 <xTaskIncrementTick+0x150>)
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	60fb      	str	r3, [r7, #12]
 80065e8:	4b40      	ldr	r3, [pc, #256]	@ (80066ec <xTaskIncrementTick+0x154>)
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	4a3e      	ldr	r2, [pc, #248]	@ (80066e8 <xTaskIncrementTick+0x150>)
 80065ee:	6013      	str	r3, [r2, #0]
 80065f0:	4a3e      	ldr	r2, [pc, #248]	@ (80066ec <xTaskIncrementTick+0x154>)
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	6013      	str	r3, [r2, #0]
 80065f6:	4b3e      	ldr	r3, [pc, #248]	@ (80066f0 <xTaskIncrementTick+0x158>)
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	3301      	adds	r3, #1
 80065fc:	4a3c      	ldr	r2, [pc, #240]	@ (80066f0 <xTaskIncrementTick+0x158>)
 80065fe:	6013      	str	r3, [r2, #0]
 8006600:	f000 f9a4 	bl	800694c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006604:	4b3b      	ldr	r3, [pc, #236]	@ (80066f4 <xTaskIncrementTick+0x15c>)
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	693a      	ldr	r2, [r7, #16]
 800660a:	429a      	cmp	r2, r3
 800660c:	d348      	bcc.n	80066a0 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800660e:	4b36      	ldr	r3, [pc, #216]	@ (80066e8 <xTaskIncrementTick+0x150>)
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	2b00      	cmp	r3, #0
 8006616:	d104      	bne.n	8006622 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006618:	4b36      	ldr	r3, [pc, #216]	@ (80066f4 <xTaskIncrementTick+0x15c>)
 800661a:	f04f 32ff 	mov.w	r2, #4294967295
 800661e:	601a      	str	r2, [r3, #0]
					break;
 8006620:	e03e      	b.n	80066a0 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006622:	4b31      	ldr	r3, [pc, #196]	@ (80066e8 <xTaskIncrementTick+0x150>)
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	68db      	ldr	r3, [r3, #12]
 8006628:	68db      	ldr	r3, [r3, #12]
 800662a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800662c:	68bb      	ldr	r3, [r7, #8]
 800662e:	685b      	ldr	r3, [r3, #4]
 8006630:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006632:	693a      	ldr	r2, [r7, #16]
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	429a      	cmp	r2, r3
 8006638:	d203      	bcs.n	8006642 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800663a:	4a2e      	ldr	r2, [pc, #184]	@ (80066f4 <xTaskIncrementTick+0x15c>)
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8006640:	e02e      	b.n	80066a0 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006642:	68bb      	ldr	r3, [r7, #8]
 8006644:	3304      	adds	r3, #4
 8006646:	4618      	mov	r0, r3
 8006648:	f7ff fc81 	bl	8005f4e <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800664c:	68bb      	ldr	r3, [r7, #8]
 800664e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006650:	2b00      	cmp	r3, #0
 8006652:	d004      	beq.n	800665e <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006654:	68bb      	ldr	r3, [r7, #8]
 8006656:	3318      	adds	r3, #24
 8006658:	4618      	mov	r0, r3
 800665a:	f7ff fc78 	bl	8005f4e <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800665e:	68bb      	ldr	r3, [r7, #8]
 8006660:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006662:	2201      	movs	r2, #1
 8006664:	409a      	lsls	r2, r3
 8006666:	4b24      	ldr	r3, [pc, #144]	@ (80066f8 <xTaskIncrementTick+0x160>)
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	4313      	orrs	r3, r2
 800666c:	4a22      	ldr	r2, [pc, #136]	@ (80066f8 <xTaskIncrementTick+0x160>)
 800666e:	6013      	str	r3, [r2, #0]
 8006670:	68bb      	ldr	r3, [r7, #8]
 8006672:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006674:	4613      	mov	r3, r2
 8006676:	009b      	lsls	r3, r3, #2
 8006678:	4413      	add	r3, r2
 800667a:	009b      	lsls	r3, r3, #2
 800667c:	4a1f      	ldr	r2, [pc, #124]	@ (80066fc <xTaskIncrementTick+0x164>)
 800667e:	441a      	add	r2, r3
 8006680:	68bb      	ldr	r3, [r7, #8]
 8006682:	3304      	adds	r3, #4
 8006684:	4619      	mov	r1, r3
 8006686:	4610      	mov	r0, r2
 8006688:	f7ff fc04 	bl	8005e94 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800668c:	68bb      	ldr	r3, [r7, #8]
 800668e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006690:	4b1b      	ldr	r3, [pc, #108]	@ (8006700 <xTaskIncrementTick+0x168>)
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006696:	429a      	cmp	r2, r3
 8006698:	d3b9      	bcc.n	800660e <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800669a:	2301      	movs	r3, #1
 800669c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800669e:	e7b6      	b.n	800660e <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80066a0:	4b17      	ldr	r3, [pc, #92]	@ (8006700 <xTaskIncrementTick+0x168>)
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80066a6:	4915      	ldr	r1, [pc, #84]	@ (80066fc <xTaskIncrementTick+0x164>)
 80066a8:	4613      	mov	r3, r2
 80066aa:	009b      	lsls	r3, r3, #2
 80066ac:	4413      	add	r3, r2
 80066ae:	009b      	lsls	r3, r3, #2
 80066b0:	440b      	add	r3, r1
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	2b01      	cmp	r3, #1
 80066b6:	d901      	bls.n	80066bc <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80066b8:	2301      	movs	r3, #1
 80066ba:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80066bc:	4b11      	ldr	r3, [pc, #68]	@ (8006704 <xTaskIncrementTick+0x16c>)
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d007      	beq.n	80066d4 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 80066c4:	2301      	movs	r3, #1
 80066c6:	617b      	str	r3, [r7, #20]
 80066c8:	e004      	b.n	80066d4 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80066ca:	4b0f      	ldr	r3, [pc, #60]	@ (8006708 <xTaskIncrementTick+0x170>)
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	3301      	adds	r3, #1
 80066d0:	4a0d      	ldr	r2, [pc, #52]	@ (8006708 <xTaskIncrementTick+0x170>)
 80066d2:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80066d4:	697b      	ldr	r3, [r7, #20]
}
 80066d6:	4618      	mov	r0, r3
 80066d8:	3718      	adds	r7, #24
 80066da:	46bd      	mov	sp, r7
 80066dc:	bd80      	pop	{r7, pc}
 80066de:	bf00      	nop
 80066e0:	20000760 	.word	0x20000760
 80066e4:	2000073c 	.word	0x2000073c
 80066e8:	200006f0 	.word	0x200006f0
 80066ec:	200006f4 	.word	0x200006f4
 80066f0:	20000750 	.word	0x20000750
 80066f4:	20000758 	.word	0x20000758
 80066f8:	20000740 	.word	0x20000740
 80066fc:	2000063c 	.word	0x2000063c
 8006700:	20000638 	.word	0x20000638
 8006704:	2000074c 	.word	0x2000074c
 8006708:	20000748 	.word	0x20000748

0800670c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800670c:	b480      	push	{r7}
 800670e:	b087      	sub	sp, #28
 8006710:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006712:	4b2a      	ldr	r3, [pc, #168]	@ (80067bc <vTaskSwitchContext+0xb0>)
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	2b00      	cmp	r3, #0
 8006718:	d003      	beq.n	8006722 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800671a:	4b29      	ldr	r3, [pc, #164]	@ (80067c0 <vTaskSwitchContext+0xb4>)
 800671c:	2201      	movs	r2, #1
 800671e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006720:	e045      	b.n	80067ae <vTaskSwitchContext+0xa2>
		xYieldPending = pdFALSE;
 8006722:	4b27      	ldr	r3, [pc, #156]	@ (80067c0 <vTaskSwitchContext+0xb4>)
 8006724:	2200      	movs	r2, #0
 8006726:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006728:	4b26      	ldr	r3, [pc, #152]	@ (80067c4 <vTaskSwitchContext+0xb8>)
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	fab3 f383 	clz	r3, r3
 8006734:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8006736:	7afb      	ldrb	r3, [r7, #11]
 8006738:	f1c3 031f 	rsb	r3, r3, #31
 800673c:	617b      	str	r3, [r7, #20]
 800673e:	4922      	ldr	r1, [pc, #136]	@ (80067c8 <vTaskSwitchContext+0xbc>)
 8006740:	697a      	ldr	r2, [r7, #20]
 8006742:	4613      	mov	r3, r2
 8006744:	009b      	lsls	r3, r3, #2
 8006746:	4413      	add	r3, r2
 8006748:	009b      	lsls	r3, r3, #2
 800674a:	440b      	add	r3, r1
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	2b00      	cmp	r3, #0
 8006750:	d10b      	bne.n	800676a <vTaskSwitchContext+0x5e>
	__asm volatile
 8006752:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006756:	f383 8811 	msr	BASEPRI, r3
 800675a:	f3bf 8f6f 	isb	sy
 800675e:	f3bf 8f4f 	dsb	sy
 8006762:	607b      	str	r3, [r7, #4]
}
 8006764:	bf00      	nop
 8006766:	bf00      	nop
 8006768:	e7fd      	b.n	8006766 <vTaskSwitchContext+0x5a>
 800676a:	697a      	ldr	r2, [r7, #20]
 800676c:	4613      	mov	r3, r2
 800676e:	009b      	lsls	r3, r3, #2
 8006770:	4413      	add	r3, r2
 8006772:	009b      	lsls	r3, r3, #2
 8006774:	4a14      	ldr	r2, [pc, #80]	@ (80067c8 <vTaskSwitchContext+0xbc>)
 8006776:	4413      	add	r3, r2
 8006778:	613b      	str	r3, [r7, #16]
 800677a:	693b      	ldr	r3, [r7, #16]
 800677c:	685b      	ldr	r3, [r3, #4]
 800677e:	685a      	ldr	r2, [r3, #4]
 8006780:	693b      	ldr	r3, [r7, #16]
 8006782:	605a      	str	r2, [r3, #4]
 8006784:	693b      	ldr	r3, [r7, #16]
 8006786:	685a      	ldr	r2, [r3, #4]
 8006788:	693b      	ldr	r3, [r7, #16]
 800678a:	3308      	adds	r3, #8
 800678c:	429a      	cmp	r2, r3
 800678e:	d104      	bne.n	800679a <vTaskSwitchContext+0x8e>
 8006790:	693b      	ldr	r3, [r7, #16]
 8006792:	685b      	ldr	r3, [r3, #4]
 8006794:	685a      	ldr	r2, [r3, #4]
 8006796:	693b      	ldr	r3, [r7, #16]
 8006798:	605a      	str	r2, [r3, #4]
 800679a:	693b      	ldr	r3, [r7, #16]
 800679c:	685b      	ldr	r3, [r3, #4]
 800679e:	68db      	ldr	r3, [r3, #12]
 80067a0:	4a0a      	ldr	r2, [pc, #40]	@ (80067cc <vTaskSwitchContext+0xc0>)
 80067a2:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80067a4:	4b09      	ldr	r3, [pc, #36]	@ (80067cc <vTaskSwitchContext+0xc0>)
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	334c      	adds	r3, #76	@ 0x4c
 80067aa:	4a09      	ldr	r2, [pc, #36]	@ (80067d0 <vTaskSwitchContext+0xc4>)
 80067ac:	6013      	str	r3, [r2, #0]
}
 80067ae:	bf00      	nop
 80067b0:	371c      	adds	r7, #28
 80067b2:	46bd      	mov	sp, r7
 80067b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067b8:	4770      	bx	lr
 80067ba:	bf00      	nop
 80067bc:	20000760 	.word	0x20000760
 80067c0:	2000074c 	.word	0x2000074c
 80067c4:	20000740 	.word	0x20000740
 80067c8:	2000063c 	.word	0x2000063c
 80067cc:	20000638 	.word	0x20000638
 80067d0:	20000010 	.word	0x20000010

080067d4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80067d4:	b580      	push	{r7, lr}
 80067d6:	b082      	sub	sp, #8
 80067d8:	af00      	add	r7, sp, #0
 80067da:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80067dc:	f000 f852 	bl	8006884 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80067e0:	4b06      	ldr	r3, [pc, #24]	@ (80067fc <prvIdleTask+0x28>)
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	2b01      	cmp	r3, #1
 80067e6:	d9f9      	bls.n	80067dc <prvIdleTask+0x8>
			{
				taskYIELD();
 80067e8:	4b05      	ldr	r3, [pc, #20]	@ (8006800 <prvIdleTask+0x2c>)
 80067ea:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80067ee:	601a      	str	r2, [r3, #0]
 80067f0:	f3bf 8f4f 	dsb	sy
 80067f4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80067f8:	e7f0      	b.n	80067dc <prvIdleTask+0x8>
 80067fa:	bf00      	nop
 80067fc:	2000063c 	.word	0x2000063c
 8006800:	e000ed04 	.word	0xe000ed04

08006804 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006804:	b580      	push	{r7, lr}
 8006806:	b082      	sub	sp, #8
 8006808:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800680a:	2300      	movs	r3, #0
 800680c:	607b      	str	r3, [r7, #4]
 800680e:	e00c      	b.n	800682a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006810:	687a      	ldr	r2, [r7, #4]
 8006812:	4613      	mov	r3, r2
 8006814:	009b      	lsls	r3, r3, #2
 8006816:	4413      	add	r3, r2
 8006818:	009b      	lsls	r3, r3, #2
 800681a:	4a12      	ldr	r2, [pc, #72]	@ (8006864 <prvInitialiseTaskLists+0x60>)
 800681c:	4413      	add	r3, r2
 800681e:	4618      	mov	r0, r3
 8006820:	f7ff fb0b 	bl	8005e3a <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	3301      	adds	r3, #1
 8006828:	607b      	str	r3, [r7, #4]
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	2b06      	cmp	r3, #6
 800682e:	d9ef      	bls.n	8006810 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006830:	480d      	ldr	r0, [pc, #52]	@ (8006868 <prvInitialiseTaskLists+0x64>)
 8006832:	f7ff fb02 	bl	8005e3a <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006836:	480d      	ldr	r0, [pc, #52]	@ (800686c <prvInitialiseTaskLists+0x68>)
 8006838:	f7ff faff 	bl	8005e3a <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800683c:	480c      	ldr	r0, [pc, #48]	@ (8006870 <prvInitialiseTaskLists+0x6c>)
 800683e:	f7ff fafc 	bl	8005e3a <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006842:	480c      	ldr	r0, [pc, #48]	@ (8006874 <prvInitialiseTaskLists+0x70>)
 8006844:	f7ff faf9 	bl	8005e3a <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006848:	480b      	ldr	r0, [pc, #44]	@ (8006878 <prvInitialiseTaskLists+0x74>)
 800684a:	f7ff faf6 	bl	8005e3a <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800684e:	4b0b      	ldr	r3, [pc, #44]	@ (800687c <prvInitialiseTaskLists+0x78>)
 8006850:	4a05      	ldr	r2, [pc, #20]	@ (8006868 <prvInitialiseTaskLists+0x64>)
 8006852:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006854:	4b0a      	ldr	r3, [pc, #40]	@ (8006880 <prvInitialiseTaskLists+0x7c>)
 8006856:	4a05      	ldr	r2, [pc, #20]	@ (800686c <prvInitialiseTaskLists+0x68>)
 8006858:	601a      	str	r2, [r3, #0]
}
 800685a:	bf00      	nop
 800685c:	3708      	adds	r7, #8
 800685e:	46bd      	mov	sp, r7
 8006860:	bd80      	pop	{r7, pc}
 8006862:	bf00      	nop
 8006864:	2000063c 	.word	0x2000063c
 8006868:	200006c8 	.word	0x200006c8
 800686c:	200006dc 	.word	0x200006dc
 8006870:	200006f8 	.word	0x200006f8
 8006874:	2000070c 	.word	0x2000070c
 8006878:	20000724 	.word	0x20000724
 800687c:	200006f0 	.word	0x200006f0
 8006880:	200006f4 	.word	0x200006f4

08006884 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006884:	b580      	push	{r7, lr}
 8006886:	b082      	sub	sp, #8
 8006888:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800688a:	e019      	b.n	80068c0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800688c:	f000 fa14 	bl	8006cb8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006890:	4b10      	ldr	r3, [pc, #64]	@ (80068d4 <prvCheckTasksWaitingTermination+0x50>)
 8006892:	68db      	ldr	r3, [r3, #12]
 8006894:	68db      	ldr	r3, [r3, #12]
 8006896:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	3304      	adds	r3, #4
 800689c:	4618      	mov	r0, r3
 800689e:	f7ff fb56 	bl	8005f4e <uxListRemove>
				--uxCurrentNumberOfTasks;
 80068a2:	4b0d      	ldr	r3, [pc, #52]	@ (80068d8 <prvCheckTasksWaitingTermination+0x54>)
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	3b01      	subs	r3, #1
 80068a8:	4a0b      	ldr	r2, [pc, #44]	@ (80068d8 <prvCheckTasksWaitingTermination+0x54>)
 80068aa:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80068ac:	4b0b      	ldr	r3, [pc, #44]	@ (80068dc <prvCheckTasksWaitingTermination+0x58>)
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	3b01      	subs	r3, #1
 80068b2:	4a0a      	ldr	r2, [pc, #40]	@ (80068dc <prvCheckTasksWaitingTermination+0x58>)
 80068b4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80068b6:	f000 fa31 	bl	8006d1c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80068ba:	6878      	ldr	r0, [r7, #4]
 80068bc:	f000 f810 	bl	80068e0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80068c0:	4b06      	ldr	r3, [pc, #24]	@ (80068dc <prvCheckTasksWaitingTermination+0x58>)
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	d1e1      	bne.n	800688c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80068c8:	bf00      	nop
 80068ca:	bf00      	nop
 80068cc:	3708      	adds	r7, #8
 80068ce:	46bd      	mov	sp, r7
 80068d0:	bd80      	pop	{r7, pc}
 80068d2:	bf00      	nop
 80068d4:	2000070c 	.word	0x2000070c
 80068d8:	20000738 	.word	0x20000738
 80068dc:	20000720 	.word	0x20000720

080068e0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80068e0:	b580      	push	{r7, lr}
 80068e2:	b084      	sub	sp, #16
 80068e4:	af00      	add	r7, sp, #0
 80068e6:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	334c      	adds	r3, #76	@ 0x4c
 80068ec:	4618      	mov	r0, r3
 80068ee:	f000 fcb9 	bl	8007264 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	d108      	bne.n	800690e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006900:	4618      	mov	r0, r3
 8006902:	f000 fb87 	bl	8007014 <vPortFree>
				vPortFree( pxTCB );
 8006906:	6878      	ldr	r0, [r7, #4]
 8006908:	f000 fb84 	bl	8007014 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800690c:	e019      	b.n	8006942 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8006914:	2b01      	cmp	r3, #1
 8006916:	d103      	bne.n	8006920 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8006918:	6878      	ldr	r0, [r7, #4]
 800691a:	f000 fb7b 	bl	8007014 <vPortFree>
	}
 800691e:	e010      	b.n	8006942 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8006926:	2b02      	cmp	r3, #2
 8006928:	d00b      	beq.n	8006942 <prvDeleteTCB+0x62>
	__asm volatile
 800692a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800692e:	f383 8811 	msr	BASEPRI, r3
 8006932:	f3bf 8f6f 	isb	sy
 8006936:	f3bf 8f4f 	dsb	sy
 800693a:	60fb      	str	r3, [r7, #12]
}
 800693c:	bf00      	nop
 800693e:	bf00      	nop
 8006940:	e7fd      	b.n	800693e <prvDeleteTCB+0x5e>
	}
 8006942:	bf00      	nop
 8006944:	3710      	adds	r7, #16
 8006946:	46bd      	mov	sp, r7
 8006948:	bd80      	pop	{r7, pc}
	...

0800694c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800694c:	b480      	push	{r7}
 800694e:	b083      	sub	sp, #12
 8006950:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006952:	4b0c      	ldr	r3, [pc, #48]	@ (8006984 <prvResetNextTaskUnblockTime+0x38>)
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	2b00      	cmp	r3, #0
 800695a:	d104      	bne.n	8006966 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800695c:	4b0a      	ldr	r3, [pc, #40]	@ (8006988 <prvResetNextTaskUnblockTime+0x3c>)
 800695e:	f04f 32ff 	mov.w	r2, #4294967295
 8006962:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006964:	e008      	b.n	8006978 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006966:	4b07      	ldr	r3, [pc, #28]	@ (8006984 <prvResetNextTaskUnblockTime+0x38>)
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	68db      	ldr	r3, [r3, #12]
 800696c:	68db      	ldr	r3, [r3, #12]
 800696e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	685b      	ldr	r3, [r3, #4]
 8006974:	4a04      	ldr	r2, [pc, #16]	@ (8006988 <prvResetNextTaskUnblockTime+0x3c>)
 8006976:	6013      	str	r3, [r2, #0]
}
 8006978:	bf00      	nop
 800697a:	370c      	adds	r7, #12
 800697c:	46bd      	mov	sp, r7
 800697e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006982:	4770      	bx	lr
 8006984:	200006f0 	.word	0x200006f0
 8006988:	20000758 	.word	0x20000758

0800698c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800698c:	b580      	push	{r7, lr}
 800698e:	b084      	sub	sp, #16
 8006990:	af00      	add	r7, sp, #0
 8006992:	6078      	str	r0, [r7, #4]
 8006994:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006996:	4b29      	ldr	r3, [pc, #164]	@ (8006a3c <prvAddCurrentTaskToDelayedList+0xb0>)
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800699c:	4b28      	ldr	r3, [pc, #160]	@ (8006a40 <prvAddCurrentTaskToDelayedList+0xb4>)
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	3304      	adds	r3, #4
 80069a2:	4618      	mov	r0, r3
 80069a4:	f7ff fad3 	bl	8005f4e <uxListRemove>
 80069a8:	4603      	mov	r3, r0
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d10b      	bne.n	80069c6 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80069ae:	4b24      	ldr	r3, [pc, #144]	@ (8006a40 <prvAddCurrentTaskToDelayedList+0xb4>)
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80069b4:	2201      	movs	r2, #1
 80069b6:	fa02 f303 	lsl.w	r3, r2, r3
 80069ba:	43da      	mvns	r2, r3
 80069bc:	4b21      	ldr	r3, [pc, #132]	@ (8006a44 <prvAddCurrentTaskToDelayedList+0xb8>)
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	4013      	ands	r3, r2
 80069c2:	4a20      	ldr	r2, [pc, #128]	@ (8006a44 <prvAddCurrentTaskToDelayedList+0xb8>)
 80069c4:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80069cc:	d10a      	bne.n	80069e4 <prvAddCurrentTaskToDelayedList+0x58>
 80069ce:	683b      	ldr	r3, [r7, #0]
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d007      	beq.n	80069e4 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80069d4:	4b1a      	ldr	r3, [pc, #104]	@ (8006a40 <prvAddCurrentTaskToDelayedList+0xb4>)
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	3304      	adds	r3, #4
 80069da:	4619      	mov	r1, r3
 80069dc:	481a      	ldr	r0, [pc, #104]	@ (8006a48 <prvAddCurrentTaskToDelayedList+0xbc>)
 80069de:	f7ff fa59 	bl	8005e94 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80069e2:	e026      	b.n	8006a32 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80069e4:	68fa      	ldr	r2, [r7, #12]
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	4413      	add	r3, r2
 80069ea:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80069ec:	4b14      	ldr	r3, [pc, #80]	@ (8006a40 <prvAddCurrentTaskToDelayedList+0xb4>)
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	68ba      	ldr	r2, [r7, #8]
 80069f2:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80069f4:	68ba      	ldr	r2, [r7, #8]
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	429a      	cmp	r2, r3
 80069fa:	d209      	bcs.n	8006a10 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80069fc:	4b13      	ldr	r3, [pc, #76]	@ (8006a4c <prvAddCurrentTaskToDelayedList+0xc0>)
 80069fe:	681a      	ldr	r2, [r3, #0]
 8006a00:	4b0f      	ldr	r3, [pc, #60]	@ (8006a40 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	3304      	adds	r3, #4
 8006a06:	4619      	mov	r1, r3
 8006a08:	4610      	mov	r0, r2
 8006a0a:	f7ff fa67 	bl	8005edc <vListInsert>
}
 8006a0e:	e010      	b.n	8006a32 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006a10:	4b0f      	ldr	r3, [pc, #60]	@ (8006a50 <prvAddCurrentTaskToDelayedList+0xc4>)
 8006a12:	681a      	ldr	r2, [r3, #0]
 8006a14:	4b0a      	ldr	r3, [pc, #40]	@ (8006a40 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	3304      	adds	r3, #4
 8006a1a:	4619      	mov	r1, r3
 8006a1c:	4610      	mov	r0, r2
 8006a1e:	f7ff fa5d 	bl	8005edc <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006a22:	4b0c      	ldr	r3, [pc, #48]	@ (8006a54 <prvAddCurrentTaskToDelayedList+0xc8>)
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	68ba      	ldr	r2, [r7, #8]
 8006a28:	429a      	cmp	r2, r3
 8006a2a:	d202      	bcs.n	8006a32 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8006a2c:	4a09      	ldr	r2, [pc, #36]	@ (8006a54 <prvAddCurrentTaskToDelayedList+0xc8>)
 8006a2e:	68bb      	ldr	r3, [r7, #8]
 8006a30:	6013      	str	r3, [r2, #0]
}
 8006a32:	bf00      	nop
 8006a34:	3710      	adds	r7, #16
 8006a36:	46bd      	mov	sp, r7
 8006a38:	bd80      	pop	{r7, pc}
 8006a3a:	bf00      	nop
 8006a3c:	2000073c 	.word	0x2000073c
 8006a40:	20000638 	.word	0x20000638
 8006a44:	20000740 	.word	0x20000740
 8006a48:	20000724 	.word	0x20000724
 8006a4c:	200006f4 	.word	0x200006f4
 8006a50:	200006f0 	.word	0x200006f0
 8006a54:	20000758 	.word	0x20000758

08006a58 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006a58:	b480      	push	{r7}
 8006a5a:	b085      	sub	sp, #20
 8006a5c:	af00      	add	r7, sp, #0
 8006a5e:	60f8      	str	r0, [r7, #12]
 8006a60:	60b9      	str	r1, [r7, #8]
 8006a62:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	3b04      	subs	r3, #4
 8006a68:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8006a70:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	3b04      	subs	r3, #4
 8006a76:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006a78:	68bb      	ldr	r3, [r7, #8]
 8006a7a:	f023 0201 	bic.w	r2, r3, #1
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	3b04      	subs	r3, #4
 8006a86:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006a88:	4a0c      	ldr	r2, [pc, #48]	@ (8006abc <pxPortInitialiseStack+0x64>)
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	3b14      	subs	r3, #20
 8006a92:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006a94:	687a      	ldr	r2, [r7, #4]
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	3b04      	subs	r3, #4
 8006a9e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	f06f 0202 	mvn.w	r2, #2
 8006aa6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	3b20      	subs	r3, #32
 8006aac:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006aae:	68fb      	ldr	r3, [r7, #12]
}
 8006ab0:	4618      	mov	r0, r3
 8006ab2:	3714      	adds	r7, #20
 8006ab4:	46bd      	mov	sp, r7
 8006ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aba:	4770      	bx	lr
 8006abc:	08006ac1 	.word	0x08006ac1

08006ac0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006ac0:	b480      	push	{r7}
 8006ac2:	b085      	sub	sp, #20
 8006ac4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8006ac6:	2300      	movs	r3, #0
 8006ac8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006aca:	4b13      	ldr	r3, [pc, #76]	@ (8006b18 <prvTaskExitError+0x58>)
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ad2:	d00b      	beq.n	8006aec <prvTaskExitError+0x2c>
	__asm volatile
 8006ad4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ad8:	f383 8811 	msr	BASEPRI, r3
 8006adc:	f3bf 8f6f 	isb	sy
 8006ae0:	f3bf 8f4f 	dsb	sy
 8006ae4:	60fb      	str	r3, [r7, #12]
}
 8006ae6:	bf00      	nop
 8006ae8:	bf00      	nop
 8006aea:	e7fd      	b.n	8006ae8 <prvTaskExitError+0x28>
	__asm volatile
 8006aec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006af0:	f383 8811 	msr	BASEPRI, r3
 8006af4:	f3bf 8f6f 	isb	sy
 8006af8:	f3bf 8f4f 	dsb	sy
 8006afc:	60bb      	str	r3, [r7, #8]
}
 8006afe:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006b00:	bf00      	nop
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d0fc      	beq.n	8006b02 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006b08:	bf00      	nop
 8006b0a:	bf00      	nop
 8006b0c:	3714      	adds	r7, #20
 8006b0e:	46bd      	mov	sp, r7
 8006b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b14:	4770      	bx	lr
 8006b16:	bf00      	nop
 8006b18:	2000000c 	.word	0x2000000c
 8006b1c:	00000000 	.word	0x00000000

08006b20 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006b20:	4b07      	ldr	r3, [pc, #28]	@ (8006b40 <pxCurrentTCBConst2>)
 8006b22:	6819      	ldr	r1, [r3, #0]
 8006b24:	6808      	ldr	r0, [r1, #0]
 8006b26:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b2a:	f380 8809 	msr	PSP, r0
 8006b2e:	f3bf 8f6f 	isb	sy
 8006b32:	f04f 0000 	mov.w	r0, #0
 8006b36:	f380 8811 	msr	BASEPRI, r0
 8006b3a:	4770      	bx	lr
 8006b3c:	f3af 8000 	nop.w

08006b40 <pxCurrentTCBConst2>:
 8006b40:	20000638 	.word	0x20000638
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006b44:	bf00      	nop
 8006b46:	bf00      	nop

08006b48 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006b48:	4808      	ldr	r0, [pc, #32]	@ (8006b6c <prvPortStartFirstTask+0x24>)
 8006b4a:	6800      	ldr	r0, [r0, #0]
 8006b4c:	6800      	ldr	r0, [r0, #0]
 8006b4e:	f380 8808 	msr	MSP, r0
 8006b52:	f04f 0000 	mov.w	r0, #0
 8006b56:	f380 8814 	msr	CONTROL, r0
 8006b5a:	b662      	cpsie	i
 8006b5c:	b661      	cpsie	f
 8006b5e:	f3bf 8f4f 	dsb	sy
 8006b62:	f3bf 8f6f 	isb	sy
 8006b66:	df00      	svc	0
 8006b68:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8006b6a:	bf00      	nop
 8006b6c:	e000ed08 	.word	0xe000ed08

08006b70 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006b70:	b580      	push	{r7, lr}
 8006b72:	b086      	sub	sp, #24
 8006b74:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006b76:	4b47      	ldr	r3, [pc, #284]	@ (8006c94 <xPortStartScheduler+0x124>)
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	4a47      	ldr	r2, [pc, #284]	@ (8006c98 <xPortStartScheduler+0x128>)
 8006b7c:	4293      	cmp	r3, r2
 8006b7e:	d10b      	bne.n	8006b98 <xPortStartScheduler+0x28>
	__asm volatile
 8006b80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b84:	f383 8811 	msr	BASEPRI, r3
 8006b88:	f3bf 8f6f 	isb	sy
 8006b8c:	f3bf 8f4f 	dsb	sy
 8006b90:	613b      	str	r3, [r7, #16]
}
 8006b92:	bf00      	nop
 8006b94:	bf00      	nop
 8006b96:	e7fd      	b.n	8006b94 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006b98:	4b3e      	ldr	r3, [pc, #248]	@ (8006c94 <xPortStartScheduler+0x124>)
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	4a3f      	ldr	r2, [pc, #252]	@ (8006c9c <xPortStartScheduler+0x12c>)
 8006b9e:	4293      	cmp	r3, r2
 8006ba0:	d10b      	bne.n	8006bba <xPortStartScheduler+0x4a>
	__asm volatile
 8006ba2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ba6:	f383 8811 	msr	BASEPRI, r3
 8006baa:	f3bf 8f6f 	isb	sy
 8006bae:	f3bf 8f4f 	dsb	sy
 8006bb2:	60fb      	str	r3, [r7, #12]
}
 8006bb4:	bf00      	nop
 8006bb6:	bf00      	nop
 8006bb8:	e7fd      	b.n	8006bb6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006bba:	4b39      	ldr	r3, [pc, #228]	@ (8006ca0 <xPortStartScheduler+0x130>)
 8006bbc:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006bbe:	697b      	ldr	r3, [r7, #20]
 8006bc0:	781b      	ldrb	r3, [r3, #0]
 8006bc2:	b2db      	uxtb	r3, r3
 8006bc4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006bc6:	697b      	ldr	r3, [r7, #20]
 8006bc8:	22ff      	movs	r2, #255	@ 0xff
 8006bca:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006bcc:	697b      	ldr	r3, [r7, #20]
 8006bce:	781b      	ldrb	r3, [r3, #0]
 8006bd0:	b2db      	uxtb	r3, r3
 8006bd2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006bd4:	78fb      	ldrb	r3, [r7, #3]
 8006bd6:	b2db      	uxtb	r3, r3
 8006bd8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8006bdc:	b2da      	uxtb	r2, r3
 8006bde:	4b31      	ldr	r3, [pc, #196]	@ (8006ca4 <xPortStartScheduler+0x134>)
 8006be0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006be2:	4b31      	ldr	r3, [pc, #196]	@ (8006ca8 <xPortStartScheduler+0x138>)
 8006be4:	2207      	movs	r2, #7
 8006be6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006be8:	e009      	b.n	8006bfe <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8006bea:	4b2f      	ldr	r3, [pc, #188]	@ (8006ca8 <xPortStartScheduler+0x138>)
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	3b01      	subs	r3, #1
 8006bf0:	4a2d      	ldr	r2, [pc, #180]	@ (8006ca8 <xPortStartScheduler+0x138>)
 8006bf2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006bf4:	78fb      	ldrb	r3, [r7, #3]
 8006bf6:	b2db      	uxtb	r3, r3
 8006bf8:	005b      	lsls	r3, r3, #1
 8006bfa:	b2db      	uxtb	r3, r3
 8006bfc:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006bfe:	78fb      	ldrb	r3, [r7, #3]
 8006c00:	b2db      	uxtb	r3, r3
 8006c02:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006c06:	2b80      	cmp	r3, #128	@ 0x80
 8006c08:	d0ef      	beq.n	8006bea <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006c0a:	4b27      	ldr	r3, [pc, #156]	@ (8006ca8 <xPortStartScheduler+0x138>)
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	f1c3 0307 	rsb	r3, r3, #7
 8006c12:	2b04      	cmp	r3, #4
 8006c14:	d00b      	beq.n	8006c2e <xPortStartScheduler+0xbe>
	__asm volatile
 8006c16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c1a:	f383 8811 	msr	BASEPRI, r3
 8006c1e:	f3bf 8f6f 	isb	sy
 8006c22:	f3bf 8f4f 	dsb	sy
 8006c26:	60bb      	str	r3, [r7, #8]
}
 8006c28:	bf00      	nop
 8006c2a:	bf00      	nop
 8006c2c:	e7fd      	b.n	8006c2a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006c2e:	4b1e      	ldr	r3, [pc, #120]	@ (8006ca8 <xPortStartScheduler+0x138>)
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	021b      	lsls	r3, r3, #8
 8006c34:	4a1c      	ldr	r2, [pc, #112]	@ (8006ca8 <xPortStartScheduler+0x138>)
 8006c36:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006c38:	4b1b      	ldr	r3, [pc, #108]	@ (8006ca8 <xPortStartScheduler+0x138>)
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006c40:	4a19      	ldr	r2, [pc, #100]	@ (8006ca8 <xPortStartScheduler+0x138>)
 8006c42:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	b2da      	uxtb	r2, r3
 8006c48:	697b      	ldr	r3, [r7, #20]
 8006c4a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006c4c:	4b17      	ldr	r3, [pc, #92]	@ (8006cac <xPortStartScheduler+0x13c>)
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	4a16      	ldr	r2, [pc, #88]	@ (8006cac <xPortStartScheduler+0x13c>)
 8006c52:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8006c56:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006c58:	4b14      	ldr	r3, [pc, #80]	@ (8006cac <xPortStartScheduler+0x13c>)
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	4a13      	ldr	r2, [pc, #76]	@ (8006cac <xPortStartScheduler+0x13c>)
 8006c5e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8006c62:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006c64:	f000 f8da 	bl	8006e1c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006c68:	4b11      	ldr	r3, [pc, #68]	@ (8006cb0 <xPortStartScheduler+0x140>)
 8006c6a:	2200      	movs	r2, #0
 8006c6c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8006c6e:	f000 f8f9 	bl	8006e64 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8006c72:	4b10      	ldr	r3, [pc, #64]	@ (8006cb4 <xPortStartScheduler+0x144>)
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	4a0f      	ldr	r2, [pc, #60]	@ (8006cb4 <xPortStartScheduler+0x144>)
 8006c78:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8006c7c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006c7e:	f7ff ff63 	bl	8006b48 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006c82:	f7ff fd43 	bl	800670c <vTaskSwitchContext>
	prvTaskExitError();
 8006c86:	f7ff ff1b 	bl	8006ac0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8006c8a:	2300      	movs	r3, #0
}
 8006c8c:	4618      	mov	r0, r3
 8006c8e:	3718      	adds	r7, #24
 8006c90:	46bd      	mov	sp, r7
 8006c92:	bd80      	pop	{r7, pc}
 8006c94:	e000ed00 	.word	0xe000ed00
 8006c98:	410fc271 	.word	0x410fc271
 8006c9c:	410fc270 	.word	0x410fc270
 8006ca0:	e000e400 	.word	0xe000e400
 8006ca4:	20000764 	.word	0x20000764
 8006ca8:	20000768 	.word	0x20000768
 8006cac:	e000ed20 	.word	0xe000ed20
 8006cb0:	2000000c 	.word	0x2000000c
 8006cb4:	e000ef34 	.word	0xe000ef34

08006cb8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006cb8:	b480      	push	{r7}
 8006cba:	b083      	sub	sp, #12
 8006cbc:	af00      	add	r7, sp, #0
	__asm volatile
 8006cbe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006cc2:	f383 8811 	msr	BASEPRI, r3
 8006cc6:	f3bf 8f6f 	isb	sy
 8006cca:	f3bf 8f4f 	dsb	sy
 8006cce:	607b      	str	r3, [r7, #4]
}
 8006cd0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8006cd2:	4b10      	ldr	r3, [pc, #64]	@ (8006d14 <vPortEnterCritical+0x5c>)
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	3301      	adds	r3, #1
 8006cd8:	4a0e      	ldr	r2, [pc, #56]	@ (8006d14 <vPortEnterCritical+0x5c>)
 8006cda:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006cdc:	4b0d      	ldr	r3, [pc, #52]	@ (8006d14 <vPortEnterCritical+0x5c>)
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	2b01      	cmp	r3, #1
 8006ce2:	d110      	bne.n	8006d06 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006ce4:	4b0c      	ldr	r3, [pc, #48]	@ (8006d18 <vPortEnterCritical+0x60>)
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	b2db      	uxtb	r3, r3
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d00b      	beq.n	8006d06 <vPortEnterCritical+0x4e>
	__asm volatile
 8006cee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006cf2:	f383 8811 	msr	BASEPRI, r3
 8006cf6:	f3bf 8f6f 	isb	sy
 8006cfa:	f3bf 8f4f 	dsb	sy
 8006cfe:	603b      	str	r3, [r7, #0]
}
 8006d00:	bf00      	nop
 8006d02:	bf00      	nop
 8006d04:	e7fd      	b.n	8006d02 <vPortEnterCritical+0x4a>
	}
}
 8006d06:	bf00      	nop
 8006d08:	370c      	adds	r7, #12
 8006d0a:	46bd      	mov	sp, r7
 8006d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d10:	4770      	bx	lr
 8006d12:	bf00      	nop
 8006d14:	2000000c 	.word	0x2000000c
 8006d18:	e000ed04 	.word	0xe000ed04

08006d1c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006d1c:	b480      	push	{r7}
 8006d1e:	b083      	sub	sp, #12
 8006d20:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8006d22:	4b12      	ldr	r3, [pc, #72]	@ (8006d6c <vPortExitCritical+0x50>)
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	d10b      	bne.n	8006d42 <vPortExitCritical+0x26>
	__asm volatile
 8006d2a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d2e:	f383 8811 	msr	BASEPRI, r3
 8006d32:	f3bf 8f6f 	isb	sy
 8006d36:	f3bf 8f4f 	dsb	sy
 8006d3a:	607b      	str	r3, [r7, #4]
}
 8006d3c:	bf00      	nop
 8006d3e:	bf00      	nop
 8006d40:	e7fd      	b.n	8006d3e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006d42:	4b0a      	ldr	r3, [pc, #40]	@ (8006d6c <vPortExitCritical+0x50>)
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	3b01      	subs	r3, #1
 8006d48:	4a08      	ldr	r2, [pc, #32]	@ (8006d6c <vPortExitCritical+0x50>)
 8006d4a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006d4c:	4b07      	ldr	r3, [pc, #28]	@ (8006d6c <vPortExitCritical+0x50>)
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d105      	bne.n	8006d60 <vPortExitCritical+0x44>
 8006d54:	2300      	movs	r3, #0
 8006d56:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006d58:	683b      	ldr	r3, [r7, #0]
 8006d5a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8006d5e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006d60:	bf00      	nop
 8006d62:	370c      	adds	r7, #12
 8006d64:	46bd      	mov	sp, r7
 8006d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d6a:	4770      	bx	lr
 8006d6c:	2000000c 	.word	0x2000000c

08006d70 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006d70:	f3ef 8009 	mrs	r0, PSP
 8006d74:	f3bf 8f6f 	isb	sy
 8006d78:	4b15      	ldr	r3, [pc, #84]	@ (8006dd0 <pxCurrentTCBConst>)
 8006d7a:	681a      	ldr	r2, [r3, #0]
 8006d7c:	f01e 0f10 	tst.w	lr, #16
 8006d80:	bf08      	it	eq
 8006d82:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006d86:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d8a:	6010      	str	r0, [r2, #0]
 8006d8c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006d90:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8006d94:	f380 8811 	msr	BASEPRI, r0
 8006d98:	f3bf 8f4f 	dsb	sy
 8006d9c:	f3bf 8f6f 	isb	sy
 8006da0:	f7ff fcb4 	bl	800670c <vTaskSwitchContext>
 8006da4:	f04f 0000 	mov.w	r0, #0
 8006da8:	f380 8811 	msr	BASEPRI, r0
 8006dac:	bc09      	pop	{r0, r3}
 8006dae:	6819      	ldr	r1, [r3, #0]
 8006db0:	6808      	ldr	r0, [r1, #0]
 8006db2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006db6:	f01e 0f10 	tst.w	lr, #16
 8006dba:	bf08      	it	eq
 8006dbc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006dc0:	f380 8809 	msr	PSP, r0
 8006dc4:	f3bf 8f6f 	isb	sy
 8006dc8:	4770      	bx	lr
 8006dca:	bf00      	nop
 8006dcc:	f3af 8000 	nop.w

08006dd0 <pxCurrentTCBConst>:
 8006dd0:	20000638 	.word	0x20000638
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006dd4:	bf00      	nop
 8006dd6:	bf00      	nop

08006dd8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006dd8:	b580      	push	{r7, lr}
 8006dda:	b082      	sub	sp, #8
 8006ddc:	af00      	add	r7, sp, #0
	__asm volatile
 8006dde:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006de2:	f383 8811 	msr	BASEPRI, r3
 8006de6:	f3bf 8f6f 	isb	sy
 8006dea:	f3bf 8f4f 	dsb	sy
 8006dee:	607b      	str	r3, [r7, #4]
}
 8006df0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006df2:	f7ff fbd1 	bl	8006598 <xTaskIncrementTick>
 8006df6:	4603      	mov	r3, r0
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d003      	beq.n	8006e04 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8006dfc:	4b06      	ldr	r3, [pc, #24]	@ (8006e18 <SysTick_Handler+0x40>)
 8006dfe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006e02:	601a      	str	r2, [r3, #0]
 8006e04:	2300      	movs	r3, #0
 8006e06:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006e08:	683b      	ldr	r3, [r7, #0]
 8006e0a:	f383 8811 	msr	BASEPRI, r3
}
 8006e0e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006e10:	bf00      	nop
 8006e12:	3708      	adds	r7, #8
 8006e14:	46bd      	mov	sp, r7
 8006e16:	bd80      	pop	{r7, pc}
 8006e18:	e000ed04 	.word	0xe000ed04

08006e1c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8006e1c:	b480      	push	{r7}
 8006e1e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006e20:	4b0b      	ldr	r3, [pc, #44]	@ (8006e50 <vPortSetupTimerInterrupt+0x34>)
 8006e22:	2200      	movs	r2, #0
 8006e24:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006e26:	4b0b      	ldr	r3, [pc, #44]	@ (8006e54 <vPortSetupTimerInterrupt+0x38>)
 8006e28:	2200      	movs	r2, #0
 8006e2a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8006e2c:	4b0a      	ldr	r3, [pc, #40]	@ (8006e58 <vPortSetupTimerInterrupt+0x3c>)
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	4a0a      	ldr	r2, [pc, #40]	@ (8006e5c <vPortSetupTimerInterrupt+0x40>)
 8006e32:	fba2 2303 	umull	r2, r3, r2, r3
 8006e36:	099b      	lsrs	r3, r3, #6
 8006e38:	4a09      	ldr	r2, [pc, #36]	@ (8006e60 <vPortSetupTimerInterrupt+0x44>)
 8006e3a:	3b01      	subs	r3, #1
 8006e3c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8006e3e:	4b04      	ldr	r3, [pc, #16]	@ (8006e50 <vPortSetupTimerInterrupt+0x34>)
 8006e40:	2207      	movs	r2, #7
 8006e42:	601a      	str	r2, [r3, #0]
}
 8006e44:	bf00      	nop
 8006e46:	46bd      	mov	sp, r7
 8006e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e4c:	4770      	bx	lr
 8006e4e:	bf00      	nop
 8006e50:	e000e010 	.word	0xe000e010
 8006e54:	e000e018 	.word	0xe000e018
 8006e58:	20000000 	.word	0x20000000
 8006e5c:	10624dd3 	.word	0x10624dd3
 8006e60:	e000e014 	.word	0xe000e014

08006e64 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006e64:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8006e74 <vPortEnableVFP+0x10>
 8006e68:	6801      	ldr	r1, [r0, #0]
 8006e6a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8006e6e:	6001      	str	r1, [r0, #0]
 8006e70:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006e72:	bf00      	nop
 8006e74:	e000ed88 	.word	0xe000ed88

08006e78 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006e78:	b580      	push	{r7, lr}
 8006e7a:	b08a      	sub	sp, #40	@ 0x28
 8006e7c:	af00      	add	r7, sp, #0
 8006e7e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006e80:	2300      	movs	r3, #0
 8006e82:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006e84:	f7ff fadc 	bl	8006440 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006e88:	4b5c      	ldr	r3, [pc, #368]	@ (8006ffc <pvPortMalloc+0x184>)
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d101      	bne.n	8006e94 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006e90:	f000 f924 	bl	80070dc <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006e94:	4b5a      	ldr	r3, [pc, #360]	@ (8007000 <pvPortMalloc+0x188>)
 8006e96:	681a      	ldr	r2, [r3, #0]
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	4013      	ands	r3, r2
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	f040 8095 	bne.w	8006fcc <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	d01e      	beq.n	8006ee6 <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8006ea8:	2208      	movs	r2, #8
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	4413      	add	r3, r2
 8006eae:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	f003 0307 	and.w	r3, r3, #7
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d015      	beq.n	8006ee6 <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	f023 0307 	bic.w	r3, r3, #7
 8006ec0:	3308      	adds	r3, #8
 8006ec2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	f003 0307 	and.w	r3, r3, #7
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d00b      	beq.n	8006ee6 <pvPortMalloc+0x6e>
	__asm volatile
 8006ece:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ed2:	f383 8811 	msr	BASEPRI, r3
 8006ed6:	f3bf 8f6f 	isb	sy
 8006eda:	f3bf 8f4f 	dsb	sy
 8006ede:	617b      	str	r3, [r7, #20]
}
 8006ee0:	bf00      	nop
 8006ee2:	bf00      	nop
 8006ee4:	e7fd      	b.n	8006ee2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	d06f      	beq.n	8006fcc <pvPortMalloc+0x154>
 8006eec:	4b45      	ldr	r3, [pc, #276]	@ (8007004 <pvPortMalloc+0x18c>)
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	687a      	ldr	r2, [r7, #4]
 8006ef2:	429a      	cmp	r2, r3
 8006ef4:	d86a      	bhi.n	8006fcc <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006ef6:	4b44      	ldr	r3, [pc, #272]	@ (8007008 <pvPortMalloc+0x190>)
 8006ef8:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006efa:	4b43      	ldr	r3, [pc, #268]	@ (8007008 <pvPortMalloc+0x190>)
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006f00:	e004      	b.n	8006f0c <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8006f02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f04:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006f06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006f0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f0e:	685b      	ldr	r3, [r3, #4]
 8006f10:	687a      	ldr	r2, [r7, #4]
 8006f12:	429a      	cmp	r2, r3
 8006f14:	d903      	bls.n	8006f1e <pvPortMalloc+0xa6>
 8006f16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d1f1      	bne.n	8006f02 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006f1e:	4b37      	ldr	r3, [pc, #220]	@ (8006ffc <pvPortMalloc+0x184>)
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006f24:	429a      	cmp	r2, r3
 8006f26:	d051      	beq.n	8006fcc <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006f28:	6a3b      	ldr	r3, [r7, #32]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	2208      	movs	r2, #8
 8006f2e:	4413      	add	r3, r2
 8006f30:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006f32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f34:	681a      	ldr	r2, [r3, #0]
 8006f36:	6a3b      	ldr	r3, [r7, #32]
 8006f38:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006f3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f3c:	685a      	ldr	r2, [r3, #4]
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	1ad2      	subs	r2, r2, r3
 8006f42:	2308      	movs	r3, #8
 8006f44:	005b      	lsls	r3, r3, #1
 8006f46:	429a      	cmp	r2, r3
 8006f48:	d920      	bls.n	8006f8c <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006f4a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	4413      	add	r3, r2
 8006f50:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006f52:	69bb      	ldr	r3, [r7, #24]
 8006f54:	f003 0307 	and.w	r3, r3, #7
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d00b      	beq.n	8006f74 <pvPortMalloc+0xfc>
	__asm volatile
 8006f5c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f60:	f383 8811 	msr	BASEPRI, r3
 8006f64:	f3bf 8f6f 	isb	sy
 8006f68:	f3bf 8f4f 	dsb	sy
 8006f6c:	613b      	str	r3, [r7, #16]
}
 8006f6e:	bf00      	nop
 8006f70:	bf00      	nop
 8006f72:	e7fd      	b.n	8006f70 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006f74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f76:	685a      	ldr	r2, [r3, #4]
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	1ad2      	subs	r2, r2, r3
 8006f7c:	69bb      	ldr	r3, [r7, #24]
 8006f7e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006f80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f82:	687a      	ldr	r2, [r7, #4]
 8006f84:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006f86:	69b8      	ldr	r0, [r7, #24]
 8006f88:	f000 f90a 	bl	80071a0 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006f8c:	4b1d      	ldr	r3, [pc, #116]	@ (8007004 <pvPortMalloc+0x18c>)
 8006f8e:	681a      	ldr	r2, [r3, #0]
 8006f90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f92:	685b      	ldr	r3, [r3, #4]
 8006f94:	1ad3      	subs	r3, r2, r3
 8006f96:	4a1b      	ldr	r2, [pc, #108]	@ (8007004 <pvPortMalloc+0x18c>)
 8006f98:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006f9a:	4b1a      	ldr	r3, [pc, #104]	@ (8007004 <pvPortMalloc+0x18c>)
 8006f9c:	681a      	ldr	r2, [r3, #0]
 8006f9e:	4b1b      	ldr	r3, [pc, #108]	@ (800700c <pvPortMalloc+0x194>)
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	429a      	cmp	r2, r3
 8006fa4:	d203      	bcs.n	8006fae <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006fa6:	4b17      	ldr	r3, [pc, #92]	@ (8007004 <pvPortMalloc+0x18c>)
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	4a18      	ldr	r2, [pc, #96]	@ (800700c <pvPortMalloc+0x194>)
 8006fac:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006fae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fb0:	685a      	ldr	r2, [r3, #4]
 8006fb2:	4b13      	ldr	r3, [pc, #76]	@ (8007000 <pvPortMalloc+0x188>)
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	431a      	orrs	r2, r3
 8006fb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fba:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006fbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fbe:	2200      	movs	r2, #0
 8006fc0:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8006fc2:	4b13      	ldr	r3, [pc, #76]	@ (8007010 <pvPortMalloc+0x198>)
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	3301      	adds	r3, #1
 8006fc8:	4a11      	ldr	r2, [pc, #68]	@ (8007010 <pvPortMalloc+0x198>)
 8006fca:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006fcc:	f7ff fa46 	bl	800645c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006fd0:	69fb      	ldr	r3, [r7, #28]
 8006fd2:	f003 0307 	and.w	r3, r3, #7
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d00b      	beq.n	8006ff2 <pvPortMalloc+0x17a>
	__asm volatile
 8006fda:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006fde:	f383 8811 	msr	BASEPRI, r3
 8006fe2:	f3bf 8f6f 	isb	sy
 8006fe6:	f3bf 8f4f 	dsb	sy
 8006fea:	60fb      	str	r3, [r7, #12]
}
 8006fec:	bf00      	nop
 8006fee:	bf00      	nop
 8006ff0:	e7fd      	b.n	8006fee <pvPortMalloc+0x176>
	return pvReturn;
 8006ff2:	69fb      	ldr	r3, [r7, #28]
}
 8006ff4:	4618      	mov	r0, r3
 8006ff6:	3728      	adds	r7, #40	@ 0x28
 8006ff8:	46bd      	mov	sp, r7
 8006ffa:	bd80      	pop	{r7, pc}
 8006ffc:	20004374 	.word	0x20004374
 8007000:	20004388 	.word	0x20004388
 8007004:	20004378 	.word	0x20004378
 8007008:	2000436c 	.word	0x2000436c
 800700c:	2000437c 	.word	0x2000437c
 8007010:	20004380 	.word	0x20004380

08007014 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007014:	b580      	push	{r7, lr}
 8007016:	b086      	sub	sp, #24
 8007018:	af00      	add	r7, sp, #0
 800701a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	2b00      	cmp	r3, #0
 8007024:	d04f      	beq.n	80070c6 <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007026:	2308      	movs	r3, #8
 8007028:	425b      	negs	r3, r3
 800702a:	697a      	ldr	r2, [r7, #20]
 800702c:	4413      	add	r3, r2
 800702e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007030:	697b      	ldr	r3, [r7, #20]
 8007032:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007034:	693b      	ldr	r3, [r7, #16]
 8007036:	685a      	ldr	r2, [r3, #4]
 8007038:	4b25      	ldr	r3, [pc, #148]	@ (80070d0 <vPortFree+0xbc>)
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	4013      	ands	r3, r2
 800703e:	2b00      	cmp	r3, #0
 8007040:	d10b      	bne.n	800705a <vPortFree+0x46>
	__asm volatile
 8007042:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007046:	f383 8811 	msr	BASEPRI, r3
 800704a:	f3bf 8f6f 	isb	sy
 800704e:	f3bf 8f4f 	dsb	sy
 8007052:	60fb      	str	r3, [r7, #12]
}
 8007054:	bf00      	nop
 8007056:	bf00      	nop
 8007058:	e7fd      	b.n	8007056 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800705a:	693b      	ldr	r3, [r7, #16]
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	2b00      	cmp	r3, #0
 8007060:	d00b      	beq.n	800707a <vPortFree+0x66>
	__asm volatile
 8007062:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007066:	f383 8811 	msr	BASEPRI, r3
 800706a:	f3bf 8f6f 	isb	sy
 800706e:	f3bf 8f4f 	dsb	sy
 8007072:	60bb      	str	r3, [r7, #8]
}
 8007074:	bf00      	nop
 8007076:	bf00      	nop
 8007078:	e7fd      	b.n	8007076 <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800707a:	693b      	ldr	r3, [r7, #16]
 800707c:	685a      	ldr	r2, [r3, #4]
 800707e:	4b14      	ldr	r3, [pc, #80]	@ (80070d0 <vPortFree+0xbc>)
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	4013      	ands	r3, r2
 8007084:	2b00      	cmp	r3, #0
 8007086:	d01e      	beq.n	80070c6 <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007088:	693b      	ldr	r3, [r7, #16]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	2b00      	cmp	r3, #0
 800708e:	d11a      	bne.n	80070c6 <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007090:	693b      	ldr	r3, [r7, #16]
 8007092:	685a      	ldr	r2, [r3, #4]
 8007094:	4b0e      	ldr	r3, [pc, #56]	@ (80070d0 <vPortFree+0xbc>)
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	43db      	mvns	r3, r3
 800709a:	401a      	ands	r2, r3
 800709c:	693b      	ldr	r3, [r7, #16]
 800709e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80070a0:	f7ff f9ce 	bl	8006440 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80070a4:	693b      	ldr	r3, [r7, #16]
 80070a6:	685a      	ldr	r2, [r3, #4]
 80070a8:	4b0a      	ldr	r3, [pc, #40]	@ (80070d4 <vPortFree+0xc0>)
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	4413      	add	r3, r2
 80070ae:	4a09      	ldr	r2, [pc, #36]	@ (80070d4 <vPortFree+0xc0>)
 80070b0:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80070b2:	6938      	ldr	r0, [r7, #16]
 80070b4:	f000 f874 	bl	80071a0 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80070b8:	4b07      	ldr	r3, [pc, #28]	@ (80070d8 <vPortFree+0xc4>)
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	3301      	adds	r3, #1
 80070be:	4a06      	ldr	r2, [pc, #24]	@ (80070d8 <vPortFree+0xc4>)
 80070c0:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80070c2:	f7ff f9cb 	bl	800645c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80070c6:	bf00      	nop
 80070c8:	3718      	adds	r7, #24
 80070ca:	46bd      	mov	sp, r7
 80070cc:	bd80      	pop	{r7, pc}
 80070ce:	bf00      	nop
 80070d0:	20004388 	.word	0x20004388
 80070d4:	20004378 	.word	0x20004378
 80070d8:	20004384 	.word	0x20004384

080070dc <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80070dc:	b480      	push	{r7}
 80070de:	b085      	sub	sp, #20
 80070e0:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80070e2:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 80070e6:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80070e8:	4b27      	ldr	r3, [pc, #156]	@ (8007188 <prvHeapInit+0xac>)
 80070ea:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	f003 0307 	and.w	r3, r3, #7
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	d00c      	beq.n	8007110 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	3307      	adds	r3, #7
 80070fa:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	f023 0307 	bic.w	r3, r3, #7
 8007102:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007104:	68ba      	ldr	r2, [r7, #8]
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	1ad3      	subs	r3, r2, r3
 800710a:	4a1f      	ldr	r2, [pc, #124]	@ (8007188 <prvHeapInit+0xac>)
 800710c:	4413      	add	r3, r2
 800710e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007114:	4a1d      	ldr	r2, [pc, #116]	@ (800718c <prvHeapInit+0xb0>)
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800711a:	4b1c      	ldr	r3, [pc, #112]	@ (800718c <prvHeapInit+0xb0>)
 800711c:	2200      	movs	r2, #0
 800711e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	68ba      	ldr	r2, [r7, #8]
 8007124:	4413      	add	r3, r2
 8007126:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007128:	2208      	movs	r2, #8
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	1a9b      	subs	r3, r3, r2
 800712e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	f023 0307 	bic.w	r3, r3, #7
 8007136:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	4a15      	ldr	r2, [pc, #84]	@ (8007190 <prvHeapInit+0xb4>)
 800713c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800713e:	4b14      	ldr	r3, [pc, #80]	@ (8007190 <prvHeapInit+0xb4>)
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	2200      	movs	r2, #0
 8007144:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8007146:	4b12      	ldr	r3, [pc, #72]	@ (8007190 <prvHeapInit+0xb4>)
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	2200      	movs	r2, #0
 800714c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007152:	683b      	ldr	r3, [r7, #0]
 8007154:	68fa      	ldr	r2, [r7, #12]
 8007156:	1ad2      	subs	r2, r2, r3
 8007158:	683b      	ldr	r3, [r7, #0]
 800715a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800715c:	4b0c      	ldr	r3, [pc, #48]	@ (8007190 <prvHeapInit+0xb4>)
 800715e:	681a      	ldr	r2, [r3, #0]
 8007160:	683b      	ldr	r3, [r7, #0]
 8007162:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007164:	683b      	ldr	r3, [r7, #0]
 8007166:	685b      	ldr	r3, [r3, #4]
 8007168:	4a0a      	ldr	r2, [pc, #40]	@ (8007194 <prvHeapInit+0xb8>)
 800716a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800716c:	683b      	ldr	r3, [r7, #0]
 800716e:	685b      	ldr	r3, [r3, #4]
 8007170:	4a09      	ldr	r2, [pc, #36]	@ (8007198 <prvHeapInit+0xbc>)
 8007172:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007174:	4b09      	ldr	r3, [pc, #36]	@ (800719c <prvHeapInit+0xc0>)
 8007176:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800717a:	601a      	str	r2, [r3, #0]
}
 800717c:	bf00      	nop
 800717e:	3714      	adds	r7, #20
 8007180:	46bd      	mov	sp, r7
 8007182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007186:	4770      	bx	lr
 8007188:	2000076c 	.word	0x2000076c
 800718c:	2000436c 	.word	0x2000436c
 8007190:	20004374 	.word	0x20004374
 8007194:	2000437c 	.word	0x2000437c
 8007198:	20004378 	.word	0x20004378
 800719c:	20004388 	.word	0x20004388

080071a0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80071a0:	b480      	push	{r7}
 80071a2:	b085      	sub	sp, #20
 80071a4:	af00      	add	r7, sp, #0
 80071a6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80071a8:	4b28      	ldr	r3, [pc, #160]	@ (800724c <prvInsertBlockIntoFreeList+0xac>)
 80071aa:	60fb      	str	r3, [r7, #12]
 80071ac:	e002      	b.n	80071b4 <prvInsertBlockIntoFreeList+0x14>
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	60fb      	str	r3, [r7, #12]
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	687a      	ldr	r2, [r7, #4]
 80071ba:	429a      	cmp	r2, r3
 80071bc:	d8f7      	bhi.n	80071ae <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	685b      	ldr	r3, [r3, #4]
 80071c6:	68ba      	ldr	r2, [r7, #8]
 80071c8:	4413      	add	r3, r2
 80071ca:	687a      	ldr	r2, [r7, #4]
 80071cc:	429a      	cmp	r2, r3
 80071ce:	d108      	bne.n	80071e2 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	685a      	ldr	r2, [r3, #4]
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	685b      	ldr	r3, [r3, #4]
 80071d8:	441a      	add	r2, r3
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	685b      	ldr	r3, [r3, #4]
 80071ea:	68ba      	ldr	r2, [r7, #8]
 80071ec:	441a      	add	r2, r3
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	429a      	cmp	r2, r3
 80071f4:	d118      	bne.n	8007228 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	681a      	ldr	r2, [r3, #0]
 80071fa:	4b15      	ldr	r3, [pc, #84]	@ (8007250 <prvInsertBlockIntoFreeList+0xb0>)
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	429a      	cmp	r2, r3
 8007200:	d00d      	beq.n	800721e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	685a      	ldr	r2, [r3, #4]
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	685b      	ldr	r3, [r3, #4]
 800720c:	441a      	add	r2, r3
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	681a      	ldr	r2, [r3, #0]
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	601a      	str	r2, [r3, #0]
 800721c:	e008      	b.n	8007230 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800721e:	4b0c      	ldr	r3, [pc, #48]	@ (8007250 <prvInsertBlockIntoFreeList+0xb0>)
 8007220:	681a      	ldr	r2, [r3, #0]
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	601a      	str	r2, [r3, #0]
 8007226:	e003      	b.n	8007230 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	681a      	ldr	r2, [r3, #0]
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007230:	68fa      	ldr	r2, [r7, #12]
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	429a      	cmp	r2, r3
 8007236:	d002      	beq.n	800723e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	687a      	ldr	r2, [r7, #4]
 800723c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800723e:	bf00      	nop
 8007240:	3714      	adds	r7, #20
 8007242:	46bd      	mov	sp, r7
 8007244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007248:	4770      	bx	lr
 800724a:	bf00      	nop
 800724c:	2000436c 	.word	0x2000436c
 8007250:	20004374 	.word	0x20004374

08007254 <memset>:
 8007254:	4402      	add	r2, r0
 8007256:	4603      	mov	r3, r0
 8007258:	4293      	cmp	r3, r2
 800725a:	d100      	bne.n	800725e <memset+0xa>
 800725c:	4770      	bx	lr
 800725e:	f803 1b01 	strb.w	r1, [r3], #1
 8007262:	e7f9      	b.n	8007258 <memset+0x4>

08007264 <_reclaim_reent>:
 8007264:	4b29      	ldr	r3, [pc, #164]	@ (800730c <_reclaim_reent+0xa8>)
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	4283      	cmp	r3, r0
 800726a:	b570      	push	{r4, r5, r6, lr}
 800726c:	4604      	mov	r4, r0
 800726e:	d04b      	beq.n	8007308 <_reclaim_reent+0xa4>
 8007270:	69c3      	ldr	r3, [r0, #28]
 8007272:	b1ab      	cbz	r3, 80072a0 <_reclaim_reent+0x3c>
 8007274:	68db      	ldr	r3, [r3, #12]
 8007276:	b16b      	cbz	r3, 8007294 <_reclaim_reent+0x30>
 8007278:	2500      	movs	r5, #0
 800727a:	69e3      	ldr	r3, [r4, #28]
 800727c:	68db      	ldr	r3, [r3, #12]
 800727e:	5959      	ldr	r1, [r3, r5]
 8007280:	2900      	cmp	r1, #0
 8007282:	d13b      	bne.n	80072fc <_reclaim_reent+0x98>
 8007284:	3504      	adds	r5, #4
 8007286:	2d80      	cmp	r5, #128	@ 0x80
 8007288:	d1f7      	bne.n	800727a <_reclaim_reent+0x16>
 800728a:	69e3      	ldr	r3, [r4, #28]
 800728c:	4620      	mov	r0, r4
 800728e:	68d9      	ldr	r1, [r3, #12]
 8007290:	f000 f864 	bl	800735c <_free_r>
 8007294:	69e3      	ldr	r3, [r4, #28]
 8007296:	6819      	ldr	r1, [r3, #0]
 8007298:	b111      	cbz	r1, 80072a0 <_reclaim_reent+0x3c>
 800729a:	4620      	mov	r0, r4
 800729c:	f000 f85e 	bl	800735c <_free_r>
 80072a0:	6961      	ldr	r1, [r4, #20]
 80072a2:	b111      	cbz	r1, 80072aa <_reclaim_reent+0x46>
 80072a4:	4620      	mov	r0, r4
 80072a6:	f000 f859 	bl	800735c <_free_r>
 80072aa:	69e1      	ldr	r1, [r4, #28]
 80072ac:	b111      	cbz	r1, 80072b4 <_reclaim_reent+0x50>
 80072ae:	4620      	mov	r0, r4
 80072b0:	f000 f854 	bl	800735c <_free_r>
 80072b4:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 80072b6:	b111      	cbz	r1, 80072be <_reclaim_reent+0x5a>
 80072b8:	4620      	mov	r0, r4
 80072ba:	f000 f84f 	bl	800735c <_free_r>
 80072be:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80072c0:	b111      	cbz	r1, 80072c8 <_reclaim_reent+0x64>
 80072c2:	4620      	mov	r0, r4
 80072c4:	f000 f84a 	bl	800735c <_free_r>
 80072c8:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 80072ca:	b111      	cbz	r1, 80072d2 <_reclaim_reent+0x6e>
 80072cc:	4620      	mov	r0, r4
 80072ce:	f000 f845 	bl	800735c <_free_r>
 80072d2:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 80072d4:	b111      	cbz	r1, 80072dc <_reclaim_reent+0x78>
 80072d6:	4620      	mov	r0, r4
 80072d8:	f000 f840 	bl	800735c <_free_r>
 80072dc:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 80072de:	b111      	cbz	r1, 80072e6 <_reclaim_reent+0x82>
 80072e0:	4620      	mov	r0, r4
 80072e2:	f000 f83b 	bl	800735c <_free_r>
 80072e6:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 80072e8:	b111      	cbz	r1, 80072f0 <_reclaim_reent+0x8c>
 80072ea:	4620      	mov	r0, r4
 80072ec:	f000 f836 	bl	800735c <_free_r>
 80072f0:	6a23      	ldr	r3, [r4, #32]
 80072f2:	b14b      	cbz	r3, 8007308 <_reclaim_reent+0xa4>
 80072f4:	4620      	mov	r0, r4
 80072f6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80072fa:	4718      	bx	r3
 80072fc:	680e      	ldr	r6, [r1, #0]
 80072fe:	4620      	mov	r0, r4
 8007300:	f000 f82c 	bl	800735c <_free_r>
 8007304:	4631      	mov	r1, r6
 8007306:	e7bb      	b.n	8007280 <_reclaim_reent+0x1c>
 8007308:	bd70      	pop	{r4, r5, r6, pc}
 800730a:	bf00      	nop
 800730c:	20000010 	.word	0x20000010

08007310 <__libc_init_array>:
 8007310:	b570      	push	{r4, r5, r6, lr}
 8007312:	4d0d      	ldr	r5, [pc, #52]	@ (8007348 <__libc_init_array+0x38>)
 8007314:	4c0d      	ldr	r4, [pc, #52]	@ (800734c <__libc_init_array+0x3c>)
 8007316:	1b64      	subs	r4, r4, r5
 8007318:	10a4      	asrs	r4, r4, #2
 800731a:	2600      	movs	r6, #0
 800731c:	42a6      	cmp	r6, r4
 800731e:	d109      	bne.n	8007334 <__libc_init_array+0x24>
 8007320:	4d0b      	ldr	r5, [pc, #44]	@ (8007350 <__libc_init_array+0x40>)
 8007322:	4c0c      	ldr	r4, [pc, #48]	@ (8007354 <__libc_init_array+0x44>)
 8007324:	f000 f870 	bl	8007408 <_init>
 8007328:	1b64      	subs	r4, r4, r5
 800732a:	10a4      	asrs	r4, r4, #2
 800732c:	2600      	movs	r6, #0
 800732e:	42a6      	cmp	r6, r4
 8007330:	d105      	bne.n	800733e <__libc_init_array+0x2e>
 8007332:	bd70      	pop	{r4, r5, r6, pc}
 8007334:	f855 3b04 	ldr.w	r3, [r5], #4
 8007338:	4798      	blx	r3
 800733a:	3601      	adds	r6, #1
 800733c:	e7ee      	b.n	800731c <__libc_init_array+0xc>
 800733e:	f855 3b04 	ldr.w	r3, [r5], #4
 8007342:	4798      	blx	r3
 8007344:	3601      	adds	r6, #1
 8007346:	e7f2      	b.n	800732e <__libc_init_array+0x1e>
 8007348:	080074cc 	.word	0x080074cc
 800734c:	080074cc 	.word	0x080074cc
 8007350:	080074cc 	.word	0x080074cc
 8007354:	080074d0 	.word	0x080074d0

08007358 <__retarget_lock_acquire_recursive>:
 8007358:	4770      	bx	lr

0800735a <__retarget_lock_release_recursive>:
 800735a:	4770      	bx	lr

0800735c <_free_r>:
 800735c:	b538      	push	{r3, r4, r5, lr}
 800735e:	4605      	mov	r5, r0
 8007360:	2900      	cmp	r1, #0
 8007362:	d041      	beq.n	80073e8 <_free_r+0x8c>
 8007364:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007368:	1f0c      	subs	r4, r1, #4
 800736a:	2b00      	cmp	r3, #0
 800736c:	bfb8      	it	lt
 800736e:	18e4      	addlt	r4, r4, r3
 8007370:	f000 f83e 	bl	80073f0 <__malloc_lock>
 8007374:	4a1d      	ldr	r2, [pc, #116]	@ (80073ec <_free_r+0x90>)
 8007376:	6813      	ldr	r3, [r2, #0]
 8007378:	b933      	cbnz	r3, 8007388 <_free_r+0x2c>
 800737a:	6063      	str	r3, [r4, #4]
 800737c:	6014      	str	r4, [r2, #0]
 800737e:	4628      	mov	r0, r5
 8007380:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007384:	f000 b83a 	b.w	80073fc <__malloc_unlock>
 8007388:	42a3      	cmp	r3, r4
 800738a:	d908      	bls.n	800739e <_free_r+0x42>
 800738c:	6820      	ldr	r0, [r4, #0]
 800738e:	1821      	adds	r1, r4, r0
 8007390:	428b      	cmp	r3, r1
 8007392:	bf01      	itttt	eq
 8007394:	6819      	ldreq	r1, [r3, #0]
 8007396:	685b      	ldreq	r3, [r3, #4]
 8007398:	1809      	addeq	r1, r1, r0
 800739a:	6021      	streq	r1, [r4, #0]
 800739c:	e7ed      	b.n	800737a <_free_r+0x1e>
 800739e:	461a      	mov	r2, r3
 80073a0:	685b      	ldr	r3, [r3, #4]
 80073a2:	b10b      	cbz	r3, 80073a8 <_free_r+0x4c>
 80073a4:	42a3      	cmp	r3, r4
 80073a6:	d9fa      	bls.n	800739e <_free_r+0x42>
 80073a8:	6811      	ldr	r1, [r2, #0]
 80073aa:	1850      	adds	r0, r2, r1
 80073ac:	42a0      	cmp	r0, r4
 80073ae:	d10b      	bne.n	80073c8 <_free_r+0x6c>
 80073b0:	6820      	ldr	r0, [r4, #0]
 80073b2:	4401      	add	r1, r0
 80073b4:	1850      	adds	r0, r2, r1
 80073b6:	4283      	cmp	r3, r0
 80073b8:	6011      	str	r1, [r2, #0]
 80073ba:	d1e0      	bne.n	800737e <_free_r+0x22>
 80073bc:	6818      	ldr	r0, [r3, #0]
 80073be:	685b      	ldr	r3, [r3, #4]
 80073c0:	6053      	str	r3, [r2, #4]
 80073c2:	4408      	add	r0, r1
 80073c4:	6010      	str	r0, [r2, #0]
 80073c6:	e7da      	b.n	800737e <_free_r+0x22>
 80073c8:	d902      	bls.n	80073d0 <_free_r+0x74>
 80073ca:	230c      	movs	r3, #12
 80073cc:	602b      	str	r3, [r5, #0]
 80073ce:	e7d6      	b.n	800737e <_free_r+0x22>
 80073d0:	6820      	ldr	r0, [r4, #0]
 80073d2:	1821      	adds	r1, r4, r0
 80073d4:	428b      	cmp	r3, r1
 80073d6:	bf04      	itt	eq
 80073d8:	6819      	ldreq	r1, [r3, #0]
 80073da:	685b      	ldreq	r3, [r3, #4]
 80073dc:	6063      	str	r3, [r4, #4]
 80073de:	bf04      	itt	eq
 80073e0:	1809      	addeq	r1, r1, r0
 80073e2:	6021      	streq	r1, [r4, #0]
 80073e4:	6054      	str	r4, [r2, #4]
 80073e6:	e7ca      	b.n	800737e <_free_r+0x22>
 80073e8:	bd38      	pop	{r3, r4, r5, pc}
 80073ea:	bf00      	nop
 80073ec:	200044c8 	.word	0x200044c8

080073f0 <__malloc_lock>:
 80073f0:	4801      	ldr	r0, [pc, #4]	@ (80073f8 <__malloc_lock+0x8>)
 80073f2:	f7ff bfb1 	b.w	8007358 <__retarget_lock_acquire_recursive>
 80073f6:	bf00      	nop
 80073f8:	200044c4 	.word	0x200044c4

080073fc <__malloc_unlock>:
 80073fc:	4801      	ldr	r0, [pc, #4]	@ (8007404 <__malloc_unlock+0x8>)
 80073fe:	f7ff bfac 	b.w	800735a <__retarget_lock_release_recursive>
 8007402:	bf00      	nop
 8007404:	200044c4 	.word	0x200044c4

08007408 <_init>:
 8007408:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800740a:	bf00      	nop
 800740c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800740e:	bc08      	pop	{r3}
 8007410:	469e      	mov	lr, r3
 8007412:	4770      	bx	lr

08007414 <_fini>:
 8007414:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007416:	bf00      	nop
 8007418:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800741a:	bc08      	pop	{r3}
 800741c:	469e      	mov	lr, r3
 800741e:	4770      	bx	lr
