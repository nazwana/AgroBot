
CONTROLLER.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000030c4  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000050  080031d0  080031d0  000041d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003220  08003220  00005014  2**0
                  CONTENTS
  4 .ARM          00000000  08003220  08003220  00005014  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003220  08003220  00005014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003220  08003220  00004220  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003224  08003224  00004224  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000014  20000000  08003228  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000e0  20000014  0800323c  00005014  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000f4  0800323c  000050f4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00005014  2**0
                  CONTENTS, READONLY
 12 .debug_info   00006c42  00000000  00000000  0000503d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000018b9  00000000  00000000  0000bc7f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000798  00000000  00000000  0000d538  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000005a6  00000000  00000000  0000dcd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000174ed  00000000  00000000  0000e276  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00008db3  00000000  00000000  00025763  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008656b  00000000  00000000  0002e516  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b4a81  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001d1c  00000000  00000000  000b4ac4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000064  00000000  00000000  000b67e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000014 	.word	0x20000014
 8000128:	00000000 	.word	0x00000000
 800012c:	080031b8 	.word	0x080031b8

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000018 	.word	0x20000018
 8000148:	080031b8 	.word	0x080031b8

0800014c <CS_Select>:
#define NRF24_CSN_PORT   GPIOA
#define NRF24_CSN_PIN    GPIO_PIN_8


void CS_Select (void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(NRF24_CSN_PORT, NRF24_CSN_PIN, GPIO_PIN_RESET);
 8000150:	2200      	movs	r2, #0
 8000152:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000156:	4802      	ldr	r0, [pc, #8]	@ (8000160 <CS_Select+0x14>)
 8000158:	f001 fcc9 	bl	8001aee <HAL_GPIO_WritePin>
}
 800015c:	bf00      	nop
 800015e:	bd80      	pop	{r7, pc}
 8000160:	40010800 	.word	0x40010800

08000164 <CS_UnSelect>:

void CS_UnSelect (void)
{
 8000164:	b580      	push	{r7, lr}
 8000166:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(NRF24_CSN_PORT, NRF24_CSN_PIN, GPIO_PIN_SET);
 8000168:	2201      	movs	r2, #1
 800016a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800016e:	4802      	ldr	r0, [pc, #8]	@ (8000178 <CS_UnSelect+0x14>)
 8000170:	f001 fcbd 	bl	8001aee <HAL_GPIO_WritePin>
}
 8000174:	bf00      	nop
 8000176:	bd80      	pop	{r7, pc}
 8000178:	40010800 	.word	0x40010800

0800017c <CE_Enable>:


void CE_Enable (void)
{
 800017c:	b580      	push	{r7, lr}
 800017e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(NRF24_CE_PORT, NRF24_CE_PIN, GPIO_PIN_SET);
 8000180:	2201      	movs	r2, #1
 8000182:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000186:	4802      	ldr	r0, [pc, #8]	@ (8000190 <CE_Enable+0x14>)
 8000188:	f001 fcb1 	bl	8001aee <HAL_GPIO_WritePin>
}
 800018c:	bf00      	nop
 800018e:	bd80      	pop	{r7, pc}
 8000190:	40010800 	.word	0x40010800

08000194 <CE_Disable>:

void CE_Disable (void)
{
 8000194:	b580      	push	{r7, lr}
 8000196:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(NRF24_CE_PORT, NRF24_CE_PIN, GPIO_PIN_RESET);
 8000198:	2200      	movs	r2, #0
 800019a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800019e:	4802      	ldr	r0, [pc, #8]	@ (80001a8 <CE_Disable+0x14>)
 80001a0:	f001 fca5 	bl	8001aee <HAL_GPIO_WritePin>
}
 80001a4:	bf00      	nop
 80001a6:	bd80      	pop	{r7, pc}
 80001a8:	40010800 	.word	0x40010800

080001ac <nrf24_WriteReg>:



// write a single byte to the particular register
void nrf24_WriteReg (uint8_t Reg, uint8_t Data)
{
 80001ac:	b580      	push	{r7, lr}
 80001ae:	b084      	sub	sp, #16
 80001b0:	af00      	add	r7, sp, #0
 80001b2:	4603      	mov	r3, r0
 80001b4:	460a      	mov	r2, r1
 80001b6:	71fb      	strb	r3, [r7, #7]
 80001b8:	4613      	mov	r3, r2
 80001ba:	71bb      	strb	r3, [r7, #6]
	uint8_t buf[2];
	buf[0] = Reg|1<<5;
 80001bc:	79fb      	ldrb	r3, [r7, #7]
 80001be:	f043 0320 	orr.w	r3, r3, #32
 80001c2:	b2db      	uxtb	r3, r3
 80001c4:	733b      	strb	r3, [r7, #12]
	buf[1] = Data;
 80001c6:	79bb      	ldrb	r3, [r7, #6]
 80001c8:	737b      	strb	r3, [r7, #13]

	// Pull the CS Pin LOW to select the device
	CS_Select();
 80001ca:	f7ff ffbf 	bl	800014c <CS_Select>

	HAL_SPI_Transmit(NRF24_SPI, buf, 2, 1000);
 80001ce:	f107 010c 	add.w	r1, r7, #12
 80001d2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80001d6:	2202      	movs	r2, #2
 80001d8:	4804      	ldr	r0, [pc, #16]	@ (80001ec <nrf24_WriteReg+0x40>)
 80001da:	f002 faaf 	bl	800273c <HAL_SPI_Transmit>

	// Pull the CS HIGH to release the device
	CS_UnSelect();
 80001de:	f7ff ffc1 	bl	8000164 <CS_UnSelect>
}
 80001e2:	bf00      	nop
 80001e4:	3710      	adds	r7, #16
 80001e6:	46bd      	mov	sp, r7
 80001e8:	bd80      	pop	{r7, pc}
 80001ea:	bf00      	nop
 80001ec:	20000060 	.word	0x20000060

080001f0 <nrf24_WriteRegMulti>:

//write multiple bytes starting from a particular register
void nrf24_WriteRegMulti (uint8_t Reg, uint8_t *data, int size)
{
 80001f0:	b580      	push	{r7, lr}
 80001f2:	b086      	sub	sp, #24
 80001f4:	af00      	add	r7, sp, #0
 80001f6:	4603      	mov	r3, r0
 80001f8:	60b9      	str	r1, [r7, #8]
 80001fa:	607a      	str	r2, [r7, #4]
 80001fc:	73fb      	strb	r3, [r7, #15]
	uint8_t buf[2];
	buf[0] = Reg|1<<5;
 80001fe:	7bfb      	ldrb	r3, [r7, #15]
 8000200:	f043 0320 	orr.w	r3, r3, #32
 8000204:	b2db      	uxtb	r3, r3
 8000206:	753b      	strb	r3, [r7, #20]
//	buf[1] = Data;

	// Pull the CS Pin LOW to select the device
	CS_Select();
 8000208:	f7ff ffa0 	bl	800014c <CS_Select>

	HAL_SPI_Transmit(NRF24_SPI, buf, 1, 100);
 800020c:	f107 0114 	add.w	r1, r7, #20
 8000210:	2364      	movs	r3, #100	@ 0x64
 8000212:	2201      	movs	r2, #1
 8000214:	4808      	ldr	r0, [pc, #32]	@ (8000238 <nrf24_WriteRegMulti+0x48>)
 8000216:	f002 fa91 	bl	800273c <HAL_SPI_Transmit>
	HAL_SPI_Transmit(NRF24_SPI, data, size, 1000);
 800021a:	687b      	ldr	r3, [r7, #4]
 800021c:	b29a      	uxth	r2, r3
 800021e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000222:	68b9      	ldr	r1, [r7, #8]
 8000224:	4804      	ldr	r0, [pc, #16]	@ (8000238 <nrf24_WriteRegMulti+0x48>)
 8000226:	f002 fa89 	bl	800273c <HAL_SPI_Transmit>

	// Pull the CS HIGH to release the device
	CS_UnSelect();
 800022a:	f7ff ff9b 	bl	8000164 <CS_UnSelect>
}
 800022e:	bf00      	nop
 8000230:	3718      	adds	r7, #24
 8000232:	46bd      	mov	sp, r7
 8000234:	bd80      	pop	{r7, pc}
 8000236:	bf00      	nop
 8000238:	20000060 	.word	0x20000060

0800023c <nrf24_ReadReg>:


uint8_t nrf24_ReadReg (uint8_t Reg)
{
 800023c:	b580      	push	{r7, lr}
 800023e:	b084      	sub	sp, #16
 8000240:	af00      	add	r7, sp, #0
 8000242:	4603      	mov	r3, r0
 8000244:	71fb      	strb	r3, [r7, #7]
	uint8_t data=0;
 8000246:	2300      	movs	r3, #0
 8000248:	73fb      	strb	r3, [r7, #15]

	// Pull the CS Pin LOW to select the device
	CS_Select();
 800024a:	f7ff ff7f 	bl	800014c <CS_Select>

	HAL_SPI_Transmit(NRF24_SPI, &Reg, 1, 100);
 800024e:	1df9      	adds	r1, r7, #7
 8000250:	2364      	movs	r3, #100	@ 0x64
 8000252:	2201      	movs	r2, #1
 8000254:	4808      	ldr	r0, [pc, #32]	@ (8000278 <nrf24_ReadReg+0x3c>)
 8000256:	f002 fa71 	bl	800273c <HAL_SPI_Transmit>
	HAL_SPI_Receive(NRF24_SPI, &data, 1, 100);
 800025a:	f107 010f 	add.w	r1, r7, #15
 800025e:	2364      	movs	r3, #100	@ 0x64
 8000260:	2201      	movs	r2, #1
 8000262:	4805      	ldr	r0, [pc, #20]	@ (8000278 <nrf24_ReadReg+0x3c>)
 8000264:	f002 fbae 	bl	80029c4 <HAL_SPI_Receive>

	// Pull the CS HIGH to release the device
	CS_UnSelect();
 8000268:	f7ff ff7c 	bl	8000164 <CS_UnSelect>

	return data;
 800026c:	7bfb      	ldrb	r3, [r7, #15]
}
 800026e:	4618      	mov	r0, r3
 8000270:	3710      	adds	r7, #16
 8000272:	46bd      	mov	sp, r7
 8000274:	bd80      	pop	{r7, pc}
 8000276:	bf00      	nop
 8000278:	20000060 	.word	0x20000060

0800027c <nrf24_reset>:
	// Pull the CS HIGH to release the device
	CS_UnSelect();
}

void nrf24_reset(uint8_t REG)
{
 800027c:	b580      	push	{r7, lr}
 800027e:	b088      	sub	sp, #32
 8000280:	af00      	add	r7, sp, #0
 8000282:	4603      	mov	r3, r0
 8000284:	71fb      	strb	r3, [r7, #7]
	if (REG == STATUS)
 8000286:	79fb      	ldrb	r3, [r7, #7]
 8000288:	2b07      	cmp	r3, #7
 800028a:	d104      	bne.n	8000296 <nrf24_reset+0x1a>
	{
		nrf24_WriteReg(STATUS, 0x00);
 800028c:	2100      	movs	r1, #0
 800028e:	2007      	movs	r0, #7
 8000290:	f7ff ff8c 	bl	80001ac <nrf24_WriteReg>
	nrf24_WriteReg(RX_PW_P5, 0);
	nrf24_WriteReg(FIFO_STATUS, 0x11);
	nrf24_WriteReg(DYNPD, 0);
	nrf24_WriteReg(FEATURE, 0);
	}
}
 8000294:	e090      	b.n	80003b8 <nrf24_reset+0x13c>
	else if (REG == FIFO_STATUS)
 8000296:	79fb      	ldrb	r3, [r7, #7]
 8000298:	2b17      	cmp	r3, #23
 800029a:	d104      	bne.n	80002a6 <nrf24_reset+0x2a>
		nrf24_WriteReg(FIFO_STATUS, 0x11);
 800029c:	2111      	movs	r1, #17
 800029e:	2017      	movs	r0, #23
 80002a0:	f7ff ff84 	bl	80001ac <nrf24_WriteReg>
}
 80002a4:	e088      	b.n	80003b8 <nrf24_reset+0x13c>
	nrf24_WriteReg(CONFIG, 0x08);
 80002a6:	2108      	movs	r1, #8
 80002a8:	2000      	movs	r0, #0
 80002aa:	f7ff ff7f 	bl	80001ac <nrf24_WriteReg>
	nrf24_WriteReg(EN_AA, 0x3F);
 80002ae:	213f      	movs	r1, #63	@ 0x3f
 80002b0:	2001      	movs	r0, #1
 80002b2:	f7ff ff7b 	bl	80001ac <nrf24_WriteReg>
	nrf24_WriteReg(EN_RXADDR, 0x03);
 80002b6:	2103      	movs	r1, #3
 80002b8:	2002      	movs	r0, #2
 80002ba:	f7ff ff77 	bl	80001ac <nrf24_WriteReg>
	nrf24_WriteReg(SETUP_AW, 0x03);
 80002be:	2103      	movs	r1, #3
 80002c0:	2003      	movs	r0, #3
 80002c2:	f7ff ff73 	bl	80001ac <nrf24_WriteReg>
	nrf24_WriteReg(SETUP_RETR, 0x03);
 80002c6:	2103      	movs	r1, #3
 80002c8:	2004      	movs	r0, #4
 80002ca:	f7ff ff6f 	bl	80001ac <nrf24_WriteReg>
	nrf24_WriteReg(RF_CH, 0x02);
 80002ce:	2102      	movs	r1, #2
 80002d0:	2005      	movs	r0, #5
 80002d2:	f7ff ff6b 	bl	80001ac <nrf24_WriteReg>
	nrf24_WriteReg(RF_SETUP, 0x0E);
 80002d6:	210e      	movs	r1, #14
 80002d8:	2006      	movs	r0, #6
 80002da:	f7ff ff67 	bl	80001ac <nrf24_WriteReg>
	nrf24_WriteReg(STATUS, 0x00);
 80002de:	2100      	movs	r1, #0
 80002e0:	2007      	movs	r0, #7
 80002e2:	f7ff ff63 	bl	80001ac <nrf24_WriteReg>
	nrf24_WriteReg(OBSERVE_TX, 0x00);
 80002e6:	2100      	movs	r1, #0
 80002e8:	2008      	movs	r0, #8
 80002ea:	f7ff ff5f 	bl	80001ac <nrf24_WriteReg>
	nrf24_WriteReg(CD, 0x00);
 80002ee:	2100      	movs	r1, #0
 80002f0:	2009      	movs	r0, #9
 80002f2:	f7ff ff5b 	bl	80001ac <nrf24_WriteReg>
	uint8_t rx_addr_p0_def[5] = {0xE7, 0xE7, 0xE7, 0xE7, 0xE7};
 80002f6:	4a32      	ldr	r2, [pc, #200]	@ (80003c0 <nrf24_reset+0x144>)
 80002f8:	f107 0318 	add.w	r3, r7, #24
 80002fc:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000300:	6018      	str	r0, [r3, #0]
 8000302:	3304      	adds	r3, #4
 8000304:	7019      	strb	r1, [r3, #0]
	nrf24_WriteRegMulti(RX_ADDR_P0, rx_addr_p0_def, 5);
 8000306:	f107 0318 	add.w	r3, r7, #24
 800030a:	2205      	movs	r2, #5
 800030c:	4619      	mov	r1, r3
 800030e:	200a      	movs	r0, #10
 8000310:	f7ff ff6e 	bl	80001f0 <nrf24_WriteRegMulti>
	uint8_t rx_addr_p1_def[5] = {0xC2, 0xC2, 0xC2, 0xC2, 0xC2};
 8000314:	4a2b      	ldr	r2, [pc, #172]	@ (80003c4 <nrf24_reset+0x148>)
 8000316:	f107 0310 	add.w	r3, r7, #16
 800031a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800031e:	6018      	str	r0, [r3, #0]
 8000320:	3304      	adds	r3, #4
 8000322:	7019      	strb	r1, [r3, #0]
	nrf24_WriteRegMulti(RX_ADDR_P1, rx_addr_p1_def, 5);
 8000324:	f107 0310 	add.w	r3, r7, #16
 8000328:	2205      	movs	r2, #5
 800032a:	4619      	mov	r1, r3
 800032c:	200b      	movs	r0, #11
 800032e:	f7ff ff5f 	bl	80001f0 <nrf24_WriteRegMulti>
	nrf24_WriteReg(RX_ADDR_P2, 0xC3);
 8000332:	21c3      	movs	r1, #195	@ 0xc3
 8000334:	200c      	movs	r0, #12
 8000336:	f7ff ff39 	bl	80001ac <nrf24_WriteReg>
	nrf24_WriteReg(RX_ADDR_P3, 0xC4);
 800033a:	21c4      	movs	r1, #196	@ 0xc4
 800033c:	200d      	movs	r0, #13
 800033e:	f7ff ff35 	bl	80001ac <nrf24_WriteReg>
	nrf24_WriteReg(RX_ADDR_P4, 0xC5);
 8000342:	21c5      	movs	r1, #197	@ 0xc5
 8000344:	200e      	movs	r0, #14
 8000346:	f7ff ff31 	bl	80001ac <nrf24_WriteReg>
	nrf24_WriteReg(RX_ADDR_P5, 0xC6);
 800034a:	21c6      	movs	r1, #198	@ 0xc6
 800034c:	200f      	movs	r0, #15
 800034e:	f7ff ff2d 	bl	80001ac <nrf24_WriteReg>
	uint8_t tx_addr_def[5] = {0xE7, 0xE7, 0xE7, 0xE7, 0xE7};
 8000352:	4a1b      	ldr	r2, [pc, #108]	@ (80003c0 <nrf24_reset+0x144>)
 8000354:	f107 0308 	add.w	r3, r7, #8
 8000358:	e892 0003 	ldmia.w	r2, {r0, r1}
 800035c:	6018      	str	r0, [r3, #0]
 800035e:	3304      	adds	r3, #4
 8000360:	7019      	strb	r1, [r3, #0]
	nrf24_WriteRegMulti(TX_ADDR, tx_addr_def, 5);
 8000362:	f107 0308 	add.w	r3, r7, #8
 8000366:	2205      	movs	r2, #5
 8000368:	4619      	mov	r1, r3
 800036a:	2010      	movs	r0, #16
 800036c:	f7ff ff40 	bl	80001f0 <nrf24_WriteRegMulti>
	nrf24_WriteReg(RX_PW_P0, 0);
 8000370:	2100      	movs	r1, #0
 8000372:	2011      	movs	r0, #17
 8000374:	f7ff ff1a 	bl	80001ac <nrf24_WriteReg>
	nrf24_WriteReg(RX_PW_P1, 0);
 8000378:	2100      	movs	r1, #0
 800037a:	2012      	movs	r0, #18
 800037c:	f7ff ff16 	bl	80001ac <nrf24_WriteReg>
	nrf24_WriteReg(RX_PW_P2, 0);
 8000380:	2100      	movs	r1, #0
 8000382:	2013      	movs	r0, #19
 8000384:	f7ff ff12 	bl	80001ac <nrf24_WriteReg>
	nrf24_WriteReg(RX_PW_P3, 0);
 8000388:	2100      	movs	r1, #0
 800038a:	2014      	movs	r0, #20
 800038c:	f7ff ff0e 	bl	80001ac <nrf24_WriteReg>
	nrf24_WriteReg(RX_PW_P4, 0);
 8000390:	2100      	movs	r1, #0
 8000392:	2015      	movs	r0, #21
 8000394:	f7ff ff0a 	bl	80001ac <nrf24_WriteReg>
	nrf24_WriteReg(RX_PW_P5, 0);
 8000398:	2100      	movs	r1, #0
 800039a:	2016      	movs	r0, #22
 800039c:	f7ff ff06 	bl	80001ac <nrf24_WriteReg>
	nrf24_WriteReg(FIFO_STATUS, 0x11);
 80003a0:	2111      	movs	r1, #17
 80003a2:	2017      	movs	r0, #23
 80003a4:	f7ff ff02 	bl	80001ac <nrf24_WriteReg>
	nrf24_WriteReg(DYNPD, 0);
 80003a8:	2100      	movs	r1, #0
 80003aa:	201c      	movs	r0, #28
 80003ac:	f7ff fefe 	bl	80001ac <nrf24_WriteReg>
	nrf24_WriteReg(FEATURE, 0);
 80003b0:	2100      	movs	r1, #0
 80003b2:	201d      	movs	r0, #29
 80003b4:	f7ff fefa 	bl	80001ac <nrf24_WriteReg>
}
 80003b8:	bf00      	nop
 80003ba:	3720      	adds	r7, #32
 80003bc:	46bd      	mov	sp, r7
 80003be:	bd80      	pop	{r7, pc}
 80003c0:	080031d0 	.word	0x080031d0
 80003c4:	080031d8 	.word	0x080031d8

080003c8 <NRF24_Init>:




void NRF24_Init (void)
{
 80003c8:	b580      	push	{r7, lr}
 80003ca:	af00      	add	r7, sp, #0
	// disable the chip before configuring the device
	CE_Disable();
 80003cc:	f7ff fee2 	bl	8000194 <CE_Disable>


	// reset everything
	nrf24_reset (0);
 80003d0:	2000      	movs	r0, #0
 80003d2:	f7ff ff53 	bl	800027c <nrf24_reset>

	nrf24_WriteReg(CONFIG, 0);  // will be configured later
 80003d6:	2100      	movs	r1, #0
 80003d8:	2000      	movs	r0, #0
 80003da:	f7ff fee7 	bl	80001ac <nrf24_WriteReg>

	nrf24_WriteReg(EN_AA, 0);  // No Auto ACK
 80003de:	2100      	movs	r1, #0
 80003e0:	2001      	movs	r0, #1
 80003e2:	f7ff fee3 	bl	80001ac <nrf24_WriteReg>

	nrf24_WriteReg (EN_RXADDR, 0);  // Not Enabling any data pipe right now
 80003e6:	2100      	movs	r1, #0
 80003e8:	2002      	movs	r0, #2
 80003ea:	f7ff fedf 	bl	80001ac <nrf24_WriteReg>

	nrf24_WriteReg (SETUP_AW, 0x03);  // 5 Bytes for the TX/RX address
 80003ee:	2103      	movs	r1, #3
 80003f0:	2003      	movs	r0, #3
 80003f2:	f7ff fedb 	bl	80001ac <nrf24_WriteReg>

	nrf24_WriteReg (SETUP_RETR, 0);   // No retransmission
 80003f6:	2100      	movs	r1, #0
 80003f8:	2004      	movs	r0, #4
 80003fa:	f7ff fed7 	bl	80001ac <nrf24_WriteReg>

	nrf24_WriteReg (RF_CH, 0);  // will be setup during Tx or RX
 80003fe:	2100      	movs	r1, #0
 8000400:	2005      	movs	r0, #5
 8000402:	f7ff fed3 	bl	80001ac <nrf24_WriteReg>

	nrf24_WriteReg (RF_SETUP, 0x0E);   // Power= 0db, data rate = 2Mbps
 8000406:	210e      	movs	r1, #14
 8000408:	2006      	movs	r0, #6
 800040a:	f7ff fecf 	bl	80001ac <nrf24_WriteReg>

	// Enable the chip after configuring the device
	CE_Enable();
 800040e:	f7ff feb5 	bl	800017c <CE_Enable>

}
 8000412:	bf00      	nop
 8000414:	bd80      	pop	{r7, pc}

08000416 <NRF24_TxMode>:


// set up the Tx mode

void NRF24_TxMode (uint8_t *Address, uint8_t channel)
{
 8000416:	b580      	push	{r7, lr}
 8000418:	b084      	sub	sp, #16
 800041a:	af00      	add	r7, sp, #0
 800041c:	6078      	str	r0, [r7, #4]
 800041e:	460b      	mov	r3, r1
 8000420:	70fb      	strb	r3, [r7, #3]
	// disable the chip before configuring the device
	CE_Disable();
 8000422:	f7ff feb7 	bl	8000194 <CE_Disable>

	nrf24_WriteReg (RF_CH, channel);  // select the channel
 8000426:	78fb      	ldrb	r3, [r7, #3]
 8000428:	4619      	mov	r1, r3
 800042a:	2005      	movs	r0, #5
 800042c:	f7ff febe 	bl	80001ac <nrf24_WriteReg>

	nrf24_WriteRegMulti(TX_ADDR, Address, 5);  // Write the TX address
 8000430:	2205      	movs	r2, #5
 8000432:	6879      	ldr	r1, [r7, #4]
 8000434:	2010      	movs	r0, #16
 8000436:	f7ff fedb 	bl	80001f0 <nrf24_WriteRegMulti>


	// power up the device
	uint8_t config = nrf24_ReadReg(CONFIG);
 800043a:	2000      	movs	r0, #0
 800043c:	f7ff fefe 	bl	800023c <nrf24_ReadReg>
 8000440:	4603      	mov	r3, r0
 8000442:	73fb      	strb	r3, [r7, #15]
//	config = config | (1<<1);   // write 1 in the PWR_UP bit
	config = config & (0xF2);    // write 0 in the PRIM_RX, and 1 in the PWR_UP, and all other bits are masked
 8000444:	7bfb      	ldrb	r3, [r7, #15]
 8000446:	f023 030d 	bic.w	r3, r3, #13
 800044a:	73fb      	strb	r3, [r7, #15]
	nrf24_WriteReg (CONFIG, config);
 800044c:	7bfb      	ldrb	r3, [r7, #15]
 800044e:	4619      	mov	r1, r3
 8000450:	2000      	movs	r0, #0
 8000452:	f7ff feab 	bl	80001ac <nrf24_WriteReg>

	// Enable the chip after configuring the device
	CE_Enable();
 8000456:	f7ff fe91 	bl	800017c <CE_Enable>
}
 800045a:	bf00      	nop
 800045c:	3710      	adds	r7, #16
 800045e:	46bd      	mov	sp, r7
 8000460:	bd80      	pop	{r7, pc}
	...

08000464 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000464:	b580      	push	{r7, lr}
 8000466:	b084      	sub	sp, #16
 8000468:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800046a:	f000 fbb9 	bl	8000be0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800046e:	f000 f921 	bl	80006b4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000472:	f000 f9ef 	bl	8000854 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000476:	f000 f979 	bl	800076c <MX_ADC1_Init>
  MX_SPI1_Init();
 800047a:	f000 f9b5 	bl	80007e8 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  NRF24_Init();
 800047e:	f7ff ffa3 	bl	80003c8 <NRF24_Init>
  NRF24_TxMode(TxAddress, 10);
 8000482:	210a      	movs	r1, #10
 8000484:	4880      	ldr	r0, [pc, #512]	@ (8000688 <main+0x224>)
 8000486:	f7ff ffc6 	bl	8000416 <NRF24_TxMode>

  // Persiapkan data awal untuk dikirim
  memset(TxData, 0, sizeof(TxData));
 800048a:	2220      	movs	r2, #32
 800048c:	2100      	movs	r1, #0
 800048e:	487f      	ldr	r0, [pc, #508]	@ (800068c <main+0x228>)
 8000490:	f002 fe65 	bl	800315e <memset>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	    sConfigPrivate.Rank = ADC_REGULAR_RANK_1;
 8000494:	4b7e      	ldr	r3, [pc, #504]	@ (8000690 <main+0x22c>)
 8000496:	2201      	movs	r2, #1
 8000498:	605a      	str	r2, [r3, #4]
	    sConfigPrivate.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800049a:	4b7d      	ldr	r3, [pc, #500]	@ (8000690 <main+0x22c>)
 800049c:	2200      	movs	r2, #0
 800049e:	609a      	str	r2, [r3, #8]

	    sConfigPrivate.Channel = ADC_CHANNEL_0;
 80004a0:	4b7b      	ldr	r3, [pc, #492]	@ (8000690 <main+0x22c>)
 80004a2:	2200      	movs	r2, #0
 80004a4:	601a      	str	r2, [r3, #0]
	    HAL_ADC_ConfigChannel(&hadc1, &sConfigPrivate);
 80004a6:	497a      	ldr	r1, [pc, #488]	@ (8000690 <main+0x22c>)
 80004a8:	487a      	ldr	r0, [pc, #488]	@ (8000694 <main+0x230>)
 80004aa:	f000 fee3 	bl	8001274 <HAL_ADC_ConfigChannel>
	    HAL_ADC_Start(&hadc1);
 80004ae:	4879      	ldr	r0, [pc, #484]	@ (8000694 <main+0x230>)
 80004b0:	f000 fcf4 	bl	8000e9c <HAL_ADC_Start>
	    HAL_ADC_PollForConversion(&hadc1,1000);
 80004b4:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80004b8:	4876      	ldr	r0, [pc, #472]	@ (8000694 <main+0x230>)
 80004ba:	f000 fdc9 	bl	8001050 <HAL_ADC_PollForConversion>
	    RBY = HAL_ADC_GetValue(&hadc1);
 80004be:	4875      	ldr	r0, [pc, #468]	@ (8000694 <main+0x230>)
 80004c0:	f000 fecc 	bl	800125c <HAL_ADC_GetValue>
 80004c4:	4603      	mov	r3, r0
 80004c6:	b29a      	uxth	r2, r3
 80004c8:	4b73      	ldr	r3, [pc, #460]	@ (8000698 <main+0x234>)
 80004ca:	801a      	strh	r2, [r3, #0]
	    HAL_ADC_Stop(&hadc1);
 80004cc:	4871      	ldr	r0, [pc, #452]	@ (8000694 <main+0x230>)
 80004ce:	f000 fd93 	bl	8000ff8 <HAL_ADC_Stop>

	    sConfigPrivate.Channel = ADC_CHANNEL_1;
 80004d2:	4b6f      	ldr	r3, [pc, #444]	@ (8000690 <main+0x22c>)
 80004d4:	2201      	movs	r2, #1
 80004d6:	601a      	str	r2, [r3, #0]
	    HAL_ADC_ConfigChannel(&hadc1, &sConfigPrivate);
 80004d8:	496d      	ldr	r1, [pc, #436]	@ (8000690 <main+0x22c>)
 80004da:	486e      	ldr	r0, [pc, #440]	@ (8000694 <main+0x230>)
 80004dc:	f000 feca 	bl	8001274 <HAL_ADC_ConfigChannel>
	    HAL_ADC_Start(&hadc1);
 80004e0:	486c      	ldr	r0, [pc, #432]	@ (8000694 <main+0x230>)
 80004e2:	f000 fcdb 	bl	8000e9c <HAL_ADC_Start>
	    HAL_ADC_PollForConversion(&hadc1,1000);
 80004e6:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80004ea:	486a      	ldr	r0, [pc, #424]	@ (8000694 <main+0x230>)
 80004ec:	f000 fdb0 	bl	8001050 <HAL_ADC_PollForConversion>
	    RBX = HAL_ADC_GetValue(&hadc1);
 80004f0:	4868      	ldr	r0, [pc, #416]	@ (8000694 <main+0x230>)
 80004f2:	f000 feb3 	bl	800125c <HAL_ADC_GetValue>
 80004f6:	4603      	mov	r3, r0
 80004f8:	b29a      	uxth	r2, r3
 80004fa:	4b68      	ldr	r3, [pc, #416]	@ (800069c <main+0x238>)
 80004fc:	801a      	strh	r2, [r3, #0]
	    HAL_ADC_Stop(&hadc1);
 80004fe:	4865      	ldr	r0, [pc, #404]	@ (8000694 <main+0x230>)
 8000500:	f000 fd7a 	bl	8000ff8 <HAL_ADC_Stop>

	    sConfigPrivate.Channel = ADC_CHANNEL_8;
 8000504:	4b62      	ldr	r3, [pc, #392]	@ (8000690 <main+0x22c>)
 8000506:	2208      	movs	r2, #8
 8000508:	601a      	str	r2, [r3, #0]
	    HAL_ADC_ConfigChannel(&hadc1, &sConfigPrivate);
 800050a:	4961      	ldr	r1, [pc, #388]	@ (8000690 <main+0x22c>)
 800050c:	4861      	ldr	r0, [pc, #388]	@ (8000694 <main+0x230>)
 800050e:	f000 feb1 	bl	8001274 <HAL_ADC_ConfigChannel>
	    HAL_ADC_Start(&hadc1);
 8000512:	4860      	ldr	r0, [pc, #384]	@ (8000694 <main+0x230>)
 8000514:	f000 fcc2 	bl	8000e9c <HAL_ADC_Start>
	    HAL_ADC_PollForConversion(&hadc1,1000);
 8000518:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800051c:	485d      	ldr	r0, [pc, #372]	@ (8000694 <main+0x230>)
 800051e:	f000 fd97 	bl	8001050 <HAL_ADC_PollForConversion>
	    LBY = HAL_ADC_GetValue(&hadc1);
 8000522:	485c      	ldr	r0, [pc, #368]	@ (8000694 <main+0x230>)
 8000524:	f000 fe9a 	bl	800125c <HAL_ADC_GetValue>
 8000528:	4603      	mov	r3, r0
 800052a:	b29a      	uxth	r2, r3
 800052c:	4b5c      	ldr	r3, [pc, #368]	@ (80006a0 <main+0x23c>)
 800052e:	801a      	strh	r2, [r3, #0]
	    HAL_ADC_Stop(&hadc1);
 8000530:	4858      	ldr	r0, [pc, #352]	@ (8000694 <main+0x230>)
 8000532:	f000 fd61 	bl	8000ff8 <HAL_ADC_Stop>

	    sConfigPrivate.Channel = ADC_CHANNEL_9;
 8000536:	4b56      	ldr	r3, [pc, #344]	@ (8000690 <main+0x22c>)
 8000538:	2209      	movs	r2, #9
 800053a:	601a      	str	r2, [r3, #0]
	    HAL_ADC_ConfigChannel(&hadc1, &sConfigPrivate);
 800053c:	4954      	ldr	r1, [pc, #336]	@ (8000690 <main+0x22c>)
 800053e:	4855      	ldr	r0, [pc, #340]	@ (8000694 <main+0x230>)
 8000540:	f000 fe98 	bl	8001274 <HAL_ADC_ConfigChannel>
	    HAL_ADC_Start(&hadc1);
 8000544:	4853      	ldr	r0, [pc, #332]	@ (8000694 <main+0x230>)
 8000546:	f000 fca9 	bl	8000e9c <HAL_ADC_Start>
	    HAL_ADC_PollForConversion(&hadc1,1000);
 800054a:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800054e:	4851      	ldr	r0, [pc, #324]	@ (8000694 <main+0x230>)
 8000550:	f000 fd7e 	bl	8001050 <HAL_ADC_PollForConversion>
	    LBX = HAL_ADC_GetValue(&hadc1);
 8000554:	484f      	ldr	r0, [pc, #316]	@ (8000694 <main+0x230>)
 8000556:	f000 fe81 	bl	800125c <HAL_ADC_GetValue>
 800055a:	4603      	mov	r3, r0
 800055c:	b29a      	uxth	r2, r3
 800055e:	4b51      	ldr	r3, [pc, #324]	@ (80006a4 <main+0x240>)
 8000560:	801a      	strh	r2, [r3, #0]
	    HAL_ADC_Stop(&hadc1);
 8000562:	484c      	ldr	r0, [pc, #304]	@ (8000694 <main+0x230>)
 8000564:	f000 fd48 	bl	8000ff8 <HAL_ADC_Stop>

	    RB = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_4);
 8000568:	2110      	movs	r1, #16
 800056a:	484f      	ldr	r0, [pc, #316]	@ (80006a8 <main+0x244>)
 800056c:	f001 faa8 	bl	8001ac0 <HAL_GPIO_ReadPin>
 8000570:	4603      	mov	r3, r0
 8000572:	461a      	mov	r2, r3
 8000574:	4b4d      	ldr	r3, [pc, #308]	@ (80006ac <main+0x248>)
 8000576:	701a      	strb	r2, [r3, #0]
	    LB = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_3);
 8000578:	2108      	movs	r1, #8
 800057a:	484b      	ldr	r0, [pc, #300]	@ (80006a8 <main+0x244>)
 800057c:	f001 faa0 	bl	8001ac0 <HAL_GPIO_ReadPin>
 8000580:	4603      	mov	r3, r0
 8000582:	461a      	mov	r2, r3
 8000584:	4b4a      	ldr	r3, [pc, #296]	@ (80006b0 <main+0x24c>)
 8000586:	701a      	strb	r2, [r3, #0]

	    uint8_t TxData[10];

	    // Konversi 4 nilai ADC (masing-masing 2 byte: MSB dan LSB)
	    TxData[0] = (uint8_t)(RBY >> 8);   // MSB
 8000588:	4b43      	ldr	r3, [pc, #268]	@ (8000698 <main+0x234>)
 800058a:	881b      	ldrh	r3, [r3, #0]
 800058c:	0a1b      	lsrs	r3, r3, #8
 800058e:	b29b      	uxth	r3, r3
 8000590:	b2db      	uxtb	r3, r3
 8000592:	713b      	strb	r3, [r7, #4]
	    TxData[1] = (uint8_t)(RBY & 0xFF); // LSB
 8000594:	4b40      	ldr	r3, [pc, #256]	@ (8000698 <main+0x234>)
 8000596:	881b      	ldrh	r3, [r3, #0]
 8000598:	b2db      	uxtb	r3, r3
 800059a:	717b      	strb	r3, [r7, #5]
	    TxData[2] = (uint8_t)(RBX >> 8);
 800059c:	4b3f      	ldr	r3, [pc, #252]	@ (800069c <main+0x238>)
 800059e:	881b      	ldrh	r3, [r3, #0]
 80005a0:	0a1b      	lsrs	r3, r3, #8
 80005a2:	b29b      	uxth	r3, r3
 80005a4:	b2db      	uxtb	r3, r3
 80005a6:	71bb      	strb	r3, [r7, #6]
	    TxData[3] = (uint8_t)(RBX & 0xFF);
 80005a8:	4b3c      	ldr	r3, [pc, #240]	@ (800069c <main+0x238>)
 80005aa:	881b      	ldrh	r3, [r3, #0]
 80005ac:	b2db      	uxtb	r3, r3
 80005ae:	71fb      	strb	r3, [r7, #7]
	    TxData[4] = (uint8_t)(LBY >> 8);
 80005b0:	4b3b      	ldr	r3, [pc, #236]	@ (80006a0 <main+0x23c>)
 80005b2:	881b      	ldrh	r3, [r3, #0]
 80005b4:	0a1b      	lsrs	r3, r3, #8
 80005b6:	b29b      	uxth	r3, r3
 80005b8:	b2db      	uxtb	r3, r3
 80005ba:	723b      	strb	r3, [r7, #8]
	    TxData[5] = (uint8_t)(LBY & 0xFF);
 80005bc:	4b38      	ldr	r3, [pc, #224]	@ (80006a0 <main+0x23c>)
 80005be:	881b      	ldrh	r3, [r3, #0]
 80005c0:	b2db      	uxtb	r3, r3
 80005c2:	727b      	strb	r3, [r7, #9]
	    TxData[6] = (uint8_t)(LBX >> 8);
 80005c4:	4b37      	ldr	r3, [pc, #220]	@ (80006a4 <main+0x240>)
 80005c6:	881b      	ldrh	r3, [r3, #0]
 80005c8:	0a1b      	lsrs	r3, r3, #8
 80005ca:	b29b      	uxth	r3, r3
 80005cc:	b2db      	uxtb	r3, r3
 80005ce:	72bb      	strb	r3, [r7, #10]
	    TxData[7] = (uint8_t)(LBX & 0xFF);
 80005d0:	4b34      	ldr	r3, [pc, #208]	@ (80006a4 <main+0x240>)
 80005d2:	881b      	ldrh	r3, [r3, #0]
 80005d4:	b2db      	uxtb	r3, r3
 80005d6:	72fb      	strb	r3, [r7, #11]

	    TxData[8] = RB;[[]]
 80005d8:	4b34      	ldr	r3, [pc, #208]	@ (80006ac <main+0x248>)
 80005da:	781b      	ldrb	r3, [r3, #0]
 80005dc:	733b      	strb	r3, [r7, #12]
	    TxData[9] = LB;
 80005de:	4b34      	ldr	r3, [pc, #208]	@ (80006b0 <main+0x24c>)
 80005e0:	781b      	ldrb	r3, [r3, #0]
 80005e2:	737b      	strb	r3, [r7, #13]

	    // Set NRF24 sebagai Transmitter
	    NRF24_TxMode(TxAddress, 10);
 80005e4:	210a      	movs	r1, #10
 80005e6:	4828      	ldr	r0, [pc, #160]	@ (8000688 <main+0x224>)
 80005e8:	f7ff ff15 	bl	8000416 <NRF24_TxMode>

	    if (RBY > 3000) {
 80005ec:	4b2a      	ldr	r3, [pc, #168]	@ (8000698 <main+0x234>)
 80005ee:	881b      	ldrh	r3, [r3, #0]
 80005f0:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 80005f4:	4293      	cmp	r3, r2
 80005f6:	d906      	bls.n	8000606 <main+0x1a2>
	        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
 80005f8:	2201      	movs	r2, #1
 80005fa:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80005fe:	482a      	ldr	r0, [pc, #168]	@ (80006a8 <main+0x244>)
 8000600:	f001 fa75 	bl	8001aee <HAL_GPIO_WritePin>
 8000604:	e005      	b.n	8000612 <main+0x1ae>
	    } else {
	        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 8000606:	2200      	movs	r2, #0
 8000608:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800060c:	4826      	ldr	r0, [pc, #152]	@ (80006a8 <main+0x244>)
 800060e:	f001 fa6e 	bl	8001aee <HAL_GPIO_WritePin>
	    }
	    if (LBY < 1000) {
 8000612:	4b23      	ldr	r3, [pc, #140]	@ (80006a0 <main+0x23c>)
 8000614:	881b      	ldrh	r3, [r3, #0]
 8000616:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800061a:	d206      	bcs.n	800062a <main+0x1c6>
	        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);
 800061c:	2201      	movs	r2, #1
 800061e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000622:	4821      	ldr	r0, [pc, #132]	@ (80006a8 <main+0x244>)
 8000624:	f001 fa63 	bl	8001aee <HAL_GPIO_WritePin>
 8000628:	e005      	b.n	8000636 <main+0x1d2>
	    } else {
	        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET);
 800062a:	2200      	movs	r2, #0
 800062c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000630:	481d      	ldr	r0, [pc, #116]	@ (80006a8 <main+0x244>)
 8000632:	f001 fa5c 	bl	8001aee <HAL_GPIO_WritePin>
	    }
	    if (LBX > 3000) {
 8000636:	4b1b      	ldr	r3, [pc, #108]	@ (80006a4 <main+0x240>)
 8000638:	881b      	ldrh	r3, [r3, #0]
 800063a:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 800063e:	4293      	cmp	r3, r2
 8000640:	d906      	bls.n	8000650 <main+0x1ec>
	        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
 8000642:	2201      	movs	r2, #1
 8000644:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000648:	4817      	ldr	r0, [pc, #92]	@ (80006a8 <main+0x244>)
 800064a:	f001 fa50 	bl	8001aee <HAL_GPIO_WritePin>
 800064e:	e005      	b.n	800065c <main+0x1f8>
	    } else {
	        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 8000650:	2200      	movs	r2, #0
 8000652:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000656:	4814      	ldr	r0, [pc, #80]	@ (80006a8 <main+0x244>)
 8000658:	f001 fa49 	bl	8001aee <HAL_GPIO_WritePin>
	    }
	    if (LBX < 1000) {
 800065c:	4b11      	ldr	r3, [pc, #68]	@ (80006a4 <main+0x240>)
 800065e:	881b      	ldrh	r3, [r3, #0]
 8000660:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8000664:	d206      	bcs.n	8000674 <main+0x210>
	        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_SET);
 8000666:	2201      	movs	r2, #1
 8000668:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800066c:	480e      	ldr	r0, [pc, #56]	@ (80006a8 <main+0x244>)
 800066e:	f001 fa3e 	bl	8001aee <HAL_GPIO_WritePin>
 8000672:	e005      	b.n	8000680 <main+0x21c>
	    } else {
	        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_RESET);
 8000674:	2200      	movs	r2, #0
 8000676:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800067a:	480b      	ldr	r0, [pc, #44]	@ (80006a8 <main+0x244>)
 800067c:	f001 fa37 	bl	8001aee <HAL_GPIO_WritePin>
	    }



	    HAL_Delay(100);
 8000680:	2064      	movs	r0, #100	@ 0x64
 8000682:	f000 fb0f 	bl	8000ca4 <HAL_Delay>
  {
 8000686:	e705      	b.n	8000494 <main+0x30>
 8000688:	20000000 	.word	0x20000000
 800068c:	200000d0 	.word	0x200000d0
 8000690:	200000c0 	.word	0x200000c0
 8000694:	20000030 	.word	0x20000030
 8000698:	200000b8 	.word	0x200000b8
 800069c:	200000ba 	.word	0x200000ba
 80006a0:	200000bc 	.word	0x200000bc
 80006a4:	200000be 	.word	0x200000be
 80006a8:	40010c00 	.word	0x40010c00
 80006ac:	200000cc 	.word	0x200000cc
 80006b0:	200000cd 	.word	0x200000cd

080006b4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	b094      	sub	sp, #80	@ 0x50
 80006b8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006ba:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80006be:	2228      	movs	r2, #40	@ 0x28
 80006c0:	2100      	movs	r1, #0
 80006c2:	4618      	mov	r0, r3
 80006c4:	f002 fd4b 	bl	800315e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006c8:	f107 0314 	add.w	r3, r7, #20
 80006cc:	2200      	movs	r2, #0
 80006ce:	601a      	str	r2, [r3, #0]
 80006d0:	605a      	str	r2, [r3, #4]
 80006d2:	609a      	str	r2, [r3, #8]
 80006d4:	60da      	str	r2, [r3, #12]
 80006d6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80006d8:	1d3b      	adds	r3, r7, #4
 80006da:	2200      	movs	r2, #0
 80006dc:	601a      	str	r2, [r3, #0]
 80006de:	605a      	str	r2, [r3, #4]
 80006e0:	609a      	str	r2, [r3, #8]
 80006e2:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80006e4:	2301      	movs	r3, #1
 80006e6:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80006e8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80006ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80006ee:	2300      	movs	r3, #0
 80006f0:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006f2:	2301      	movs	r3, #1
 80006f4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006f6:	2302      	movs	r3, #2
 80006f8:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006fa:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80006fe:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000700:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8000704:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000706:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800070a:	4618      	mov	r0, r3
 800070c:	f001 fa2a 	bl	8001b64 <HAL_RCC_OscConfig>
 8000710:	4603      	mov	r3, r0
 8000712:	2b00      	cmp	r3, #0
 8000714:	d001      	beq.n	800071a <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000716:	f000 f92d 	bl	8000974 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800071a:	230f      	movs	r3, #15
 800071c:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800071e:	2302      	movs	r3, #2
 8000720:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000722:	2300      	movs	r3, #0
 8000724:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000726:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800072a:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800072c:	2300      	movs	r3, #0
 800072e:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000730:	f107 0314 	add.w	r3, r7, #20
 8000734:	2102      	movs	r1, #2
 8000736:	4618      	mov	r0, r3
 8000738:	f001 fc96 	bl	8002068 <HAL_RCC_ClockConfig>
 800073c:	4603      	mov	r3, r0
 800073e:	2b00      	cmp	r3, #0
 8000740:	d001      	beq.n	8000746 <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000742:	f000 f917 	bl	8000974 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000746:	2302      	movs	r3, #2
 8000748:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 800074a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800074e:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000750:	1d3b      	adds	r3, r7, #4
 8000752:	4618      	mov	r0, r3
 8000754:	f001 fe02 	bl	800235c <HAL_RCCEx_PeriphCLKConfig>
 8000758:	4603      	mov	r3, r0
 800075a:	2b00      	cmp	r3, #0
 800075c:	d001      	beq.n	8000762 <SystemClock_Config+0xae>
  {
    Error_Handler();
 800075e:	f000 f909 	bl	8000974 <Error_Handler>
  }
}
 8000762:	bf00      	nop
 8000764:	3750      	adds	r7, #80	@ 0x50
 8000766:	46bd      	mov	sp, r7
 8000768:	bd80      	pop	{r7, pc}
	...

0800076c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	b084      	sub	sp, #16
 8000770:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000772:	1d3b      	adds	r3, r7, #4
 8000774:	2200      	movs	r2, #0
 8000776:	601a      	str	r2, [r3, #0]
 8000778:	605a      	str	r2, [r3, #4]
 800077a:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800077c:	4b18      	ldr	r3, [pc, #96]	@ (80007e0 <MX_ADC1_Init+0x74>)
 800077e:	4a19      	ldr	r2, [pc, #100]	@ (80007e4 <MX_ADC1_Init+0x78>)
 8000780:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000782:	4b17      	ldr	r3, [pc, #92]	@ (80007e0 <MX_ADC1_Init+0x74>)
 8000784:	2200      	movs	r2, #0
 8000786:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000788:	4b15      	ldr	r3, [pc, #84]	@ (80007e0 <MX_ADC1_Init+0x74>)
 800078a:	2201      	movs	r2, #1
 800078c:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800078e:	4b14      	ldr	r3, [pc, #80]	@ (80007e0 <MX_ADC1_Init+0x74>)
 8000790:	2200      	movs	r2, #0
 8000792:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000794:	4b12      	ldr	r3, [pc, #72]	@ (80007e0 <MX_ADC1_Init+0x74>)
 8000796:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 800079a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800079c:	4b10      	ldr	r3, [pc, #64]	@ (80007e0 <MX_ADC1_Init+0x74>)
 800079e:	2200      	movs	r2, #0
 80007a0:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 80007a2:	4b0f      	ldr	r3, [pc, #60]	@ (80007e0 <MX_ADC1_Init+0x74>)
 80007a4:	2201      	movs	r2, #1
 80007a6:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80007a8:	480d      	ldr	r0, [pc, #52]	@ (80007e0 <MX_ADC1_Init+0x74>)
 80007aa:	f000 fa9f 	bl	8000cec <HAL_ADC_Init>
 80007ae:	4603      	mov	r3, r0
 80007b0:	2b00      	cmp	r3, #0
 80007b2:	d001      	beq.n	80007b8 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 80007b4:	f000 f8de 	bl	8000974 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80007b8:	2300      	movs	r3, #0
 80007ba:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80007bc:	2301      	movs	r3, #1
 80007be:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80007c0:	2300      	movs	r3, #0
 80007c2:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007c4:	1d3b      	adds	r3, r7, #4
 80007c6:	4619      	mov	r1, r3
 80007c8:	4805      	ldr	r0, [pc, #20]	@ (80007e0 <MX_ADC1_Init+0x74>)
 80007ca:	f000 fd53 	bl	8001274 <HAL_ADC_ConfigChannel>
 80007ce:	4603      	mov	r3, r0
 80007d0:	2b00      	cmp	r3, #0
 80007d2:	d001      	beq.n	80007d8 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 80007d4:	f000 f8ce 	bl	8000974 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80007d8:	bf00      	nop
 80007da:	3710      	adds	r7, #16
 80007dc:	46bd      	mov	sp, r7
 80007de:	bd80      	pop	{r7, pc}
 80007e0:	20000030 	.word	0x20000030
 80007e4:	40012400 	.word	0x40012400

080007e8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80007ec:	4b17      	ldr	r3, [pc, #92]	@ (800084c <MX_SPI1_Init+0x64>)
 80007ee:	4a18      	ldr	r2, [pc, #96]	@ (8000850 <MX_SPI1_Init+0x68>)
 80007f0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80007f2:	4b16      	ldr	r3, [pc, #88]	@ (800084c <MX_SPI1_Init+0x64>)
 80007f4:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80007f8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80007fa:	4b14      	ldr	r3, [pc, #80]	@ (800084c <MX_SPI1_Init+0x64>)
 80007fc:	2200      	movs	r2, #0
 80007fe:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000800:	4b12      	ldr	r3, [pc, #72]	@ (800084c <MX_SPI1_Init+0x64>)
 8000802:	2200      	movs	r2, #0
 8000804:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000806:	4b11      	ldr	r3, [pc, #68]	@ (800084c <MX_SPI1_Init+0x64>)
 8000808:	2200      	movs	r2, #0
 800080a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800080c:	4b0f      	ldr	r3, [pc, #60]	@ (800084c <MX_SPI1_Init+0x64>)
 800080e:	2200      	movs	r2, #0
 8000810:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000812:	4b0e      	ldr	r3, [pc, #56]	@ (800084c <MX_SPI1_Init+0x64>)
 8000814:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000818:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800081a:	4b0c      	ldr	r3, [pc, #48]	@ (800084c <MX_SPI1_Init+0x64>)
 800081c:	2218      	movs	r2, #24
 800081e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000820:	4b0a      	ldr	r3, [pc, #40]	@ (800084c <MX_SPI1_Init+0x64>)
 8000822:	2200      	movs	r2, #0
 8000824:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000826:	4b09      	ldr	r3, [pc, #36]	@ (800084c <MX_SPI1_Init+0x64>)
 8000828:	2200      	movs	r2, #0
 800082a:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800082c:	4b07      	ldr	r3, [pc, #28]	@ (800084c <MX_SPI1_Init+0x64>)
 800082e:	2200      	movs	r2, #0
 8000830:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000832:	4b06      	ldr	r3, [pc, #24]	@ (800084c <MX_SPI1_Init+0x64>)
 8000834:	220a      	movs	r2, #10
 8000836:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000838:	4804      	ldr	r0, [pc, #16]	@ (800084c <MX_SPI1_Init+0x64>)
 800083a:	f001 fefb 	bl	8002634 <HAL_SPI_Init>
 800083e:	4603      	mov	r3, r0
 8000840:	2b00      	cmp	r3, #0
 8000842:	d001      	beq.n	8000848 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000844:	f000 f896 	bl	8000974 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000848:	bf00      	nop
 800084a:	bd80      	pop	{r7, pc}
 800084c:	20000060 	.word	0x20000060
 8000850:	40013000 	.word	0x40013000

08000854 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	b088      	sub	sp, #32
 8000858:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800085a:	f107 0310 	add.w	r3, r7, #16
 800085e:	2200      	movs	r2, #0
 8000860:	601a      	str	r2, [r3, #0]
 8000862:	605a      	str	r2, [r3, #4]
 8000864:	609a      	str	r2, [r3, #8]
 8000866:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000868:	4b3e      	ldr	r3, [pc, #248]	@ (8000964 <MX_GPIO_Init+0x110>)
 800086a:	699b      	ldr	r3, [r3, #24]
 800086c:	4a3d      	ldr	r2, [pc, #244]	@ (8000964 <MX_GPIO_Init+0x110>)
 800086e:	f043 0320 	orr.w	r3, r3, #32
 8000872:	6193      	str	r3, [r2, #24]
 8000874:	4b3b      	ldr	r3, [pc, #236]	@ (8000964 <MX_GPIO_Init+0x110>)
 8000876:	699b      	ldr	r3, [r3, #24]
 8000878:	f003 0320 	and.w	r3, r3, #32
 800087c:	60fb      	str	r3, [r7, #12]
 800087e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000880:	4b38      	ldr	r3, [pc, #224]	@ (8000964 <MX_GPIO_Init+0x110>)
 8000882:	699b      	ldr	r3, [r3, #24]
 8000884:	4a37      	ldr	r2, [pc, #220]	@ (8000964 <MX_GPIO_Init+0x110>)
 8000886:	f043 0304 	orr.w	r3, r3, #4
 800088a:	6193      	str	r3, [r2, #24]
 800088c:	4b35      	ldr	r3, [pc, #212]	@ (8000964 <MX_GPIO_Init+0x110>)
 800088e:	699b      	ldr	r3, [r3, #24]
 8000890:	f003 0304 	and.w	r3, r3, #4
 8000894:	60bb      	str	r3, [r7, #8]
 8000896:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000898:	4b32      	ldr	r3, [pc, #200]	@ (8000964 <MX_GPIO_Init+0x110>)
 800089a:	699b      	ldr	r3, [r3, #24]
 800089c:	4a31      	ldr	r2, [pc, #196]	@ (8000964 <MX_GPIO_Init+0x110>)
 800089e:	f043 0308 	orr.w	r3, r3, #8
 80008a2:	6193      	str	r3, [r2, #24]
 80008a4:	4b2f      	ldr	r3, [pc, #188]	@ (8000964 <MX_GPIO_Init+0x110>)
 80008a6:	699b      	ldr	r3, [r3, #24]
 80008a8:	f003 0308 	and.w	r3, r3, #8
 80008ac:	607b      	str	r3, [r7, #4]
 80008ae:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3|GPIO_PIN_4, GPIO_PIN_RESET);
 80008b0:	2200      	movs	r2, #0
 80008b2:	2118      	movs	r1, #24
 80008b4:	482c      	ldr	r0, [pc, #176]	@ (8000968 <MX_GPIO_Init+0x114>)
 80008b6:	f001 f91a 	bl	8001aee <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 80008ba:	2200      	movs	r2, #0
 80008bc:	f44f 4170 	mov.w	r1, #61440	@ 0xf000
 80008c0:	482a      	ldr	r0, [pc, #168]	@ (800096c <MX_GPIO_Init+0x118>)
 80008c2:	f001 f914 	bl	8001aee <HAL_GPIO_WritePin>

  /*Configure GPIO pin : IRQ_Pin */
  GPIO_InitStruct.Pin = IRQ_Pin;
 80008c6:	2304      	movs	r3, #4
 80008c8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80008ca:	4b29      	ldr	r3, [pc, #164]	@ (8000970 <MX_GPIO_Init+0x11c>)
 80008cc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ce:	2300      	movs	r3, #0
 80008d0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(IRQ_GPIO_Port, &GPIO_InitStruct);
 80008d2:	f107 0310 	add.w	r3, r7, #16
 80008d6:	4619      	mov	r1, r3
 80008d8:	4823      	ldr	r0, [pc, #140]	@ (8000968 <MX_GPIO_Init+0x114>)
 80008da:	f000 ff6d 	bl	80017b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA3 PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 80008de:	2318      	movs	r3, #24
 80008e0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008e2:	2301      	movs	r3, #1
 80008e4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e6:	2300      	movs	r3, #0
 80008e8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008ea:	2302      	movs	r3, #2
 80008ec:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008ee:	f107 0310 	add.w	r3, r7, #16
 80008f2:	4619      	mov	r1, r3
 80008f4:	481c      	ldr	r0, [pc, #112]	@ (8000968 <MX_GPIO_Init+0x114>)
 80008f6:	f000 ff5f 	bl	80017b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB13 PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80008fa:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 80008fe:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000900:	2301      	movs	r3, #1
 8000902:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000904:	2300      	movs	r3, #0
 8000906:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000908:	2302      	movs	r3, #2
 800090a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800090c:	f107 0310 	add.w	r3, r7, #16
 8000910:	4619      	mov	r1, r3
 8000912:	4816      	ldr	r0, [pc, #88]	@ (800096c <MX_GPIO_Init+0x118>)
 8000914:	f000 ff50 	bl	80017b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : CSN_Pin CE_Pin */
  GPIO_InitStruct.Pin = CSN_Pin|CE_Pin;
 8000918:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800091c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800091e:	2300      	movs	r3, #0
 8000920:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000922:	2300      	movs	r3, #0
 8000924:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000926:	f107 0310 	add.w	r3, r7, #16
 800092a:	4619      	mov	r1, r3
 800092c:	480e      	ldr	r0, [pc, #56]	@ (8000968 <MX_GPIO_Init+0x114>)
 800092e:	f000 ff43 	bl	80017b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB3 PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 8000932:	2318      	movs	r3, #24
 8000934:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000936:	2300      	movs	r3, #0
 8000938:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800093a:	2300      	movs	r3, #0
 800093c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800093e:	f107 0310 	add.w	r3, r7, #16
 8000942:	4619      	mov	r1, r3
 8000944:	4809      	ldr	r0, [pc, #36]	@ (800096c <MX_GPIO_Init+0x118>)
 8000946:	f000 ff37 	bl	80017b8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 800094a:	2200      	movs	r2, #0
 800094c:	2100      	movs	r1, #0
 800094e:	2008      	movs	r0, #8
 8000950:	f000 fefb 	bl	800174a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8000954:	2008      	movs	r0, #8
 8000956:	f000 ff14 	bl	8001782 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800095a:	bf00      	nop
 800095c:	3720      	adds	r7, #32
 800095e:	46bd      	mov	sp, r7
 8000960:	bd80      	pop	{r7, pc}
 8000962:	bf00      	nop
 8000964:	40021000 	.word	0x40021000
 8000968:	40010800 	.word	0x40010800
 800096c:	40010c00 	.word	0x40010c00
 8000970:	10110000 	.word	0x10110000

08000974 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000974:	b480      	push	{r7}
 8000976:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000978:	b672      	cpsid	i
}
 800097a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800097c:	bf00      	nop
 800097e:	e7fd      	b.n	800097c <Error_Handler+0x8>

08000980 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000980:	b480      	push	{r7}
 8000982:	b085      	sub	sp, #20
 8000984:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000986:	4b15      	ldr	r3, [pc, #84]	@ (80009dc <HAL_MspInit+0x5c>)
 8000988:	699b      	ldr	r3, [r3, #24]
 800098a:	4a14      	ldr	r2, [pc, #80]	@ (80009dc <HAL_MspInit+0x5c>)
 800098c:	f043 0301 	orr.w	r3, r3, #1
 8000990:	6193      	str	r3, [r2, #24]
 8000992:	4b12      	ldr	r3, [pc, #72]	@ (80009dc <HAL_MspInit+0x5c>)
 8000994:	699b      	ldr	r3, [r3, #24]
 8000996:	f003 0301 	and.w	r3, r3, #1
 800099a:	60bb      	str	r3, [r7, #8]
 800099c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800099e:	4b0f      	ldr	r3, [pc, #60]	@ (80009dc <HAL_MspInit+0x5c>)
 80009a0:	69db      	ldr	r3, [r3, #28]
 80009a2:	4a0e      	ldr	r2, [pc, #56]	@ (80009dc <HAL_MspInit+0x5c>)
 80009a4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80009a8:	61d3      	str	r3, [r2, #28]
 80009aa:	4b0c      	ldr	r3, [pc, #48]	@ (80009dc <HAL_MspInit+0x5c>)
 80009ac:	69db      	ldr	r3, [r3, #28]
 80009ae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80009b2:	607b      	str	r3, [r7, #4]
 80009b4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80009b6:	4b0a      	ldr	r3, [pc, #40]	@ (80009e0 <HAL_MspInit+0x60>)
 80009b8:	685b      	ldr	r3, [r3, #4]
 80009ba:	60fb      	str	r3, [r7, #12]
 80009bc:	68fb      	ldr	r3, [r7, #12]
 80009be:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80009c2:	60fb      	str	r3, [r7, #12]
 80009c4:	68fb      	ldr	r3, [r7, #12]
 80009c6:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80009ca:	60fb      	str	r3, [r7, #12]
 80009cc:	4a04      	ldr	r2, [pc, #16]	@ (80009e0 <HAL_MspInit+0x60>)
 80009ce:	68fb      	ldr	r3, [r7, #12]
 80009d0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009d2:	bf00      	nop
 80009d4:	3714      	adds	r7, #20
 80009d6:	46bd      	mov	sp, r7
 80009d8:	bc80      	pop	{r7}
 80009da:	4770      	bx	lr
 80009dc:	40021000 	.word	0x40021000
 80009e0:	40010000 	.word	0x40010000

080009e4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	b08a      	sub	sp, #40	@ 0x28
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009ec:	f107 0318 	add.w	r3, r7, #24
 80009f0:	2200      	movs	r2, #0
 80009f2:	601a      	str	r2, [r3, #0]
 80009f4:	605a      	str	r2, [r3, #4]
 80009f6:	609a      	str	r2, [r3, #8]
 80009f8:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	681b      	ldr	r3, [r3, #0]
 80009fe:	4a1f      	ldr	r2, [pc, #124]	@ (8000a7c <HAL_ADC_MspInit+0x98>)
 8000a00:	4293      	cmp	r3, r2
 8000a02:	d137      	bne.n	8000a74 <HAL_ADC_MspInit+0x90>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000a04:	4b1e      	ldr	r3, [pc, #120]	@ (8000a80 <HAL_ADC_MspInit+0x9c>)
 8000a06:	699b      	ldr	r3, [r3, #24]
 8000a08:	4a1d      	ldr	r2, [pc, #116]	@ (8000a80 <HAL_ADC_MspInit+0x9c>)
 8000a0a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000a0e:	6193      	str	r3, [r2, #24]
 8000a10:	4b1b      	ldr	r3, [pc, #108]	@ (8000a80 <HAL_ADC_MspInit+0x9c>)
 8000a12:	699b      	ldr	r3, [r3, #24]
 8000a14:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000a18:	617b      	str	r3, [r7, #20]
 8000a1a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a1c:	4b18      	ldr	r3, [pc, #96]	@ (8000a80 <HAL_ADC_MspInit+0x9c>)
 8000a1e:	699b      	ldr	r3, [r3, #24]
 8000a20:	4a17      	ldr	r2, [pc, #92]	@ (8000a80 <HAL_ADC_MspInit+0x9c>)
 8000a22:	f043 0304 	orr.w	r3, r3, #4
 8000a26:	6193      	str	r3, [r2, #24]
 8000a28:	4b15      	ldr	r3, [pc, #84]	@ (8000a80 <HAL_ADC_MspInit+0x9c>)
 8000a2a:	699b      	ldr	r3, [r3, #24]
 8000a2c:	f003 0304 	and.w	r3, r3, #4
 8000a30:	613b      	str	r3, [r7, #16]
 8000a32:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a34:	4b12      	ldr	r3, [pc, #72]	@ (8000a80 <HAL_ADC_MspInit+0x9c>)
 8000a36:	699b      	ldr	r3, [r3, #24]
 8000a38:	4a11      	ldr	r2, [pc, #68]	@ (8000a80 <HAL_ADC_MspInit+0x9c>)
 8000a3a:	f043 0308 	orr.w	r3, r3, #8
 8000a3e:	6193      	str	r3, [r2, #24]
 8000a40:	4b0f      	ldr	r3, [pc, #60]	@ (8000a80 <HAL_ADC_MspInit+0x9c>)
 8000a42:	699b      	ldr	r3, [r3, #24]
 8000a44:	f003 0308 	and.w	r3, r3, #8
 8000a48:	60fb      	str	r3, [r7, #12]
 8000a4a:	68fb      	ldr	r3, [r7, #12]
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000a4c:	2303      	movs	r3, #3
 8000a4e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a50:	2303      	movs	r3, #3
 8000a52:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a54:	f107 0318 	add.w	r3, r7, #24
 8000a58:	4619      	mov	r1, r3
 8000a5a:	480a      	ldr	r0, [pc, #40]	@ (8000a84 <HAL_ADC_MspInit+0xa0>)
 8000a5c:	f000 feac 	bl	80017b8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000a60:	2303      	movs	r3, #3
 8000a62:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a64:	2303      	movs	r3, #3
 8000a66:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a68:	f107 0318 	add.w	r3, r7, #24
 8000a6c:	4619      	mov	r1, r3
 8000a6e:	4806      	ldr	r0, [pc, #24]	@ (8000a88 <HAL_ADC_MspInit+0xa4>)
 8000a70:	f000 fea2 	bl	80017b8 <HAL_GPIO_Init>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8000a74:	bf00      	nop
 8000a76:	3728      	adds	r7, #40	@ 0x28
 8000a78:	46bd      	mov	sp, r7
 8000a7a:	bd80      	pop	{r7, pc}
 8000a7c:	40012400 	.word	0x40012400
 8000a80:	40021000 	.word	0x40021000
 8000a84:	40010800 	.word	0x40010800
 8000a88:	40010c00 	.word	0x40010c00

08000a8c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	b088      	sub	sp, #32
 8000a90:	af00      	add	r7, sp, #0
 8000a92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a94:	f107 0310 	add.w	r3, r7, #16
 8000a98:	2200      	movs	r2, #0
 8000a9a:	601a      	str	r2, [r3, #0]
 8000a9c:	605a      	str	r2, [r3, #4]
 8000a9e:	609a      	str	r2, [r3, #8]
 8000aa0:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	681b      	ldr	r3, [r3, #0]
 8000aa6:	4a1b      	ldr	r2, [pc, #108]	@ (8000b14 <HAL_SPI_MspInit+0x88>)
 8000aa8:	4293      	cmp	r3, r2
 8000aaa:	d12f      	bne.n	8000b0c <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000aac:	4b1a      	ldr	r3, [pc, #104]	@ (8000b18 <HAL_SPI_MspInit+0x8c>)
 8000aae:	699b      	ldr	r3, [r3, #24]
 8000ab0:	4a19      	ldr	r2, [pc, #100]	@ (8000b18 <HAL_SPI_MspInit+0x8c>)
 8000ab2:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000ab6:	6193      	str	r3, [r2, #24]
 8000ab8:	4b17      	ldr	r3, [pc, #92]	@ (8000b18 <HAL_SPI_MspInit+0x8c>)
 8000aba:	699b      	ldr	r3, [r3, #24]
 8000abc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000ac0:	60fb      	str	r3, [r7, #12]
 8000ac2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ac4:	4b14      	ldr	r3, [pc, #80]	@ (8000b18 <HAL_SPI_MspInit+0x8c>)
 8000ac6:	699b      	ldr	r3, [r3, #24]
 8000ac8:	4a13      	ldr	r2, [pc, #76]	@ (8000b18 <HAL_SPI_MspInit+0x8c>)
 8000aca:	f043 0304 	orr.w	r3, r3, #4
 8000ace:	6193      	str	r3, [r2, #24]
 8000ad0:	4b11      	ldr	r3, [pc, #68]	@ (8000b18 <HAL_SPI_MspInit+0x8c>)
 8000ad2:	699b      	ldr	r3, [r3, #24]
 8000ad4:	f003 0304 	and.w	r3, r3, #4
 8000ad8:	60bb      	str	r3, [r7, #8]
 8000ada:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8000adc:	23a0      	movs	r3, #160	@ 0xa0
 8000ade:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ae0:	2302      	movs	r3, #2
 8000ae2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000ae4:	2303      	movs	r3, #3
 8000ae6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ae8:	f107 0310 	add.w	r3, r7, #16
 8000aec:	4619      	mov	r1, r3
 8000aee:	480b      	ldr	r0, [pc, #44]	@ (8000b1c <HAL_SPI_MspInit+0x90>)
 8000af0:	f000 fe62 	bl	80017b8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000af4:	2340      	movs	r3, #64	@ 0x40
 8000af6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000af8:	2300      	movs	r3, #0
 8000afa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000afc:	2300      	movs	r3, #0
 8000afe:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b00:	f107 0310 	add.w	r3, r7, #16
 8000b04:	4619      	mov	r1, r3
 8000b06:	4805      	ldr	r0, [pc, #20]	@ (8000b1c <HAL_SPI_MspInit+0x90>)
 8000b08:	f000 fe56 	bl	80017b8 <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 8000b0c:	bf00      	nop
 8000b0e:	3720      	adds	r7, #32
 8000b10:	46bd      	mov	sp, r7
 8000b12:	bd80      	pop	{r7, pc}
 8000b14:	40013000 	.word	0x40013000
 8000b18:	40021000 	.word	0x40021000
 8000b1c:	40010800 	.word	0x40010800

08000b20 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b20:	b480      	push	{r7}
 8000b22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000b24:	bf00      	nop
 8000b26:	e7fd      	b.n	8000b24 <NMI_Handler+0x4>

08000b28 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b28:	b480      	push	{r7}
 8000b2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b2c:	bf00      	nop
 8000b2e:	e7fd      	b.n	8000b2c <HardFault_Handler+0x4>

08000b30 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b30:	b480      	push	{r7}
 8000b32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b34:	bf00      	nop
 8000b36:	e7fd      	b.n	8000b34 <MemManage_Handler+0x4>

08000b38 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b38:	b480      	push	{r7}
 8000b3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b3c:	bf00      	nop
 8000b3e:	e7fd      	b.n	8000b3c <BusFault_Handler+0x4>

08000b40 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b40:	b480      	push	{r7}
 8000b42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b44:	bf00      	nop
 8000b46:	e7fd      	b.n	8000b44 <UsageFault_Handler+0x4>

08000b48 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b48:	b480      	push	{r7}
 8000b4a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b4c:	bf00      	nop
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	bc80      	pop	{r7}
 8000b52:	4770      	bx	lr

08000b54 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b54:	b480      	push	{r7}
 8000b56:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b58:	bf00      	nop
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	bc80      	pop	{r7}
 8000b5e:	4770      	bx	lr

08000b60 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b60:	b480      	push	{r7}
 8000b62:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b64:	bf00      	nop
 8000b66:	46bd      	mov	sp, r7
 8000b68:	bc80      	pop	{r7}
 8000b6a:	4770      	bx	lr

08000b6c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b70:	f000 f87c 	bl	8000c6c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b74:	bf00      	nop
 8000b76:	bd80      	pop	{r7, pc}

08000b78 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(IRQ_Pin);
 8000b7c:	2004      	movs	r0, #4
 8000b7e:	f000 ffcf 	bl	8001b20 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8000b82:	bf00      	nop
 8000b84:	bd80      	pop	{r7, pc}

08000b86 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000b86:	b480      	push	{r7}
 8000b88:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b8a:	bf00      	nop
 8000b8c:	46bd      	mov	sp, r7
 8000b8e:	bc80      	pop	{r7}
 8000b90:	4770      	bx	lr
	...

08000b94 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000b94:	f7ff fff7 	bl	8000b86 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b98:	480b      	ldr	r0, [pc, #44]	@ (8000bc8 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000b9a:	490c      	ldr	r1, [pc, #48]	@ (8000bcc <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000b9c:	4a0c      	ldr	r2, [pc, #48]	@ (8000bd0 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000b9e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ba0:	e002      	b.n	8000ba8 <LoopCopyDataInit>

08000ba2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ba2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ba4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ba6:	3304      	adds	r3, #4

08000ba8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ba8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000baa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000bac:	d3f9      	bcc.n	8000ba2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000bae:	4a09      	ldr	r2, [pc, #36]	@ (8000bd4 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000bb0:	4c09      	ldr	r4, [pc, #36]	@ (8000bd8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000bb2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000bb4:	e001      	b.n	8000bba <LoopFillZerobss>

08000bb6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000bb6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000bb8:	3204      	adds	r2, #4

08000bba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000bba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000bbc:	d3fb      	bcc.n	8000bb6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000bbe:	f002 fad7 	bl	8003170 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000bc2:	f7ff fc4f 	bl	8000464 <main>
  bx lr
 8000bc6:	4770      	bx	lr
  ldr r0, =_sdata
 8000bc8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000bcc:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8000bd0:	08003228 	.word	0x08003228
  ldr r2, =_sbss
 8000bd4:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8000bd8:	200000f4 	.word	0x200000f4

08000bdc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000bdc:	e7fe      	b.n	8000bdc <ADC1_2_IRQHandler>
	...

08000be0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000be4:	4b08      	ldr	r3, [pc, #32]	@ (8000c08 <HAL_Init+0x28>)
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	4a07      	ldr	r2, [pc, #28]	@ (8000c08 <HAL_Init+0x28>)
 8000bea:	f043 0310 	orr.w	r3, r3, #16
 8000bee:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000bf0:	2003      	movs	r0, #3
 8000bf2:	f000 fd9f 	bl	8001734 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000bf6:	200f      	movs	r0, #15
 8000bf8:	f000 f808 	bl	8000c0c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000bfc:	f7ff fec0 	bl	8000980 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c00:	2300      	movs	r3, #0
}
 8000c02:	4618      	mov	r0, r3
 8000c04:	bd80      	pop	{r7, pc}
 8000c06:	bf00      	nop
 8000c08:	40022000 	.word	0x40022000

08000c0c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	b082      	sub	sp, #8
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c14:	4b12      	ldr	r3, [pc, #72]	@ (8000c60 <HAL_InitTick+0x54>)
 8000c16:	681a      	ldr	r2, [r3, #0]
 8000c18:	4b12      	ldr	r3, [pc, #72]	@ (8000c64 <HAL_InitTick+0x58>)
 8000c1a:	781b      	ldrb	r3, [r3, #0]
 8000c1c:	4619      	mov	r1, r3
 8000c1e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000c22:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c26:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c2a:	4618      	mov	r0, r3
 8000c2c:	f000 fdb7 	bl	800179e <HAL_SYSTICK_Config>
 8000c30:	4603      	mov	r3, r0
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d001      	beq.n	8000c3a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000c36:	2301      	movs	r3, #1
 8000c38:	e00e      	b.n	8000c58 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	2b0f      	cmp	r3, #15
 8000c3e:	d80a      	bhi.n	8000c56 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c40:	2200      	movs	r2, #0
 8000c42:	6879      	ldr	r1, [r7, #4]
 8000c44:	f04f 30ff 	mov.w	r0, #4294967295
 8000c48:	f000 fd7f 	bl	800174a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c4c:	4a06      	ldr	r2, [pc, #24]	@ (8000c68 <HAL_InitTick+0x5c>)
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000c52:	2300      	movs	r3, #0
 8000c54:	e000      	b.n	8000c58 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000c56:	2301      	movs	r3, #1
}
 8000c58:	4618      	mov	r0, r3
 8000c5a:	3708      	adds	r7, #8
 8000c5c:	46bd      	mov	sp, r7
 8000c5e:	bd80      	pop	{r7, pc}
 8000c60:	20000008 	.word	0x20000008
 8000c64:	20000010 	.word	0x20000010
 8000c68:	2000000c 	.word	0x2000000c

08000c6c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c6c:	b480      	push	{r7}
 8000c6e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c70:	4b05      	ldr	r3, [pc, #20]	@ (8000c88 <HAL_IncTick+0x1c>)
 8000c72:	781b      	ldrb	r3, [r3, #0]
 8000c74:	461a      	mov	r2, r3
 8000c76:	4b05      	ldr	r3, [pc, #20]	@ (8000c8c <HAL_IncTick+0x20>)
 8000c78:	681b      	ldr	r3, [r3, #0]
 8000c7a:	4413      	add	r3, r2
 8000c7c:	4a03      	ldr	r2, [pc, #12]	@ (8000c8c <HAL_IncTick+0x20>)
 8000c7e:	6013      	str	r3, [r2, #0]
}
 8000c80:	bf00      	nop
 8000c82:	46bd      	mov	sp, r7
 8000c84:	bc80      	pop	{r7}
 8000c86:	4770      	bx	lr
 8000c88:	20000010 	.word	0x20000010
 8000c8c:	200000f0 	.word	0x200000f0

08000c90 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c90:	b480      	push	{r7}
 8000c92:	af00      	add	r7, sp, #0
  return uwTick;
 8000c94:	4b02      	ldr	r3, [pc, #8]	@ (8000ca0 <HAL_GetTick+0x10>)
 8000c96:	681b      	ldr	r3, [r3, #0]
}
 8000c98:	4618      	mov	r0, r3
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	bc80      	pop	{r7}
 8000c9e:	4770      	bx	lr
 8000ca0:	200000f0 	.word	0x200000f0

08000ca4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	b084      	sub	sp, #16
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000cac:	f7ff fff0 	bl	8000c90 <HAL_GetTick>
 8000cb0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000cb6:	68fb      	ldr	r3, [r7, #12]
 8000cb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000cbc:	d005      	beq.n	8000cca <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000cbe:	4b0a      	ldr	r3, [pc, #40]	@ (8000ce8 <HAL_Delay+0x44>)
 8000cc0:	781b      	ldrb	r3, [r3, #0]
 8000cc2:	461a      	mov	r2, r3
 8000cc4:	68fb      	ldr	r3, [r7, #12]
 8000cc6:	4413      	add	r3, r2
 8000cc8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000cca:	bf00      	nop
 8000ccc:	f7ff ffe0 	bl	8000c90 <HAL_GetTick>
 8000cd0:	4602      	mov	r2, r0
 8000cd2:	68bb      	ldr	r3, [r7, #8]
 8000cd4:	1ad3      	subs	r3, r2, r3
 8000cd6:	68fa      	ldr	r2, [r7, #12]
 8000cd8:	429a      	cmp	r2, r3
 8000cda:	d8f7      	bhi.n	8000ccc <HAL_Delay+0x28>
  {
  }
}
 8000cdc:	bf00      	nop
 8000cde:	bf00      	nop
 8000ce0:	3710      	adds	r7, #16
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	bd80      	pop	{r7, pc}
 8000ce6:	bf00      	nop
 8000ce8:	20000010 	.word	0x20000010

08000cec <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	b086      	sub	sp, #24
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8000d00:	2300      	movs	r3, #0
 8000d02:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	d101      	bne.n	8000d0e <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8000d0a:	2301      	movs	r3, #1
 8000d0c:	e0be      	b.n	8000e8c <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	689b      	ldr	r3, [r3, #8]
 8000d12:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	d109      	bne.n	8000d30 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	2200      	movs	r2, #0
 8000d20:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	2200      	movs	r2, #0
 8000d26:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000d2a:	6878      	ldr	r0, [r7, #4]
 8000d2c:	f7ff fe5a 	bl	80009e4 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000d30:	6878      	ldr	r0, [r7, #4]
 8000d32:	f000 fbf1 	bl	8001518 <ADC_ConversionStop_Disable>
 8000d36:	4603      	mov	r3, r0
 8000d38:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000d3e:	f003 0310 	and.w	r3, r3, #16
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	f040 8099 	bne.w	8000e7a <HAL_ADC_Init+0x18e>
 8000d48:	7dfb      	ldrb	r3, [r7, #23]
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	f040 8095 	bne.w	8000e7a <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000d54:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8000d58:	f023 0302 	bic.w	r3, r3, #2
 8000d5c:	f043 0202 	orr.w	r2, r3, #2
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000d6c:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	7b1b      	ldrb	r3, [r3, #12]
 8000d72:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000d74:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000d76:	68ba      	ldr	r2, [r7, #8]
 8000d78:	4313      	orrs	r3, r2
 8000d7a:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	689b      	ldr	r3, [r3, #8]
 8000d80:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8000d84:	d003      	beq.n	8000d8e <HAL_ADC_Init+0xa2>
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	689b      	ldr	r3, [r3, #8]
 8000d8a:	2b01      	cmp	r3, #1
 8000d8c:	d102      	bne.n	8000d94 <HAL_ADC_Init+0xa8>
 8000d8e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000d92:	e000      	b.n	8000d96 <HAL_ADC_Init+0xaa>
 8000d94:	2300      	movs	r3, #0
 8000d96:	693a      	ldr	r2, [r7, #16]
 8000d98:	4313      	orrs	r3, r2
 8000d9a:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	7d1b      	ldrb	r3, [r3, #20]
 8000da0:	2b01      	cmp	r3, #1
 8000da2:	d119      	bne.n	8000dd8 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	7b1b      	ldrb	r3, [r3, #12]
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	d109      	bne.n	8000dc0 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	699b      	ldr	r3, [r3, #24]
 8000db0:	3b01      	subs	r3, #1
 8000db2:	035a      	lsls	r2, r3, #13
 8000db4:	693b      	ldr	r3, [r7, #16]
 8000db6:	4313      	orrs	r3, r2
 8000db8:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000dbc:	613b      	str	r3, [r7, #16]
 8000dbe:	e00b      	b.n	8000dd8 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000dc4:	f043 0220 	orr.w	r2, r3, #32
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000dd0:	f043 0201 	orr.w	r2, r3, #1
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	685b      	ldr	r3, [r3, #4]
 8000dde:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	693a      	ldr	r2, [r7, #16]
 8000de8:	430a      	orrs	r2, r1
 8000dea:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	689a      	ldr	r2, [r3, #8]
 8000df2:	4b28      	ldr	r3, [pc, #160]	@ (8000e94 <HAL_ADC_Init+0x1a8>)
 8000df4:	4013      	ands	r3, r2
 8000df6:	687a      	ldr	r2, [r7, #4]
 8000df8:	6812      	ldr	r2, [r2, #0]
 8000dfa:	68b9      	ldr	r1, [r7, #8]
 8000dfc:	430b      	orrs	r3, r1
 8000dfe:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	689b      	ldr	r3, [r3, #8]
 8000e04:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8000e08:	d003      	beq.n	8000e12 <HAL_ADC_Init+0x126>
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	689b      	ldr	r3, [r3, #8]
 8000e0e:	2b01      	cmp	r3, #1
 8000e10:	d104      	bne.n	8000e1c <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	691b      	ldr	r3, [r3, #16]
 8000e16:	3b01      	subs	r3, #1
 8000e18:	051b      	lsls	r3, r3, #20
 8000e1a:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000e22:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	68fa      	ldr	r2, [r7, #12]
 8000e2c:	430a      	orrs	r2, r1
 8000e2e:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	689a      	ldr	r2, [r3, #8]
 8000e36:	4b18      	ldr	r3, [pc, #96]	@ (8000e98 <HAL_ADC_Init+0x1ac>)
 8000e38:	4013      	ands	r3, r2
 8000e3a:	68ba      	ldr	r2, [r7, #8]
 8000e3c:	429a      	cmp	r2, r3
 8000e3e:	d10b      	bne.n	8000e58 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	2200      	movs	r2, #0
 8000e44:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000e4a:	f023 0303 	bic.w	r3, r3, #3
 8000e4e:	f043 0201 	orr.w	r2, r3, #1
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000e56:	e018      	b.n	8000e8a <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000e5c:	f023 0312 	bic.w	r3, r3, #18
 8000e60:	f043 0210 	orr.w	r2, r3, #16
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000e6c:	f043 0201 	orr.w	r2, r3, #1
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8000e74:	2301      	movs	r3, #1
 8000e76:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000e78:	e007      	b.n	8000e8a <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000e7e:	f043 0210 	orr.w	r2, r3, #16
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 8000e86:	2301      	movs	r3, #1
 8000e88:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000e8a:	7dfb      	ldrb	r3, [r7, #23]
}
 8000e8c:	4618      	mov	r0, r3
 8000e8e:	3718      	adds	r7, #24
 8000e90:	46bd      	mov	sp, r7
 8000e92:	bd80      	pop	{r7, pc}
 8000e94:	ffe1f7fd 	.word	0xffe1f7fd
 8000e98:	ff1f0efe 	.word	0xff1f0efe

08000e9c <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b084      	sub	sp, #16
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8000eae:	2b01      	cmp	r3, #1
 8000eb0:	d101      	bne.n	8000eb6 <HAL_ADC_Start+0x1a>
 8000eb2:	2302      	movs	r3, #2
 8000eb4:	e098      	b.n	8000fe8 <HAL_ADC_Start+0x14c>
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	2201      	movs	r2, #1
 8000eba:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8000ebe:	6878      	ldr	r0, [r7, #4]
 8000ec0:	f000 fad0 	bl	8001464 <ADC_Enable>
 8000ec4:	4603      	mov	r3, r0
 8000ec6:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8000ec8:	7bfb      	ldrb	r3, [r7, #15]
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	f040 8087 	bne.w	8000fde <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000ed4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8000ed8:	f023 0301 	bic.w	r3, r3, #1
 8000edc:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	4a41      	ldr	r2, [pc, #260]	@ (8000ff0 <HAL_ADC_Start+0x154>)
 8000eea:	4293      	cmp	r3, r2
 8000eec:	d105      	bne.n	8000efa <HAL_ADC_Start+0x5e>
 8000eee:	4b41      	ldr	r3, [pc, #260]	@ (8000ff4 <HAL_ADC_Start+0x158>)
 8000ef0:	685b      	ldr	r3, [r3, #4]
 8000ef2:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d115      	bne.n	8000f26 <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000efe:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	685b      	ldr	r3, [r3, #4]
 8000f0c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d026      	beq.n	8000f62 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000f18:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8000f1c:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	629a      	str	r2, [r3, #40]	@ 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000f24:	e01d      	b.n	8000f62 <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000f2a:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	4a2f      	ldr	r2, [pc, #188]	@ (8000ff4 <HAL_ADC_Start+0x158>)
 8000f38:	4293      	cmp	r3, r2
 8000f3a:	d004      	beq.n	8000f46 <HAL_ADC_Start+0xaa>
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	4a2b      	ldr	r2, [pc, #172]	@ (8000ff0 <HAL_ADC_Start+0x154>)
 8000f42:	4293      	cmp	r3, r2
 8000f44:	d10d      	bne.n	8000f62 <HAL_ADC_Start+0xc6>
 8000f46:	4b2b      	ldr	r3, [pc, #172]	@ (8000ff4 <HAL_ADC_Start+0x158>)
 8000f48:	685b      	ldr	r3, [r3, #4]
 8000f4a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d007      	beq.n	8000f62 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000f56:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8000f5a:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	629a      	str	r2, [r3, #40]	@ 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000f66:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d006      	beq.n	8000f7c <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000f72:	f023 0206 	bic.w	r2, r3, #6
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000f7a:	e002      	b.n	8000f82 <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	2200      	movs	r2, #0
 8000f80:	62da      	str	r2, [r3, #44]	@ 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	2200      	movs	r2, #0
 8000f86:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	f06f 0202 	mvn.w	r2, #2
 8000f92:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	689b      	ldr	r3, [r3, #8]
 8000f9a:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8000f9e:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8000fa2:	d113      	bne.n	8000fcc <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8000fa8:	4a11      	ldr	r2, [pc, #68]	@ (8000ff0 <HAL_ADC_Start+0x154>)
 8000faa:	4293      	cmp	r3, r2
 8000fac:	d105      	bne.n	8000fba <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8000fae:	4b11      	ldr	r3, [pc, #68]	@ (8000ff4 <HAL_ADC_Start+0x158>)
 8000fb0:	685b      	ldr	r3, [r3, #4]
 8000fb2:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d108      	bne.n	8000fcc <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	689a      	ldr	r2, [r3, #8]
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	f442 02a0 	orr.w	r2, r2, #5242880	@ 0x500000
 8000fc8:	609a      	str	r2, [r3, #8]
 8000fca:	e00c      	b.n	8000fe6 <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	689a      	ldr	r2, [r3, #8]
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8000fda:	609a      	str	r2, [r3, #8]
 8000fdc:	e003      	b.n	8000fe6 <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 8000fe6:	7bfb      	ldrb	r3, [r7, #15]
}
 8000fe8:	4618      	mov	r0, r3
 8000fea:	3710      	adds	r7, #16
 8000fec:	46bd      	mov	sp, r7
 8000fee:	bd80      	pop	{r7, pc}
 8000ff0:	40012800 	.word	0x40012800
 8000ff4:	40012400 	.word	0x40012400

08000ff8 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b084      	sub	sp, #16
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001000:	2300      	movs	r3, #0
 8001002:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
     
  /* Process locked */
  __HAL_LOCK(hadc);
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800100a:	2b01      	cmp	r3, #1
 800100c:	d101      	bne.n	8001012 <HAL_ADC_Stop+0x1a>
 800100e:	2302      	movs	r3, #2
 8001010:	e01a      	b.n	8001048 <HAL_ADC_Stop+0x50>
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	2201      	movs	r2, #1
 8001016:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 800101a:	6878      	ldr	r0, [r7, #4]
 800101c:	f000 fa7c 	bl	8001518 <ADC_ConversionStop_Disable>
 8001020:	4603      	mov	r3, r0
 8001022:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8001024:	7bfb      	ldrb	r3, [r7, #15]
 8001026:	2b00      	cmp	r3, #0
 8001028:	d109      	bne.n	800103e <HAL_ADC_Stop+0x46>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800102e:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001032:	f023 0301 	bic.w	r3, r3, #1
 8001036:	f043 0201 	orr.w	r2, r3, #1
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	2200      	movs	r2, #0
 8001042:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001046:	7bfb      	ldrb	r3, [r7, #15]
}
 8001048:	4618      	mov	r0, r3
 800104a:	3710      	adds	r7, #16
 800104c:	46bd      	mov	sp, r7
 800104e:	bd80      	pop	{r7, pc}

08001050 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001050:	b590      	push	{r4, r7, lr}
 8001052:	b087      	sub	sp, #28
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]
 8001058:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800105a:	2300      	movs	r3, #0
 800105c:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 800105e:	2300      	movs	r3, #0
 8001060:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 8001062:	2300      	movs	r3, #0
 8001064:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8001066:	f7ff fe13 	bl	8000c90 <HAL_GetTick>
 800106a:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	689b      	ldr	r3, [r3, #8]
 8001072:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001076:	2b00      	cmp	r3, #0
 8001078:	d00b      	beq.n	8001092 <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800107e:	f043 0220 	orr.w	r2, r3, #32
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	2200      	movs	r2, #0
 800108a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    return HAL_ERROR;
 800108e:	2301      	movs	r3, #1
 8001090:	e0d3      	b.n	800123a <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	685b      	ldr	r3, [r3, #4]
 8001098:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800109c:	2b00      	cmp	r3, #0
 800109e:	d131      	bne.n	8001104 <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80010a6:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d12a      	bne.n	8001104 <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 80010ae:	e021      	b.n	80010f4 <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 80010b0:	683b      	ldr	r3, [r7, #0]
 80010b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80010b6:	d01d      	beq.n	80010f4 <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 80010b8:	683b      	ldr	r3, [r7, #0]
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d007      	beq.n	80010ce <HAL_ADC_PollForConversion+0x7e>
 80010be:	f7ff fde7 	bl	8000c90 <HAL_GetTick>
 80010c2:	4602      	mov	r2, r0
 80010c4:	697b      	ldr	r3, [r7, #20]
 80010c6:	1ad3      	subs	r3, r2, r3
 80010c8:	683a      	ldr	r2, [r7, #0]
 80010ca:	429a      	cmp	r2, r3
 80010cc:	d212      	bcs.n	80010f4 <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	f003 0302 	and.w	r3, r3, #2
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d10b      	bne.n	80010f4 <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80010e0:	f043 0204 	orr.w	r2, r3, #4
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	629a      	str	r2, [r3, #40]	@ 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	2200      	movs	r2, #0
 80010ec:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
            
            return HAL_TIMEOUT;
 80010f0:	2303      	movs	r3, #3
 80010f2:	e0a2      	b.n	800123a <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	f003 0302 	and.w	r3, r3, #2
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d0d6      	beq.n	80010b0 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8001102:	e070      	b.n	80011e6 <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8001104:	4b4f      	ldr	r3, [pc, #316]	@ (8001244 <HAL_ADC_PollForConversion+0x1f4>)
 8001106:	681c      	ldr	r4, [r3, #0]
 8001108:	2002      	movs	r0, #2
 800110a:	f001 f9dd 	bl	80024c8 <HAL_RCCEx_GetPeriphCLKFreq>
 800110e:	4603      	mov	r3, r0
 8001110:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	6919      	ldr	r1, [r3, #16]
 800111a:	4b4b      	ldr	r3, [pc, #300]	@ (8001248 <HAL_ADC_PollForConversion+0x1f8>)
 800111c:	400b      	ands	r3, r1
 800111e:	2b00      	cmp	r3, #0
 8001120:	d118      	bne.n	8001154 <HAL_ADC_PollForConversion+0x104>
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	68d9      	ldr	r1, [r3, #12]
 8001128:	4b48      	ldr	r3, [pc, #288]	@ (800124c <HAL_ADC_PollForConversion+0x1fc>)
 800112a:	400b      	ands	r3, r1
 800112c:	2b00      	cmp	r3, #0
 800112e:	d111      	bne.n	8001154 <HAL_ADC_PollForConversion+0x104>
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	6919      	ldr	r1, [r3, #16]
 8001136:	4b46      	ldr	r3, [pc, #280]	@ (8001250 <HAL_ADC_PollForConversion+0x200>)
 8001138:	400b      	ands	r3, r1
 800113a:	2b00      	cmp	r3, #0
 800113c:	d108      	bne.n	8001150 <HAL_ADC_PollForConversion+0x100>
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	68d9      	ldr	r1, [r3, #12]
 8001144:	4b43      	ldr	r3, [pc, #268]	@ (8001254 <HAL_ADC_PollForConversion+0x204>)
 8001146:	400b      	ands	r3, r1
 8001148:	2b00      	cmp	r3, #0
 800114a:	d101      	bne.n	8001150 <HAL_ADC_PollForConversion+0x100>
 800114c:	2314      	movs	r3, #20
 800114e:	e020      	b.n	8001192 <HAL_ADC_PollForConversion+0x142>
 8001150:	2329      	movs	r3, #41	@ 0x29
 8001152:	e01e      	b.n	8001192 <HAL_ADC_PollForConversion+0x142>
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	6919      	ldr	r1, [r3, #16]
 800115a:	4b3d      	ldr	r3, [pc, #244]	@ (8001250 <HAL_ADC_PollForConversion+0x200>)
 800115c:	400b      	ands	r3, r1
 800115e:	2b00      	cmp	r3, #0
 8001160:	d106      	bne.n	8001170 <HAL_ADC_PollForConversion+0x120>
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	68d9      	ldr	r1, [r3, #12]
 8001168:	4b3a      	ldr	r3, [pc, #232]	@ (8001254 <HAL_ADC_PollForConversion+0x204>)
 800116a:	400b      	ands	r3, r1
 800116c:	2b00      	cmp	r3, #0
 800116e:	d00d      	beq.n	800118c <HAL_ADC_PollForConversion+0x13c>
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	6919      	ldr	r1, [r3, #16]
 8001176:	4b38      	ldr	r3, [pc, #224]	@ (8001258 <HAL_ADC_PollForConversion+0x208>)
 8001178:	400b      	ands	r3, r1
 800117a:	2b00      	cmp	r3, #0
 800117c:	d108      	bne.n	8001190 <HAL_ADC_PollForConversion+0x140>
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	68d9      	ldr	r1, [r3, #12]
 8001184:	4b34      	ldr	r3, [pc, #208]	@ (8001258 <HAL_ADC_PollForConversion+0x208>)
 8001186:	400b      	ands	r3, r1
 8001188:	2b00      	cmp	r3, #0
 800118a:	d101      	bne.n	8001190 <HAL_ADC_PollForConversion+0x140>
 800118c:	2354      	movs	r3, #84	@ 0x54
 800118e:	e000      	b.n	8001192 <HAL_ADC_PollForConversion+0x142>
 8001190:	23fc      	movs	r3, #252	@ 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 8001192:	fb02 f303 	mul.w	r3, r2, r3
 8001196:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8001198:	e021      	b.n	80011de <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 800119a:	683b      	ldr	r3, [r7, #0]
 800119c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80011a0:	d01a      	beq.n	80011d8 <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 80011a2:	683b      	ldr	r3, [r7, #0]
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d007      	beq.n	80011b8 <HAL_ADC_PollForConversion+0x168>
 80011a8:	f7ff fd72 	bl	8000c90 <HAL_GetTick>
 80011ac:	4602      	mov	r2, r0
 80011ae:	697b      	ldr	r3, [r7, #20]
 80011b0:	1ad3      	subs	r3, r2, r3
 80011b2:	683a      	ldr	r2, [r7, #0]
 80011b4:	429a      	cmp	r2, r3
 80011b6:	d20f      	bcs.n	80011d8 <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 80011b8:	68fb      	ldr	r3, [r7, #12]
 80011ba:	693a      	ldr	r2, [r7, #16]
 80011bc:	429a      	cmp	r2, r3
 80011be:	d90b      	bls.n	80011d8 <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80011c4:	f043 0204 	orr.w	r2, r3, #4
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	629a      	str	r2, [r3, #40]	@ 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	2200      	movs	r2, #0
 80011d0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

            return HAL_TIMEOUT;
 80011d4:	2303      	movs	r3, #3
 80011d6:	e030      	b.n	800123a <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 80011d8:	68fb      	ldr	r3, [r7, #12]
 80011da:	3301      	adds	r3, #1
 80011dc:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 80011de:	68fb      	ldr	r3, [r7, #12]
 80011e0:	693a      	ldr	r2, [r7, #16]
 80011e2:	429a      	cmp	r2, r3
 80011e4:	d8d9      	bhi.n	800119a <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	f06f 0212 	mvn.w	r2, #18
 80011ee:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80011f4:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	629a      	str	r2, [r3, #40]	@ 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	689b      	ldr	r3, [r3, #8]
 8001202:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8001206:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 800120a:	d115      	bne.n	8001238 <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001210:	2b00      	cmp	r3, #0
 8001212:	d111      	bne.n	8001238 <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001218:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	629a      	str	r2, [r3, #40]	@ 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001224:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001228:	2b00      	cmp	r3, #0
 800122a:	d105      	bne.n	8001238 <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001230:	f043 0201 	orr.w	r2, r3, #1
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	629a      	str	r2, [r3, #40]	@ 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001238:	2300      	movs	r3, #0
}
 800123a:	4618      	mov	r0, r3
 800123c:	371c      	adds	r7, #28
 800123e:	46bd      	mov	sp, r7
 8001240:	bd90      	pop	{r4, r7, pc}
 8001242:	bf00      	nop
 8001244:	20000008 	.word	0x20000008
 8001248:	24924924 	.word	0x24924924
 800124c:	00924924 	.word	0x00924924
 8001250:	12492492 	.word	0x12492492
 8001254:	00492492 	.word	0x00492492
 8001258:	00249249 	.word	0x00249249

0800125c <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 800125c:	b480      	push	{r7}
 800125e:	b083      	sub	sp, #12
 8001260:	af00      	add	r7, sp, #0
 8001262:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 800126a:	4618      	mov	r0, r3
 800126c:	370c      	adds	r7, #12
 800126e:	46bd      	mov	sp, r7
 8001270:	bc80      	pop	{r7}
 8001272:	4770      	bx	lr

08001274 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001274:	b480      	push	{r7}
 8001276:	b085      	sub	sp, #20
 8001278:	af00      	add	r7, sp, #0
 800127a:	6078      	str	r0, [r7, #4]
 800127c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800127e:	2300      	movs	r3, #0
 8001280:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8001282:	2300      	movs	r3, #0
 8001284:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800128c:	2b01      	cmp	r3, #1
 800128e:	d101      	bne.n	8001294 <HAL_ADC_ConfigChannel+0x20>
 8001290:	2302      	movs	r3, #2
 8001292:	e0dc      	b.n	800144e <HAL_ADC_ConfigChannel+0x1da>
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	2201      	movs	r2, #1
 8001298:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800129c:	683b      	ldr	r3, [r7, #0]
 800129e:	685b      	ldr	r3, [r3, #4]
 80012a0:	2b06      	cmp	r3, #6
 80012a2:	d81c      	bhi.n	80012de <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80012aa:	683b      	ldr	r3, [r7, #0]
 80012ac:	685a      	ldr	r2, [r3, #4]
 80012ae:	4613      	mov	r3, r2
 80012b0:	009b      	lsls	r3, r3, #2
 80012b2:	4413      	add	r3, r2
 80012b4:	3b05      	subs	r3, #5
 80012b6:	221f      	movs	r2, #31
 80012b8:	fa02 f303 	lsl.w	r3, r2, r3
 80012bc:	43db      	mvns	r3, r3
 80012be:	4019      	ands	r1, r3
 80012c0:	683b      	ldr	r3, [r7, #0]
 80012c2:	6818      	ldr	r0, [r3, #0]
 80012c4:	683b      	ldr	r3, [r7, #0]
 80012c6:	685a      	ldr	r2, [r3, #4]
 80012c8:	4613      	mov	r3, r2
 80012ca:	009b      	lsls	r3, r3, #2
 80012cc:	4413      	add	r3, r2
 80012ce:	3b05      	subs	r3, #5
 80012d0:	fa00 f203 	lsl.w	r2, r0, r3
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	430a      	orrs	r2, r1
 80012da:	635a      	str	r2, [r3, #52]	@ 0x34
 80012dc:	e03c      	b.n	8001358 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80012de:	683b      	ldr	r3, [r7, #0]
 80012e0:	685b      	ldr	r3, [r3, #4]
 80012e2:	2b0c      	cmp	r3, #12
 80012e4:	d81c      	bhi.n	8001320 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80012ec:	683b      	ldr	r3, [r7, #0]
 80012ee:	685a      	ldr	r2, [r3, #4]
 80012f0:	4613      	mov	r3, r2
 80012f2:	009b      	lsls	r3, r3, #2
 80012f4:	4413      	add	r3, r2
 80012f6:	3b23      	subs	r3, #35	@ 0x23
 80012f8:	221f      	movs	r2, #31
 80012fa:	fa02 f303 	lsl.w	r3, r2, r3
 80012fe:	43db      	mvns	r3, r3
 8001300:	4019      	ands	r1, r3
 8001302:	683b      	ldr	r3, [r7, #0]
 8001304:	6818      	ldr	r0, [r3, #0]
 8001306:	683b      	ldr	r3, [r7, #0]
 8001308:	685a      	ldr	r2, [r3, #4]
 800130a:	4613      	mov	r3, r2
 800130c:	009b      	lsls	r3, r3, #2
 800130e:	4413      	add	r3, r2
 8001310:	3b23      	subs	r3, #35	@ 0x23
 8001312:	fa00 f203 	lsl.w	r2, r0, r3
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	430a      	orrs	r2, r1
 800131c:	631a      	str	r2, [r3, #48]	@ 0x30
 800131e:	e01b      	b.n	8001358 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001326:	683b      	ldr	r3, [r7, #0]
 8001328:	685a      	ldr	r2, [r3, #4]
 800132a:	4613      	mov	r3, r2
 800132c:	009b      	lsls	r3, r3, #2
 800132e:	4413      	add	r3, r2
 8001330:	3b41      	subs	r3, #65	@ 0x41
 8001332:	221f      	movs	r2, #31
 8001334:	fa02 f303 	lsl.w	r3, r2, r3
 8001338:	43db      	mvns	r3, r3
 800133a:	4019      	ands	r1, r3
 800133c:	683b      	ldr	r3, [r7, #0]
 800133e:	6818      	ldr	r0, [r3, #0]
 8001340:	683b      	ldr	r3, [r7, #0]
 8001342:	685a      	ldr	r2, [r3, #4]
 8001344:	4613      	mov	r3, r2
 8001346:	009b      	lsls	r3, r3, #2
 8001348:	4413      	add	r3, r2
 800134a:	3b41      	subs	r3, #65	@ 0x41
 800134c:	fa00 f203 	lsl.w	r2, r0, r3
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	430a      	orrs	r2, r1
 8001356:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001358:	683b      	ldr	r3, [r7, #0]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	2b09      	cmp	r3, #9
 800135e:	d91c      	bls.n	800139a <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	68d9      	ldr	r1, [r3, #12]
 8001366:	683b      	ldr	r3, [r7, #0]
 8001368:	681a      	ldr	r2, [r3, #0]
 800136a:	4613      	mov	r3, r2
 800136c:	005b      	lsls	r3, r3, #1
 800136e:	4413      	add	r3, r2
 8001370:	3b1e      	subs	r3, #30
 8001372:	2207      	movs	r2, #7
 8001374:	fa02 f303 	lsl.w	r3, r2, r3
 8001378:	43db      	mvns	r3, r3
 800137a:	4019      	ands	r1, r3
 800137c:	683b      	ldr	r3, [r7, #0]
 800137e:	6898      	ldr	r0, [r3, #8]
 8001380:	683b      	ldr	r3, [r7, #0]
 8001382:	681a      	ldr	r2, [r3, #0]
 8001384:	4613      	mov	r3, r2
 8001386:	005b      	lsls	r3, r3, #1
 8001388:	4413      	add	r3, r2
 800138a:	3b1e      	subs	r3, #30
 800138c:	fa00 f203 	lsl.w	r2, r0, r3
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	430a      	orrs	r2, r1
 8001396:	60da      	str	r2, [r3, #12]
 8001398:	e019      	b.n	80013ce <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	6919      	ldr	r1, [r3, #16]
 80013a0:	683b      	ldr	r3, [r7, #0]
 80013a2:	681a      	ldr	r2, [r3, #0]
 80013a4:	4613      	mov	r3, r2
 80013a6:	005b      	lsls	r3, r3, #1
 80013a8:	4413      	add	r3, r2
 80013aa:	2207      	movs	r2, #7
 80013ac:	fa02 f303 	lsl.w	r3, r2, r3
 80013b0:	43db      	mvns	r3, r3
 80013b2:	4019      	ands	r1, r3
 80013b4:	683b      	ldr	r3, [r7, #0]
 80013b6:	6898      	ldr	r0, [r3, #8]
 80013b8:	683b      	ldr	r3, [r7, #0]
 80013ba:	681a      	ldr	r2, [r3, #0]
 80013bc:	4613      	mov	r3, r2
 80013be:	005b      	lsls	r3, r3, #1
 80013c0:	4413      	add	r3, r2
 80013c2:	fa00 f203 	lsl.w	r2, r0, r3
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	430a      	orrs	r2, r1
 80013cc:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80013ce:	683b      	ldr	r3, [r7, #0]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	2b10      	cmp	r3, #16
 80013d4:	d003      	beq.n	80013de <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80013d6:	683b      	ldr	r3, [r7, #0]
 80013d8:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80013da:	2b11      	cmp	r3, #17
 80013dc:	d132      	bne.n	8001444 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	4a1d      	ldr	r2, [pc, #116]	@ (8001458 <HAL_ADC_ConfigChannel+0x1e4>)
 80013e4:	4293      	cmp	r3, r2
 80013e6:	d125      	bne.n	8001434 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	689b      	ldr	r3, [r3, #8]
 80013ee:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d126      	bne.n	8001444 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	689a      	ldr	r2, [r3, #8]
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8001404:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001406:	683b      	ldr	r3, [r7, #0]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	2b10      	cmp	r3, #16
 800140c:	d11a      	bne.n	8001444 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800140e:	4b13      	ldr	r3, [pc, #76]	@ (800145c <HAL_ADC_ConfigChannel+0x1e8>)
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	4a13      	ldr	r2, [pc, #76]	@ (8001460 <HAL_ADC_ConfigChannel+0x1ec>)
 8001414:	fba2 2303 	umull	r2, r3, r2, r3
 8001418:	0c9a      	lsrs	r2, r3, #18
 800141a:	4613      	mov	r3, r2
 800141c:	009b      	lsls	r3, r3, #2
 800141e:	4413      	add	r3, r2
 8001420:	005b      	lsls	r3, r3, #1
 8001422:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001424:	e002      	b.n	800142c <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8001426:	68bb      	ldr	r3, [r7, #8]
 8001428:	3b01      	subs	r3, #1
 800142a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800142c:	68bb      	ldr	r3, [r7, #8]
 800142e:	2b00      	cmp	r3, #0
 8001430:	d1f9      	bne.n	8001426 <HAL_ADC_ConfigChannel+0x1b2>
 8001432:	e007      	b.n	8001444 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001438:	f043 0220 	orr.w	r2, r3, #32
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001440:	2301      	movs	r3, #1
 8001442:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	2200      	movs	r2, #0
 8001448:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 800144c:	7bfb      	ldrb	r3, [r7, #15]
}
 800144e:	4618      	mov	r0, r3
 8001450:	3714      	adds	r7, #20
 8001452:	46bd      	mov	sp, r7
 8001454:	bc80      	pop	{r7}
 8001456:	4770      	bx	lr
 8001458:	40012400 	.word	0x40012400
 800145c:	20000008 	.word	0x20000008
 8001460:	431bde83 	.word	0x431bde83

08001464 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	b084      	sub	sp, #16
 8001468:	af00      	add	r7, sp, #0
 800146a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800146c:	2300      	movs	r3, #0
 800146e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8001470:	2300      	movs	r3, #0
 8001472:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	689b      	ldr	r3, [r3, #8]
 800147a:	f003 0301 	and.w	r3, r3, #1
 800147e:	2b01      	cmp	r3, #1
 8001480:	d040      	beq.n	8001504 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	689a      	ldr	r2, [r3, #8]
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	f042 0201 	orr.w	r2, r2, #1
 8001490:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001492:	4b1f      	ldr	r3, [pc, #124]	@ (8001510 <ADC_Enable+0xac>)
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	4a1f      	ldr	r2, [pc, #124]	@ (8001514 <ADC_Enable+0xb0>)
 8001498:	fba2 2303 	umull	r2, r3, r2, r3
 800149c:	0c9b      	lsrs	r3, r3, #18
 800149e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80014a0:	e002      	b.n	80014a8 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 80014a2:	68bb      	ldr	r3, [r7, #8]
 80014a4:	3b01      	subs	r3, #1
 80014a6:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80014a8:	68bb      	ldr	r3, [r7, #8]
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d1f9      	bne.n	80014a2 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 80014ae:	f7ff fbef 	bl	8000c90 <HAL_GetTick>
 80014b2:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 80014b4:	e01f      	b.n	80014f6 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80014b6:	f7ff fbeb 	bl	8000c90 <HAL_GetTick>
 80014ba:	4602      	mov	r2, r0
 80014bc:	68fb      	ldr	r3, [r7, #12]
 80014be:	1ad3      	subs	r3, r2, r3
 80014c0:	2b02      	cmp	r3, #2
 80014c2:	d918      	bls.n	80014f6 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	689b      	ldr	r3, [r3, #8]
 80014ca:	f003 0301 	and.w	r3, r3, #1
 80014ce:	2b01      	cmp	r3, #1
 80014d0:	d011      	beq.n	80014f6 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80014d6:	f043 0210 	orr.w	r2, r3, #16
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80014e2:	f043 0201 	orr.w	r2, r3, #1
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	62da      	str	r2, [r3, #44]	@ 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	2200      	movs	r2, #0
 80014ee:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 80014f2:	2301      	movs	r3, #1
 80014f4:	e007      	b.n	8001506 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	689b      	ldr	r3, [r3, #8]
 80014fc:	f003 0301 	and.w	r3, r3, #1
 8001500:	2b01      	cmp	r3, #1
 8001502:	d1d8      	bne.n	80014b6 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001504:	2300      	movs	r3, #0
}
 8001506:	4618      	mov	r0, r3
 8001508:	3710      	adds	r7, #16
 800150a:	46bd      	mov	sp, r7
 800150c:	bd80      	pop	{r7, pc}
 800150e:	bf00      	nop
 8001510:	20000008 	.word	0x20000008
 8001514:	431bde83 	.word	0x431bde83

08001518 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	b084      	sub	sp, #16
 800151c:	af00      	add	r7, sp, #0
 800151e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001520:	2300      	movs	r3, #0
 8001522:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	689b      	ldr	r3, [r3, #8]
 800152a:	f003 0301 	and.w	r3, r3, #1
 800152e:	2b01      	cmp	r3, #1
 8001530:	d12e      	bne.n	8001590 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	689a      	ldr	r2, [r3, #8]
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	f022 0201 	bic.w	r2, r2, #1
 8001540:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001542:	f7ff fba5 	bl	8000c90 <HAL_GetTick>
 8001546:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001548:	e01b      	b.n	8001582 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800154a:	f7ff fba1 	bl	8000c90 <HAL_GetTick>
 800154e:	4602      	mov	r2, r0
 8001550:	68fb      	ldr	r3, [r7, #12]
 8001552:	1ad3      	subs	r3, r2, r3
 8001554:	2b02      	cmp	r3, #2
 8001556:	d914      	bls.n	8001582 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	689b      	ldr	r3, [r3, #8]
 800155e:	f003 0301 	and.w	r3, r3, #1
 8001562:	2b01      	cmp	r3, #1
 8001564:	d10d      	bne.n	8001582 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800156a:	f043 0210 	orr.w	r2, r3, #16
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001576:	f043 0201 	orr.w	r2, r3, #1
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 800157e:	2301      	movs	r3, #1
 8001580:	e007      	b.n	8001592 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	689b      	ldr	r3, [r3, #8]
 8001588:	f003 0301 	and.w	r3, r3, #1
 800158c:	2b01      	cmp	r3, #1
 800158e:	d0dc      	beq.n	800154a <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001590:	2300      	movs	r3, #0
}
 8001592:	4618      	mov	r0, r3
 8001594:	3710      	adds	r7, #16
 8001596:	46bd      	mov	sp, r7
 8001598:	bd80      	pop	{r7, pc}
	...

0800159c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800159c:	b480      	push	{r7}
 800159e:	b085      	sub	sp, #20
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	f003 0307 	and.w	r3, r3, #7
 80015aa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80015ac:	4b0c      	ldr	r3, [pc, #48]	@ (80015e0 <__NVIC_SetPriorityGrouping+0x44>)
 80015ae:	68db      	ldr	r3, [r3, #12]
 80015b0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80015b2:	68ba      	ldr	r2, [r7, #8]
 80015b4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80015b8:	4013      	ands	r3, r2
 80015ba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80015c0:	68bb      	ldr	r3, [r7, #8]
 80015c2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80015c4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80015c8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80015cc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80015ce:	4a04      	ldr	r2, [pc, #16]	@ (80015e0 <__NVIC_SetPriorityGrouping+0x44>)
 80015d0:	68bb      	ldr	r3, [r7, #8]
 80015d2:	60d3      	str	r3, [r2, #12]
}
 80015d4:	bf00      	nop
 80015d6:	3714      	adds	r7, #20
 80015d8:	46bd      	mov	sp, r7
 80015da:	bc80      	pop	{r7}
 80015dc:	4770      	bx	lr
 80015de:	bf00      	nop
 80015e0:	e000ed00 	.word	0xe000ed00

080015e4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80015e4:	b480      	push	{r7}
 80015e6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80015e8:	4b04      	ldr	r3, [pc, #16]	@ (80015fc <__NVIC_GetPriorityGrouping+0x18>)
 80015ea:	68db      	ldr	r3, [r3, #12]
 80015ec:	0a1b      	lsrs	r3, r3, #8
 80015ee:	f003 0307 	and.w	r3, r3, #7
}
 80015f2:	4618      	mov	r0, r3
 80015f4:	46bd      	mov	sp, r7
 80015f6:	bc80      	pop	{r7}
 80015f8:	4770      	bx	lr
 80015fa:	bf00      	nop
 80015fc:	e000ed00 	.word	0xe000ed00

08001600 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001600:	b480      	push	{r7}
 8001602:	b083      	sub	sp, #12
 8001604:	af00      	add	r7, sp, #0
 8001606:	4603      	mov	r3, r0
 8001608:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800160a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800160e:	2b00      	cmp	r3, #0
 8001610:	db0b      	blt.n	800162a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001612:	79fb      	ldrb	r3, [r7, #7]
 8001614:	f003 021f 	and.w	r2, r3, #31
 8001618:	4906      	ldr	r1, [pc, #24]	@ (8001634 <__NVIC_EnableIRQ+0x34>)
 800161a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800161e:	095b      	lsrs	r3, r3, #5
 8001620:	2001      	movs	r0, #1
 8001622:	fa00 f202 	lsl.w	r2, r0, r2
 8001626:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800162a:	bf00      	nop
 800162c:	370c      	adds	r7, #12
 800162e:	46bd      	mov	sp, r7
 8001630:	bc80      	pop	{r7}
 8001632:	4770      	bx	lr
 8001634:	e000e100 	.word	0xe000e100

08001638 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001638:	b480      	push	{r7}
 800163a:	b083      	sub	sp, #12
 800163c:	af00      	add	r7, sp, #0
 800163e:	4603      	mov	r3, r0
 8001640:	6039      	str	r1, [r7, #0]
 8001642:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001644:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001648:	2b00      	cmp	r3, #0
 800164a:	db0a      	blt.n	8001662 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800164c:	683b      	ldr	r3, [r7, #0]
 800164e:	b2da      	uxtb	r2, r3
 8001650:	490c      	ldr	r1, [pc, #48]	@ (8001684 <__NVIC_SetPriority+0x4c>)
 8001652:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001656:	0112      	lsls	r2, r2, #4
 8001658:	b2d2      	uxtb	r2, r2
 800165a:	440b      	add	r3, r1
 800165c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001660:	e00a      	b.n	8001678 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001662:	683b      	ldr	r3, [r7, #0]
 8001664:	b2da      	uxtb	r2, r3
 8001666:	4908      	ldr	r1, [pc, #32]	@ (8001688 <__NVIC_SetPriority+0x50>)
 8001668:	79fb      	ldrb	r3, [r7, #7]
 800166a:	f003 030f 	and.w	r3, r3, #15
 800166e:	3b04      	subs	r3, #4
 8001670:	0112      	lsls	r2, r2, #4
 8001672:	b2d2      	uxtb	r2, r2
 8001674:	440b      	add	r3, r1
 8001676:	761a      	strb	r2, [r3, #24]
}
 8001678:	bf00      	nop
 800167a:	370c      	adds	r7, #12
 800167c:	46bd      	mov	sp, r7
 800167e:	bc80      	pop	{r7}
 8001680:	4770      	bx	lr
 8001682:	bf00      	nop
 8001684:	e000e100 	.word	0xe000e100
 8001688:	e000ed00 	.word	0xe000ed00

0800168c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800168c:	b480      	push	{r7}
 800168e:	b089      	sub	sp, #36	@ 0x24
 8001690:	af00      	add	r7, sp, #0
 8001692:	60f8      	str	r0, [r7, #12]
 8001694:	60b9      	str	r1, [r7, #8]
 8001696:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	f003 0307 	and.w	r3, r3, #7
 800169e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80016a0:	69fb      	ldr	r3, [r7, #28]
 80016a2:	f1c3 0307 	rsb	r3, r3, #7
 80016a6:	2b04      	cmp	r3, #4
 80016a8:	bf28      	it	cs
 80016aa:	2304      	movcs	r3, #4
 80016ac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80016ae:	69fb      	ldr	r3, [r7, #28]
 80016b0:	3304      	adds	r3, #4
 80016b2:	2b06      	cmp	r3, #6
 80016b4:	d902      	bls.n	80016bc <NVIC_EncodePriority+0x30>
 80016b6:	69fb      	ldr	r3, [r7, #28]
 80016b8:	3b03      	subs	r3, #3
 80016ba:	e000      	b.n	80016be <NVIC_EncodePriority+0x32>
 80016bc:	2300      	movs	r3, #0
 80016be:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016c0:	f04f 32ff 	mov.w	r2, #4294967295
 80016c4:	69bb      	ldr	r3, [r7, #24]
 80016c6:	fa02 f303 	lsl.w	r3, r2, r3
 80016ca:	43da      	mvns	r2, r3
 80016cc:	68bb      	ldr	r3, [r7, #8]
 80016ce:	401a      	ands	r2, r3
 80016d0:	697b      	ldr	r3, [r7, #20]
 80016d2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80016d4:	f04f 31ff 	mov.w	r1, #4294967295
 80016d8:	697b      	ldr	r3, [r7, #20]
 80016da:	fa01 f303 	lsl.w	r3, r1, r3
 80016de:	43d9      	mvns	r1, r3
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016e4:	4313      	orrs	r3, r2
         );
}
 80016e6:	4618      	mov	r0, r3
 80016e8:	3724      	adds	r7, #36	@ 0x24
 80016ea:	46bd      	mov	sp, r7
 80016ec:	bc80      	pop	{r7}
 80016ee:	4770      	bx	lr

080016f0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b082      	sub	sp, #8
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	3b01      	subs	r3, #1
 80016fc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001700:	d301      	bcc.n	8001706 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001702:	2301      	movs	r3, #1
 8001704:	e00f      	b.n	8001726 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001706:	4a0a      	ldr	r2, [pc, #40]	@ (8001730 <SysTick_Config+0x40>)
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	3b01      	subs	r3, #1
 800170c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800170e:	210f      	movs	r1, #15
 8001710:	f04f 30ff 	mov.w	r0, #4294967295
 8001714:	f7ff ff90 	bl	8001638 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001718:	4b05      	ldr	r3, [pc, #20]	@ (8001730 <SysTick_Config+0x40>)
 800171a:	2200      	movs	r2, #0
 800171c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800171e:	4b04      	ldr	r3, [pc, #16]	@ (8001730 <SysTick_Config+0x40>)
 8001720:	2207      	movs	r2, #7
 8001722:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001724:	2300      	movs	r3, #0
}
 8001726:	4618      	mov	r0, r3
 8001728:	3708      	adds	r7, #8
 800172a:	46bd      	mov	sp, r7
 800172c:	bd80      	pop	{r7, pc}
 800172e:	bf00      	nop
 8001730:	e000e010 	.word	0xe000e010

08001734 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	b082      	sub	sp, #8
 8001738:	af00      	add	r7, sp, #0
 800173a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800173c:	6878      	ldr	r0, [r7, #4]
 800173e:	f7ff ff2d 	bl	800159c <__NVIC_SetPriorityGrouping>
}
 8001742:	bf00      	nop
 8001744:	3708      	adds	r7, #8
 8001746:	46bd      	mov	sp, r7
 8001748:	bd80      	pop	{r7, pc}

0800174a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800174a:	b580      	push	{r7, lr}
 800174c:	b086      	sub	sp, #24
 800174e:	af00      	add	r7, sp, #0
 8001750:	4603      	mov	r3, r0
 8001752:	60b9      	str	r1, [r7, #8]
 8001754:	607a      	str	r2, [r7, #4]
 8001756:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001758:	2300      	movs	r3, #0
 800175a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800175c:	f7ff ff42 	bl	80015e4 <__NVIC_GetPriorityGrouping>
 8001760:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001762:	687a      	ldr	r2, [r7, #4]
 8001764:	68b9      	ldr	r1, [r7, #8]
 8001766:	6978      	ldr	r0, [r7, #20]
 8001768:	f7ff ff90 	bl	800168c <NVIC_EncodePriority>
 800176c:	4602      	mov	r2, r0
 800176e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001772:	4611      	mov	r1, r2
 8001774:	4618      	mov	r0, r3
 8001776:	f7ff ff5f 	bl	8001638 <__NVIC_SetPriority>
}
 800177a:	bf00      	nop
 800177c:	3718      	adds	r7, #24
 800177e:	46bd      	mov	sp, r7
 8001780:	bd80      	pop	{r7, pc}

08001782 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001782:	b580      	push	{r7, lr}
 8001784:	b082      	sub	sp, #8
 8001786:	af00      	add	r7, sp, #0
 8001788:	4603      	mov	r3, r0
 800178a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800178c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001790:	4618      	mov	r0, r3
 8001792:	f7ff ff35 	bl	8001600 <__NVIC_EnableIRQ>
}
 8001796:	bf00      	nop
 8001798:	3708      	adds	r7, #8
 800179a:	46bd      	mov	sp, r7
 800179c:	bd80      	pop	{r7, pc}

0800179e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800179e:	b580      	push	{r7, lr}
 80017a0:	b082      	sub	sp, #8
 80017a2:	af00      	add	r7, sp, #0
 80017a4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80017a6:	6878      	ldr	r0, [r7, #4]
 80017a8:	f7ff ffa2 	bl	80016f0 <SysTick_Config>
 80017ac:	4603      	mov	r3, r0
}
 80017ae:	4618      	mov	r0, r3
 80017b0:	3708      	adds	r7, #8
 80017b2:	46bd      	mov	sp, r7
 80017b4:	bd80      	pop	{r7, pc}
	...

080017b8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80017b8:	b480      	push	{r7}
 80017ba:	b08b      	sub	sp, #44	@ 0x2c
 80017bc:	af00      	add	r7, sp, #0
 80017be:	6078      	str	r0, [r7, #4]
 80017c0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80017c2:	2300      	movs	r3, #0
 80017c4:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80017c6:	2300      	movs	r3, #0
 80017c8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80017ca:	e169      	b.n	8001aa0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80017cc:	2201      	movs	r2, #1
 80017ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017d0:	fa02 f303 	lsl.w	r3, r2, r3
 80017d4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80017d6:	683b      	ldr	r3, [r7, #0]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	69fa      	ldr	r2, [r7, #28]
 80017dc:	4013      	ands	r3, r2
 80017de:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80017e0:	69ba      	ldr	r2, [r7, #24]
 80017e2:	69fb      	ldr	r3, [r7, #28]
 80017e4:	429a      	cmp	r2, r3
 80017e6:	f040 8158 	bne.w	8001a9a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80017ea:	683b      	ldr	r3, [r7, #0]
 80017ec:	685b      	ldr	r3, [r3, #4]
 80017ee:	4a9a      	ldr	r2, [pc, #616]	@ (8001a58 <HAL_GPIO_Init+0x2a0>)
 80017f0:	4293      	cmp	r3, r2
 80017f2:	d05e      	beq.n	80018b2 <HAL_GPIO_Init+0xfa>
 80017f4:	4a98      	ldr	r2, [pc, #608]	@ (8001a58 <HAL_GPIO_Init+0x2a0>)
 80017f6:	4293      	cmp	r3, r2
 80017f8:	d875      	bhi.n	80018e6 <HAL_GPIO_Init+0x12e>
 80017fa:	4a98      	ldr	r2, [pc, #608]	@ (8001a5c <HAL_GPIO_Init+0x2a4>)
 80017fc:	4293      	cmp	r3, r2
 80017fe:	d058      	beq.n	80018b2 <HAL_GPIO_Init+0xfa>
 8001800:	4a96      	ldr	r2, [pc, #600]	@ (8001a5c <HAL_GPIO_Init+0x2a4>)
 8001802:	4293      	cmp	r3, r2
 8001804:	d86f      	bhi.n	80018e6 <HAL_GPIO_Init+0x12e>
 8001806:	4a96      	ldr	r2, [pc, #600]	@ (8001a60 <HAL_GPIO_Init+0x2a8>)
 8001808:	4293      	cmp	r3, r2
 800180a:	d052      	beq.n	80018b2 <HAL_GPIO_Init+0xfa>
 800180c:	4a94      	ldr	r2, [pc, #592]	@ (8001a60 <HAL_GPIO_Init+0x2a8>)
 800180e:	4293      	cmp	r3, r2
 8001810:	d869      	bhi.n	80018e6 <HAL_GPIO_Init+0x12e>
 8001812:	4a94      	ldr	r2, [pc, #592]	@ (8001a64 <HAL_GPIO_Init+0x2ac>)
 8001814:	4293      	cmp	r3, r2
 8001816:	d04c      	beq.n	80018b2 <HAL_GPIO_Init+0xfa>
 8001818:	4a92      	ldr	r2, [pc, #584]	@ (8001a64 <HAL_GPIO_Init+0x2ac>)
 800181a:	4293      	cmp	r3, r2
 800181c:	d863      	bhi.n	80018e6 <HAL_GPIO_Init+0x12e>
 800181e:	4a92      	ldr	r2, [pc, #584]	@ (8001a68 <HAL_GPIO_Init+0x2b0>)
 8001820:	4293      	cmp	r3, r2
 8001822:	d046      	beq.n	80018b2 <HAL_GPIO_Init+0xfa>
 8001824:	4a90      	ldr	r2, [pc, #576]	@ (8001a68 <HAL_GPIO_Init+0x2b0>)
 8001826:	4293      	cmp	r3, r2
 8001828:	d85d      	bhi.n	80018e6 <HAL_GPIO_Init+0x12e>
 800182a:	2b12      	cmp	r3, #18
 800182c:	d82a      	bhi.n	8001884 <HAL_GPIO_Init+0xcc>
 800182e:	2b12      	cmp	r3, #18
 8001830:	d859      	bhi.n	80018e6 <HAL_GPIO_Init+0x12e>
 8001832:	a201      	add	r2, pc, #4	@ (adr r2, 8001838 <HAL_GPIO_Init+0x80>)
 8001834:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001838:	080018b3 	.word	0x080018b3
 800183c:	0800188d 	.word	0x0800188d
 8001840:	0800189f 	.word	0x0800189f
 8001844:	080018e1 	.word	0x080018e1
 8001848:	080018e7 	.word	0x080018e7
 800184c:	080018e7 	.word	0x080018e7
 8001850:	080018e7 	.word	0x080018e7
 8001854:	080018e7 	.word	0x080018e7
 8001858:	080018e7 	.word	0x080018e7
 800185c:	080018e7 	.word	0x080018e7
 8001860:	080018e7 	.word	0x080018e7
 8001864:	080018e7 	.word	0x080018e7
 8001868:	080018e7 	.word	0x080018e7
 800186c:	080018e7 	.word	0x080018e7
 8001870:	080018e7 	.word	0x080018e7
 8001874:	080018e7 	.word	0x080018e7
 8001878:	080018e7 	.word	0x080018e7
 800187c:	08001895 	.word	0x08001895
 8001880:	080018a9 	.word	0x080018a9
 8001884:	4a79      	ldr	r2, [pc, #484]	@ (8001a6c <HAL_GPIO_Init+0x2b4>)
 8001886:	4293      	cmp	r3, r2
 8001888:	d013      	beq.n	80018b2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800188a:	e02c      	b.n	80018e6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800188c:	683b      	ldr	r3, [r7, #0]
 800188e:	68db      	ldr	r3, [r3, #12]
 8001890:	623b      	str	r3, [r7, #32]
          break;
 8001892:	e029      	b.n	80018e8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001894:	683b      	ldr	r3, [r7, #0]
 8001896:	68db      	ldr	r3, [r3, #12]
 8001898:	3304      	adds	r3, #4
 800189a:	623b      	str	r3, [r7, #32]
          break;
 800189c:	e024      	b.n	80018e8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800189e:	683b      	ldr	r3, [r7, #0]
 80018a0:	68db      	ldr	r3, [r3, #12]
 80018a2:	3308      	adds	r3, #8
 80018a4:	623b      	str	r3, [r7, #32]
          break;
 80018a6:	e01f      	b.n	80018e8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80018a8:	683b      	ldr	r3, [r7, #0]
 80018aa:	68db      	ldr	r3, [r3, #12]
 80018ac:	330c      	adds	r3, #12
 80018ae:	623b      	str	r3, [r7, #32]
          break;
 80018b0:	e01a      	b.n	80018e8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80018b2:	683b      	ldr	r3, [r7, #0]
 80018b4:	689b      	ldr	r3, [r3, #8]
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d102      	bne.n	80018c0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80018ba:	2304      	movs	r3, #4
 80018bc:	623b      	str	r3, [r7, #32]
          break;
 80018be:	e013      	b.n	80018e8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80018c0:	683b      	ldr	r3, [r7, #0]
 80018c2:	689b      	ldr	r3, [r3, #8]
 80018c4:	2b01      	cmp	r3, #1
 80018c6:	d105      	bne.n	80018d4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80018c8:	2308      	movs	r3, #8
 80018ca:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	69fa      	ldr	r2, [r7, #28]
 80018d0:	611a      	str	r2, [r3, #16]
          break;
 80018d2:	e009      	b.n	80018e8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80018d4:	2308      	movs	r3, #8
 80018d6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	69fa      	ldr	r2, [r7, #28]
 80018dc:	615a      	str	r2, [r3, #20]
          break;
 80018de:	e003      	b.n	80018e8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80018e0:	2300      	movs	r3, #0
 80018e2:	623b      	str	r3, [r7, #32]
          break;
 80018e4:	e000      	b.n	80018e8 <HAL_GPIO_Init+0x130>
          break;
 80018e6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80018e8:	69bb      	ldr	r3, [r7, #24]
 80018ea:	2bff      	cmp	r3, #255	@ 0xff
 80018ec:	d801      	bhi.n	80018f2 <HAL_GPIO_Init+0x13a>
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	e001      	b.n	80018f6 <HAL_GPIO_Init+0x13e>
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	3304      	adds	r3, #4
 80018f6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80018f8:	69bb      	ldr	r3, [r7, #24]
 80018fa:	2bff      	cmp	r3, #255	@ 0xff
 80018fc:	d802      	bhi.n	8001904 <HAL_GPIO_Init+0x14c>
 80018fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001900:	009b      	lsls	r3, r3, #2
 8001902:	e002      	b.n	800190a <HAL_GPIO_Init+0x152>
 8001904:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001906:	3b08      	subs	r3, #8
 8001908:	009b      	lsls	r3, r3, #2
 800190a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800190c:	697b      	ldr	r3, [r7, #20]
 800190e:	681a      	ldr	r2, [r3, #0]
 8001910:	210f      	movs	r1, #15
 8001912:	693b      	ldr	r3, [r7, #16]
 8001914:	fa01 f303 	lsl.w	r3, r1, r3
 8001918:	43db      	mvns	r3, r3
 800191a:	401a      	ands	r2, r3
 800191c:	6a39      	ldr	r1, [r7, #32]
 800191e:	693b      	ldr	r3, [r7, #16]
 8001920:	fa01 f303 	lsl.w	r3, r1, r3
 8001924:	431a      	orrs	r2, r3
 8001926:	697b      	ldr	r3, [r7, #20]
 8001928:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800192a:	683b      	ldr	r3, [r7, #0]
 800192c:	685b      	ldr	r3, [r3, #4]
 800192e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001932:	2b00      	cmp	r3, #0
 8001934:	f000 80b1 	beq.w	8001a9a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001938:	4b4d      	ldr	r3, [pc, #308]	@ (8001a70 <HAL_GPIO_Init+0x2b8>)
 800193a:	699b      	ldr	r3, [r3, #24]
 800193c:	4a4c      	ldr	r2, [pc, #304]	@ (8001a70 <HAL_GPIO_Init+0x2b8>)
 800193e:	f043 0301 	orr.w	r3, r3, #1
 8001942:	6193      	str	r3, [r2, #24]
 8001944:	4b4a      	ldr	r3, [pc, #296]	@ (8001a70 <HAL_GPIO_Init+0x2b8>)
 8001946:	699b      	ldr	r3, [r3, #24]
 8001948:	f003 0301 	and.w	r3, r3, #1
 800194c:	60bb      	str	r3, [r7, #8]
 800194e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001950:	4a48      	ldr	r2, [pc, #288]	@ (8001a74 <HAL_GPIO_Init+0x2bc>)
 8001952:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001954:	089b      	lsrs	r3, r3, #2
 8001956:	3302      	adds	r3, #2
 8001958:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800195c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800195e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001960:	f003 0303 	and.w	r3, r3, #3
 8001964:	009b      	lsls	r3, r3, #2
 8001966:	220f      	movs	r2, #15
 8001968:	fa02 f303 	lsl.w	r3, r2, r3
 800196c:	43db      	mvns	r3, r3
 800196e:	68fa      	ldr	r2, [r7, #12]
 8001970:	4013      	ands	r3, r2
 8001972:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	4a40      	ldr	r2, [pc, #256]	@ (8001a78 <HAL_GPIO_Init+0x2c0>)
 8001978:	4293      	cmp	r3, r2
 800197a:	d013      	beq.n	80019a4 <HAL_GPIO_Init+0x1ec>
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	4a3f      	ldr	r2, [pc, #252]	@ (8001a7c <HAL_GPIO_Init+0x2c4>)
 8001980:	4293      	cmp	r3, r2
 8001982:	d00d      	beq.n	80019a0 <HAL_GPIO_Init+0x1e8>
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	4a3e      	ldr	r2, [pc, #248]	@ (8001a80 <HAL_GPIO_Init+0x2c8>)
 8001988:	4293      	cmp	r3, r2
 800198a:	d007      	beq.n	800199c <HAL_GPIO_Init+0x1e4>
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	4a3d      	ldr	r2, [pc, #244]	@ (8001a84 <HAL_GPIO_Init+0x2cc>)
 8001990:	4293      	cmp	r3, r2
 8001992:	d101      	bne.n	8001998 <HAL_GPIO_Init+0x1e0>
 8001994:	2303      	movs	r3, #3
 8001996:	e006      	b.n	80019a6 <HAL_GPIO_Init+0x1ee>
 8001998:	2304      	movs	r3, #4
 800199a:	e004      	b.n	80019a6 <HAL_GPIO_Init+0x1ee>
 800199c:	2302      	movs	r3, #2
 800199e:	e002      	b.n	80019a6 <HAL_GPIO_Init+0x1ee>
 80019a0:	2301      	movs	r3, #1
 80019a2:	e000      	b.n	80019a6 <HAL_GPIO_Init+0x1ee>
 80019a4:	2300      	movs	r3, #0
 80019a6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80019a8:	f002 0203 	and.w	r2, r2, #3
 80019ac:	0092      	lsls	r2, r2, #2
 80019ae:	4093      	lsls	r3, r2
 80019b0:	68fa      	ldr	r2, [r7, #12]
 80019b2:	4313      	orrs	r3, r2
 80019b4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80019b6:	492f      	ldr	r1, [pc, #188]	@ (8001a74 <HAL_GPIO_Init+0x2bc>)
 80019b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019ba:	089b      	lsrs	r3, r3, #2
 80019bc:	3302      	adds	r3, #2
 80019be:	68fa      	ldr	r2, [r7, #12]
 80019c0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80019c4:	683b      	ldr	r3, [r7, #0]
 80019c6:	685b      	ldr	r3, [r3, #4]
 80019c8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d006      	beq.n	80019de <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80019d0:	4b2d      	ldr	r3, [pc, #180]	@ (8001a88 <HAL_GPIO_Init+0x2d0>)
 80019d2:	689a      	ldr	r2, [r3, #8]
 80019d4:	492c      	ldr	r1, [pc, #176]	@ (8001a88 <HAL_GPIO_Init+0x2d0>)
 80019d6:	69bb      	ldr	r3, [r7, #24]
 80019d8:	4313      	orrs	r3, r2
 80019da:	608b      	str	r3, [r1, #8]
 80019dc:	e006      	b.n	80019ec <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80019de:	4b2a      	ldr	r3, [pc, #168]	@ (8001a88 <HAL_GPIO_Init+0x2d0>)
 80019e0:	689a      	ldr	r2, [r3, #8]
 80019e2:	69bb      	ldr	r3, [r7, #24]
 80019e4:	43db      	mvns	r3, r3
 80019e6:	4928      	ldr	r1, [pc, #160]	@ (8001a88 <HAL_GPIO_Init+0x2d0>)
 80019e8:	4013      	ands	r3, r2
 80019ea:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80019ec:	683b      	ldr	r3, [r7, #0]
 80019ee:	685b      	ldr	r3, [r3, #4]
 80019f0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d006      	beq.n	8001a06 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80019f8:	4b23      	ldr	r3, [pc, #140]	@ (8001a88 <HAL_GPIO_Init+0x2d0>)
 80019fa:	68da      	ldr	r2, [r3, #12]
 80019fc:	4922      	ldr	r1, [pc, #136]	@ (8001a88 <HAL_GPIO_Init+0x2d0>)
 80019fe:	69bb      	ldr	r3, [r7, #24]
 8001a00:	4313      	orrs	r3, r2
 8001a02:	60cb      	str	r3, [r1, #12]
 8001a04:	e006      	b.n	8001a14 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001a06:	4b20      	ldr	r3, [pc, #128]	@ (8001a88 <HAL_GPIO_Init+0x2d0>)
 8001a08:	68da      	ldr	r2, [r3, #12]
 8001a0a:	69bb      	ldr	r3, [r7, #24]
 8001a0c:	43db      	mvns	r3, r3
 8001a0e:	491e      	ldr	r1, [pc, #120]	@ (8001a88 <HAL_GPIO_Init+0x2d0>)
 8001a10:	4013      	ands	r3, r2
 8001a12:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001a14:	683b      	ldr	r3, [r7, #0]
 8001a16:	685b      	ldr	r3, [r3, #4]
 8001a18:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d006      	beq.n	8001a2e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001a20:	4b19      	ldr	r3, [pc, #100]	@ (8001a88 <HAL_GPIO_Init+0x2d0>)
 8001a22:	685a      	ldr	r2, [r3, #4]
 8001a24:	4918      	ldr	r1, [pc, #96]	@ (8001a88 <HAL_GPIO_Init+0x2d0>)
 8001a26:	69bb      	ldr	r3, [r7, #24]
 8001a28:	4313      	orrs	r3, r2
 8001a2a:	604b      	str	r3, [r1, #4]
 8001a2c:	e006      	b.n	8001a3c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001a2e:	4b16      	ldr	r3, [pc, #88]	@ (8001a88 <HAL_GPIO_Init+0x2d0>)
 8001a30:	685a      	ldr	r2, [r3, #4]
 8001a32:	69bb      	ldr	r3, [r7, #24]
 8001a34:	43db      	mvns	r3, r3
 8001a36:	4914      	ldr	r1, [pc, #80]	@ (8001a88 <HAL_GPIO_Init+0x2d0>)
 8001a38:	4013      	ands	r3, r2
 8001a3a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001a3c:	683b      	ldr	r3, [r7, #0]
 8001a3e:	685b      	ldr	r3, [r3, #4]
 8001a40:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d021      	beq.n	8001a8c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001a48:	4b0f      	ldr	r3, [pc, #60]	@ (8001a88 <HAL_GPIO_Init+0x2d0>)
 8001a4a:	681a      	ldr	r2, [r3, #0]
 8001a4c:	490e      	ldr	r1, [pc, #56]	@ (8001a88 <HAL_GPIO_Init+0x2d0>)
 8001a4e:	69bb      	ldr	r3, [r7, #24]
 8001a50:	4313      	orrs	r3, r2
 8001a52:	600b      	str	r3, [r1, #0]
 8001a54:	e021      	b.n	8001a9a <HAL_GPIO_Init+0x2e2>
 8001a56:	bf00      	nop
 8001a58:	10320000 	.word	0x10320000
 8001a5c:	10310000 	.word	0x10310000
 8001a60:	10220000 	.word	0x10220000
 8001a64:	10210000 	.word	0x10210000
 8001a68:	10120000 	.word	0x10120000
 8001a6c:	10110000 	.word	0x10110000
 8001a70:	40021000 	.word	0x40021000
 8001a74:	40010000 	.word	0x40010000
 8001a78:	40010800 	.word	0x40010800
 8001a7c:	40010c00 	.word	0x40010c00
 8001a80:	40011000 	.word	0x40011000
 8001a84:	40011400 	.word	0x40011400
 8001a88:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001a8c:	4b0b      	ldr	r3, [pc, #44]	@ (8001abc <HAL_GPIO_Init+0x304>)
 8001a8e:	681a      	ldr	r2, [r3, #0]
 8001a90:	69bb      	ldr	r3, [r7, #24]
 8001a92:	43db      	mvns	r3, r3
 8001a94:	4909      	ldr	r1, [pc, #36]	@ (8001abc <HAL_GPIO_Init+0x304>)
 8001a96:	4013      	ands	r3, r2
 8001a98:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001a9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a9c:	3301      	adds	r3, #1
 8001a9e:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001aa0:	683b      	ldr	r3, [r7, #0]
 8001aa2:	681a      	ldr	r2, [r3, #0]
 8001aa4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001aa6:	fa22 f303 	lsr.w	r3, r2, r3
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	f47f ae8e 	bne.w	80017cc <HAL_GPIO_Init+0x14>
  }
}
 8001ab0:	bf00      	nop
 8001ab2:	bf00      	nop
 8001ab4:	372c      	adds	r7, #44	@ 0x2c
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	bc80      	pop	{r7}
 8001aba:	4770      	bx	lr
 8001abc:	40010400 	.word	0x40010400

08001ac0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001ac0:	b480      	push	{r7}
 8001ac2:	b085      	sub	sp, #20
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	6078      	str	r0, [r7, #4]
 8001ac8:	460b      	mov	r3, r1
 8001aca:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	689a      	ldr	r2, [r3, #8]
 8001ad0:	887b      	ldrh	r3, [r7, #2]
 8001ad2:	4013      	ands	r3, r2
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d002      	beq.n	8001ade <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001ad8:	2301      	movs	r3, #1
 8001ada:	73fb      	strb	r3, [r7, #15]
 8001adc:	e001      	b.n	8001ae2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001ade:	2300      	movs	r3, #0
 8001ae0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001ae2:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ae4:	4618      	mov	r0, r3
 8001ae6:	3714      	adds	r7, #20
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	bc80      	pop	{r7}
 8001aec:	4770      	bx	lr

08001aee <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001aee:	b480      	push	{r7}
 8001af0:	b083      	sub	sp, #12
 8001af2:	af00      	add	r7, sp, #0
 8001af4:	6078      	str	r0, [r7, #4]
 8001af6:	460b      	mov	r3, r1
 8001af8:	807b      	strh	r3, [r7, #2]
 8001afa:	4613      	mov	r3, r2
 8001afc:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001afe:	787b      	ldrb	r3, [r7, #1]
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d003      	beq.n	8001b0c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001b04:	887a      	ldrh	r2, [r7, #2]
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001b0a:	e003      	b.n	8001b14 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001b0c:	887b      	ldrh	r3, [r7, #2]
 8001b0e:	041a      	lsls	r2, r3, #16
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	611a      	str	r2, [r3, #16]
}
 8001b14:	bf00      	nop
 8001b16:	370c      	adds	r7, #12
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	bc80      	pop	{r7}
 8001b1c:	4770      	bx	lr
	...

08001b20 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	b082      	sub	sp, #8
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	4603      	mov	r3, r0
 8001b28:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001b2a:	4b08      	ldr	r3, [pc, #32]	@ (8001b4c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001b2c:	695a      	ldr	r2, [r3, #20]
 8001b2e:	88fb      	ldrh	r3, [r7, #6]
 8001b30:	4013      	ands	r3, r2
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d006      	beq.n	8001b44 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001b36:	4a05      	ldr	r2, [pc, #20]	@ (8001b4c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001b38:	88fb      	ldrh	r3, [r7, #6]
 8001b3a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001b3c:	88fb      	ldrh	r3, [r7, #6]
 8001b3e:	4618      	mov	r0, r3
 8001b40:	f000 f806 	bl	8001b50 <HAL_GPIO_EXTI_Callback>
  }
}
 8001b44:	bf00      	nop
 8001b46:	3708      	adds	r7, #8
 8001b48:	46bd      	mov	sp, r7
 8001b4a:	bd80      	pop	{r7, pc}
 8001b4c:	40010400 	.word	0x40010400

08001b50 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001b50:	b480      	push	{r7}
 8001b52:	b083      	sub	sp, #12
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	4603      	mov	r3, r0
 8001b58:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001b5a:	bf00      	nop
 8001b5c:	370c      	adds	r7, #12
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	bc80      	pop	{r7}
 8001b62:	4770      	bx	lr

08001b64 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	b086      	sub	sp, #24
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d101      	bne.n	8001b76 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001b72:	2301      	movs	r3, #1
 8001b74:	e272      	b.n	800205c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	f003 0301 	and.w	r3, r3, #1
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	f000 8087 	beq.w	8001c92 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001b84:	4b92      	ldr	r3, [pc, #584]	@ (8001dd0 <HAL_RCC_OscConfig+0x26c>)
 8001b86:	685b      	ldr	r3, [r3, #4]
 8001b88:	f003 030c 	and.w	r3, r3, #12
 8001b8c:	2b04      	cmp	r3, #4
 8001b8e:	d00c      	beq.n	8001baa <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001b90:	4b8f      	ldr	r3, [pc, #572]	@ (8001dd0 <HAL_RCC_OscConfig+0x26c>)
 8001b92:	685b      	ldr	r3, [r3, #4]
 8001b94:	f003 030c 	and.w	r3, r3, #12
 8001b98:	2b08      	cmp	r3, #8
 8001b9a:	d112      	bne.n	8001bc2 <HAL_RCC_OscConfig+0x5e>
 8001b9c:	4b8c      	ldr	r3, [pc, #560]	@ (8001dd0 <HAL_RCC_OscConfig+0x26c>)
 8001b9e:	685b      	ldr	r3, [r3, #4]
 8001ba0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001ba4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001ba8:	d10b      	bne.n	8001bc2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001baa:	4b89      	ldr	r3, [pc, #548]	@ (8001dd0 <HAL_RCC_OscConfig+0x26c>)
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d06c      	beq.n	8001c90 <HAL_RCC_OscConfig+0x12c>
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	685b      	ldr	r3, [r3, #4]
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d168      	bne.n	8001c90 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001bbe:	2301      	movs	r3, #1
 8001bc0:	e24c      	b.n	800205c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	685b      	ldr	r3, [r3, #4]
 8001bc6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001bca:	d106      	bne.n	8001bda <HAL_RCC_OscConfig+0x76>
 8001bcc:	4b80      	ldr	r3, [pc, #512]	@ (8001dd0 <HAL_RCC_OscConfig+0x26c>)
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	4a7f      	ldr	r2, [pc, #508]	@ (8001dd0 <HAL_RCC_OscConfig+0x26c>)
 8001bd2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001bd6:	6013      	str	r3, [r2, #0]
 8001bd8:	e02e      	b.n	8001c38 <HAL_RCC_OscConfig+0xd4>
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	685b      	ldr	r3, [r3, #4]
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d10c      	bne.n	8001bfc <HAL_RCC_OscConfig+0x98>
 8001be2:	4b7b      	ldr	r3, [pc, #492]	@ (8001dd0 <HAL_RCC_OscConfig+0x26c>)
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	4a7a      	ldr	r2, [pc, #488]	@ (8001dd0 <HAL_RCC_OscConfig+0x26c>)
 8001be8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001bec:	6013      	str	r3, [r2, #0]
 8001bee:	4b78      	ldr	r3, [pc, #480]	@ (8001dd0 <HAL_RCC_OscConfig+0x26c>)
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	4a77      	ldr	r2, [pc, #476]	@ (8001dd0 <HAL_RCC_OscConfig+0x26c>)
 8001bf4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001bf8:	6013      	str	r3, [r2, #0]
 8001bfa:	e01d      	b.n	8001c38 <HAL_RCC_OscConfig+0xd4>
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	685b      	ldr	r3, [r3, #4]
 8001c00:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001c04:	d10c      	bne.n	8001c20 <HAL_RCC_OscConfig+0xbc>
 8001c06:	4b72      	ldr	r3, [pc, #456]	@ (8001dd0 <HAL_RCC_OscConfig+0x26c>)
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	4a71      	ldr	r2, [pc, #452]	@ (8001dd0 <HAL_RCC_OscConfig+0x26c>)
 8001c0c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001c10:	6013      	str	r3, [r2, #0]
 8001c12:	4b6f      	ldr	r3, [pc, #444]	@ (8001dd0 <HAL_RCC_OscConfig+0x26c>)
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	4a6e      	ldr	r2, [pc, #440]	@ (8001dd0 <HAL_RCC_OscConfig+0x26c>)
 8001c18:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001c1c:	6013      	str	r3, [r2, #0]
 8001c1e:	e00b      	b.n	8001c38 <HAL_RCC_OscConfig+0xd4>
 8001c20:	4b6b      	ldr	r3, [pc, #428]	@ (8001dd0 <HAL_RCC_OscConfig+0x26c>)
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	4a6a      	ldr	r2, [pc, #424]	@ (8001dd0 <HAL_RCC_OscConfig+0x26c>)
 8001c26:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001c2a:	6013      	str	r3, [r2, #0]
 8001c2c:	4b68      	ldr	r3, [pc, #416]	@ (8001dd0 <HAL_RCC_OscConfig+0x26c>)
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	4a67      	ldr	r2, [pc, #412]	@ (8001dd0 <HAL_RCC_OscConfig+0x26c>)
 8001c32:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001c36:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	685b      	ldr	r3, [r3, #4]
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d013      	beq.n	8001c68 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c40:	f7ff f826 	bl	8000c90 <HAL_GetTick>
 8001c44:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c46:	e008      	b.n	8001c5a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c48:	f7ff f822 	bl	8000c90 <HAL_GetTick>
 8001c4c:	4602      	mov	r2, r0
 8001c4e:	693b      	ldr	r3, [r7, #16]
 8001c50:	1ad3      	subs	r3, r2, r3
 8001c52:	2b64      	cmp	r3, #100	@ 0x64
 8001c54:	d901      	bls.n	8001c5a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001c56:	2303      	movs	r3, #3
 8001c58:	e200      	b.n	800205c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c5a:	4b5d      	ldr	r3, [pc, #372]	@ (8001dd0 <HAL_RCC_OscConfig+0x26c>)
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d0f0      	beq.n	8001c48 <HAL_RCC_OscConfig+0xe4>
 8001c66:	e014      	b.n	8001c92 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c68:	f7ff f812 	bl	8000c90 <HAL_GetTick>
 8001c6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c6e:	e008      	b.n	8001c82 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c70:	f7ff f80e 	bl	8000c90 <HAL_GetTick>
 8001c74:	4602      	mov	r2, r0
 8001c76:	693b      	ldr	r3, [r7, #16]
 8001c78:	1ad3      	subs	r3, r2, r3
 8001c7a:	2b64      	cmp	r3, #100	@ 0x64
 8001c7c:	d901      	bls.n	8001c82 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001c7e:	2303      	movs	r3, #3
 8001c80:	e1ec      	b.n	800205c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c82:	4b53      	ldr	r3, [pc, #332]	@ (8001dd0 <HAL_RCC_OscConfig+0x26c>)
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d1f0      	bne.n	8001c70 <HAL_RCC_OscConfig+0x10c>
 8001c8e:	e000      	b.n	8001c92 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c90:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	f003 0302 	and.w	r3, r3, #2
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d063      	beq.n	8001d66 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001c9e:	4b4c      	ldr	r3, [pc, #304]	@ (8001dd0 <HAL_RCC_OscConfig+0x26c>)
 8001ca0:	685b      	ldr	r3, [r3, #4]
 8001ca2:	f003 030c 	and.w	r3, r3, #12
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d00b      	beq.n	8001cc2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001caa:	4b49      	ldr	r3, [pc, #292]	@ (8001dd0 <HAL_RCC_OscConfig+0x26c>)
 8001cac:	685b      	ldr	r3, [r3, #4]
 8001cae:	f003 030c 	and.w	r3, r3, #12
 8001cb2:	2b08      	cmp	r3, #8
 8001cb4:	d11c      	bne.n	8001cf0 <HAL_RCC_OscConfig+0x18c>
 8001cb6:	4b46      	ldr	r3, [pc, #280]	@ (8001dd0 <HAL_RCC_OscConfig+0x26c>)
 8001cb8:	685b      	ldr	r3, [r3, #4]
 8001cba:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d116      	bne.n	8001cf0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001cc2:	4b43      	ldr	r3, [pc, #268]	@ (8001dd0 <HAL_RCC_OscConfig+0x26c>)
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	f003 0302 	and.w	r3, r3, #2
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d005      	beq.n	8001cda <HAL_RCC_OscConfig+0x176>
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	691b      	ldr	r3, [r3, #16]
 8001cd2:	2b01      	cmp	r3, #1
 8001cd4:	d001      	beq.n	8001cda <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001cd6:	2301      	movs	r3, #1
 8001cd8:	e1c0      	b.n	800205c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001cda:	4b3d      	ldr	r3, [pc, #244]	@ (8001dd0 <HAL_RCC_OscConfig+0x26c>)
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	695b      	ldr	r3, [r3, #20]
 8001ce6:	00db      	lsls	r3, r3, #3
 8001ce8:	4939      	ldr	r1, [pc, #228]	@ (8001dd0 <HAL_RCC_OscConfig+0x26c>)
 8001cea:	4313      	orrs	r3, r2
 8001cec:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001cee:	e03a      	b.n	8001d66 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	691b      	ldr	r3, [r3, #16]
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d020      	beq.n	8001d3a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001cf8:	4b36      	ldr	r3, [pc, #216]	@ (8001dd4 <HAL_RCC_OscConfig+0x270>)
 8001cfa:	2201      	movs	r2, #1
 8001cfc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cfe:	f7fe ffc7 	bl	8000c90 <HAL_GetTick>
 8001d02:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d04:	e008      	b.n	8001d18 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d06:	f7fe ffc3 	bl	8000c90 <HAL_GetTick>
 8001d0a:	4602      	mov	r2, r0
 8001d0c:	693b      	ldr	r3, [r7, #16]
 8001d0e:	1ad3      	subs	r3, r2, r3
 8001d10:	2b02      	cmp	r3, #2
 8001d12:	d901      	bls.n	8001d18 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001d14:	2303      	movs	r3, #3
 8001d16:	e1a1      	b.n	800205c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d18:	4b2d      	ldr	r3, [pc, #180]	@ (8001dd0 <HAL_RCC_OscConfig+0x26c>)
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	f003 0302 	and.w	r3, r3, #2
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d0f0      	beq.n	8001d06 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d24:	4b2a      	ldr	r3, [pc, #168]	@ (8001dd0 <HAL_RCC_OscConfig+0x26c>)
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	695b      	ldr	r3, [r3, #20]
 8001d30:	00db      	lsls	r3, r3, #3
 8001d32:	4927      	ldr	r1, [pc, #156]	@ (8001dd0 <HAL_RCC_OscConfig+0x26c>)
 8001d34:	4313      	orrs	r3, r2
 8001d36:	600b      	str	r3, [r1, #0]
 8001d38:	e015      	b.n	8001d66 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001d3a:	4b26      	ldr	r3, [pc, #152]	@ (8001dd4 <HAL_RCC_OscConfig+0x270>)
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d40:	f7fe ffa6 	bl	8000c90 <HAL_GetTick>
 8001d44:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d46:	e008      	b.n	8001d5a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d48:	f7fe ffa2 	bl	8000c90 <HAL_GetTick>
 8001d4c:	4602      	mov	r2, r0
 8001d4e:	693b      	ldr	r3, [r7, #16]
 8001d50:	1ad3      	subs	r3, r2, r3
 8001d52:	2b02      	cmp	r3, #2
 8001d54:	d901      	bls.n	8001d5a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001d56:	2303      	movs	r3, #3
 8001d58:	e180      	b.n	800205c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d5a:	4b1d      	ldr	r3, [pc, #116]	@ (8001dd0 <HAL_RCC_OscConfig+0x26c>)
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	f003 0302 	and.w	r3, r3, #2
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d1f0      	bne.n	8001d48 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	f003 0308 	and.w	r3, r3, #8
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d03a      	beq.n	8001de8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	699b      	ldr	r3, [r3, #24]
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d019      	beq.n	8001dae <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001d7a:	4b17      	ldr	r3, [pc, #92]	@ (8001dd8 <HAL_RCC_OscConfig+0x274>)
 8001d7c:	2201      	movs	r2, #1
 8001d7e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d80:	f7fe ff86 	bl	8000c90 <HAL_GetTick>
 8001d84:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d86:	e008      	b.n	8001d9a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d88:	f7fe ff82 	bl	8000c90 <HAL_GetTick>
 8001d8c:	4602      	mov	r2, r0
 8001d8e:	693b      	ldr	r3, [r7, #16]
 8001d90:	1ad3      	subs	r3, r2, r3
 8001d92:	2b02      	cmp	r3, #2
 8001d94:	d901      	bls.n	8001d9a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001d96:	2303      	movs	r3, #3
 8001d98:	e160      	b.n	800205c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d9a:	4b0d      	ldr	r3, [pc, #52]	@ (8001dd0 <HAL_RCC_OscConfig+0x26c>)
 8001d9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d9e:	f003 0302 	and.w	r3, r3, #2
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d0f0      	beq.n	8001d88 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001da6:	2001      	movs	r0, #1
 8001da8:	f000 faba 	bl	8002320 <RCC_Delay>
 8001dac:	e01c      	b.n	8001de8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001dae:	4b0a      	ldr	r3, [pc, #40]	@ (8001dd8 <HAL_RCC_OscConfig+0x274>)
 8001db0:	2200      	movs	r2, #0
 8001db2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001db4:	f7fe ff6c 	bl	8000c90 <HAL_GetTick>
 8001db8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001dba:	e00f      	b.n	8001ddc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001dbc:	f7fe ff68 	bl	8000c90 <HAL_GetTick>
 8001dc0:	4602      	mov	r2, r0
 8001dc2:	693b      	ldr	r3, [r7, #16]
 8001dc4:	1ad3      	subs	r3, r2, r3
 8001dc6:	2b02      	cmp	r3, #2
 8001dc8:	d908      	bls.n	8001ddc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001dca:	2303      	movs	r3, #3
 8001dcc:	e146      	b.n	800205c <HAL_RCC_OscConfig+0x4f8>
 8001dce:	bf00      	nop
 8001dd0:	40021000 	.word	0x40021000
 8001dd4:	42420000 	.word	0x42420000
 8001dd8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ddc:	4b92      	ldr	r3, [pc, #584]	@ (8002028 <HAL_RCC_OscConfig+0x4c4>)
 8001dde:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001de0:	f003 0302 	and.w	r3, r3, #2
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d1e9      	bne.n	8001dbc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	f003 0304 	and.w	r3, r3, #4
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	f000 80a6 	beq.w	8001f42 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001df6:	2300      	movs	r3, #0
 8001df8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001dfa:	4b8b      	ldr	r3, [pc, #556]	@ (8002028 <HAL_RCC_OscConfig+0x4c4>)
 8001dfc:	69db      	ldr	r3, [r3, #28]
 8001dfe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d10d      	bne.n	8001e22 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e06:	4b88      	ldr	r3, [pc, #544]	@ (8002028 <HAL_RCC_OscConfig+0x4c4>)
 8001e08:	69db      	ldr	r3, [r3, #28]
 8001e0a:	4a87      	ldr	r2, [pc, #540]	@ (8002028 <HAL_RCC_OscConfig+0x4c4>)
 8001e0c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001e10:	61d3      	str	r3, [r2, #28]
 8001e12:	4b85      	ldr	r3, [pc, #532]	@ (8002028 <HAL_RCC_OscConfig+0x4c4>)
 8001e14:	69db      	ldr	r3, [r3, #28]
 8001e16:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e1a:	60bb      	str	r3, [r7, #8]
 8001e1c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001e1e:	2301      	movs	r3, #1
 8001e20:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e22:	4b82      	ldr	r3, [pc, #520]	@ (800202c <HAL_RCC_OscConfig+0x4c8>)
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d118      	bne.n	8001e60 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001e2e:	4b7f      	ldr	r3, [pc, #508]	@ (800202c <HAL_RCC_OscConfig+0x4c8>)
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	4a7e      	ldr	r2, [pc, #504]	@ (800202c <HAL_RCC_OscConfig+0x4c8>)
 8001e34:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001e38:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001e3a:	f7fe ff29 	bl	8000c90 <HAL_GetTick>
 8001e3e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e40:	e008      	b.n	8001e54 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e42:	f7fe ff25 	bl	8000c90 <HAL_GetTick>
 8001e46:	4602      	mov	r2, r0
 8001e48:	693b      	ldr	r3, [r7, #16]
 8001e4a:	1ad3      	subs	r3, r2, r3
 8001e4c:	2b64      	cmp	r3, #100	@ 0x64
 8001e4e:	d901      	bls.n	8001e54 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001e50:	2303      	movs	r3, #3
 8001e52:	e103      	b.n	800205c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e54:	4b75      	ldr	r3, [pc, #468]	@ (800202c <HAL_RCC_OscConfig+0x4c8>)
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d0f0      	beq.n	8001e42 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	68db      	ldr	r3, [r3, #12]
 8001e64:	2b01      	cmp	r3, #1
 8001e66:	d106      	bne.n	8001e76 <HAL_RCC_OscConfig+0x312>
 8001e68:	4b6f      	ldr	r3, [pc, #444]	@ (8002028 <HAL_RCC_OscConfig+0x4c4>)
 8001e6a:	6a1b      	ldr	r3, [r3, #32]
 8001e6c:	4a6e      	ldr	r2, [pc, #440]	@ (8002028 <HAL_RCC_OscConfig+0x4c4>)
 8001e6e:	f043 0301 	orr.w	r3, r3, #1
 8001e72:	6213      	str	r3, [r2, #32]
 8001e74:	e02d      	b.n	8001ed2 <HAL_RCC_OscConfig+0x36e>
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	68db      	ldr	r3, [r3, #12]
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d10c      	bne.n	8001e98 <HAL_RCC_OscConfig+0x334>
 8001e7e:	4b6a      	ldr	r3, [pc, #424]	@ (8002028 <HAL_RCC_OscConfig+0x4c4>)
 8001e80:	6a1b      	ldr	r3, [r3, #32]
 8001e82:	4a69      	ldr	r2, [pc, #420]	@ (8002028 <HAL_RCC_OscConfig+0x4c4>)
 8001e84:	f023 0301 	bic.w	r3, r3, #1
 8001e88:	6213      	str	r3, [r2, #32]
 8001e8a:	4b67      	ldr	r3, [pc, #412]	@ (8002028 <HAL_RCC_OscConfig+0x4c4>)
 8001e8c:	6a1b      	ldr	r3, [r3, #32]
 8001e8e:	4a66      	ldr	r2, [pc, #408]	@ (8002028 <HAL_RCC_OscConfig+0x4c4>)
 8001e90:	f023 0304 	bic.w	r3, r3, #4
 8001e94:	6213      	str	r3, [r2, #32]
 8001e96:	e01c      	b.n	8001ed2 <HAL_RCC_OscConfig+0x36e>
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	68db      	ldr	r3, [r3, #12]
 8001e9c:	2b05      	cmp	r3, #5
 8001e9e:	d10c      	bne.n	8001eba <HAL_RCC_OscConfig+0x356>
 8001ea0:	4b61      	ldr	r3, [pc, #388]	@ (8002028 <HAL_RCC_OscConfig+0x4c4>)
 8001ea2:	6a1b      	ldr	r3, [r3, #32]
 8001ea4:	4a60      	ldr	r2, [pc, #384]	@ (8002028 <HAL_RCC_OscConfig+0x4c4>)
 8001ea6:	f043 0304 	orr.w	r3, r3, #4
 8001eaa:	6213      	str	r3, [r2, #32]
 8001eac:	4b5e      	ldr	r3, [pc, #376]	@ (8002028 <HAL_RCC_OscConfig+0x4c4>)
 8001eae:	6a1b      	ldr	r3, [r3, #32]
 8001eb0:	4a5d      	ldr	r2, [pc, #372]	@ (8002028 <HAL_RCC_OscConfig+0x4c4>)
 8001eb2:	f043 0301 	orr.w	r3, r3, #1
 8001eb6:	6213      	str	r3, [r2, #32]
 8001eb8:	e00b      	b.n	8001ed2 <HAL_RCC_OscConfig+0x36e>
 8001eba:	4b5b      	ldr	r3, [pc, #364]	@ (8002028 <HAL_RCC_OscConfig+0x4c4>)
 8001ebc:	6a1b      	ldr	r3, [r3, #32]
 8001ebe:	4a5a      	ldr	r2, [pc, #360]	@ (8002028 <HAL_RCC_OscConfig+0x4c4>)
 8001ec0:	f023 0301 	bic.w	r3, r3, #1
 8001ec4:	6213      	str	r3, [r2, #32]
 8001ec6:	4b58      	ldr	r3, [pc, #352]	@ (8002028 <HAL_RCC_OscConfig+0x4c4>)
 8001ec8:	6a1b      	ldr	r3, [r3, #32]
 8001eca:	4a57      	ldr	r2, [pc, #348]	@ (8002028 <HAL_RCC_OscConfig+0x4c4>)
 8001ecc:	f023 0304 	bic.w	r3, r3, #4
 8001ed0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	68db      	ldr	r3, [r3, #12]
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d015      	beq.n	8001f06 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001eda:	f7fe fed9 	bl	8000c90 <HAL_GetTick>
 8001ede:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ee0:	e00a      	b.n	8001ef8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ee2:	f7fe fed5 	bl	8000c90 <HAL_GetTick>
 8001ee6:	4602      	mov	r2, r0
 8001ee8:	693b      	ldr	r3, [r7, #16]
 8001eea:	1ad3      	subs	r3, r2, r3
 8001eec:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001ef0:	4293      	cmp	r3, r2
 8001ef2:	d901      	bls.n	8001ef8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001ef4:	2303      	movs	r3, #3
 8001ef6:	e0b1      	b.n	800205c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ef8:	4b4b      	ldr	r3, [pc, #300]	@ (8002028 <HAL_RCC_OscConfig+0x4c4>)
 8001efa:	6a1b      	ldr	r3, [r3, #32]
 8001efc:	f003 0302 	and.w	r3, r3, #2
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d0ee      	beq.n	8001ee2 <HAL_RCC_OscConfig+0x37e>
 8001f04:	e014      	b.n	8001f30 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f06:	f7fe fec3 	bl	8000c90 <HAL_GetTick>
 8001f0a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f0c:	e00a      	b.n	8001f24 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f0e:	f7fe febf 	bl	8000c90 <HAL_GetTick>
 8001f12:	4602      	mov	r2, r0
 8001f14:	693b      	ldr	r3, [r7, #16]
 8001f16:	1ad3      	subs	r3, r2, r3
 8001f18:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001f1c:	4293      	cmp	r3, r2
 8001f1e:	d901      	bls.n	8001f24 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001f20:	2303      	movs	r3, #3
 8001f22:	e09b      	b.n	800205c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f24:	4b40      	ldr	r3, [pc, #256]	@ (8002028 <HAL_RCC_OscConfig+0x4c4>)
 8001f26:	6a1b      	ldr	r3, [r3, #32]
 8001f28:	f003 0302 	and.w	r3, r3, #2
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d1ee      	bne.n	8001f0e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001f30:	7dfb      	ldrb	r3, [r7, #23]
 8001f32:	2b01      	cmp	r3, #1
 8001f34:	d105      	bne.n	8001f42 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f36:	4b3c      	ldr	r3, [pc, #240]	@ (8002028 <HAL_RCC_OscConfig+0x4c4>)
 8001f38:	69db      	ldr	r3, [r3, #28]
 8001f3a:	4a3b      	ldr	r2, [pc, #236]	@ (8002028 <HAL_RCC_OscConfig+0x4c4>)
 8001f3c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001f40:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	69db      	ldr	r3, [r3, #28]
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	f000 8087 	beq.w	800205a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001f4c:	4b36      	ldr	r3, [pc, #216]	@ (8002028 <HAL_RCC_OscConfig+0x4c4>)
 8001f4e:	685b      	ldr	r3, [r3, #4]
 8001f50:	f003 030c 	and.w	r3, r3, #12
 8001f54:	2b08      	cmp	r3, #8
 8001f56:	d061      	beq.n	800201c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	69db      	ldr	r3, [r3, #28]
 8001f5c:	2b02      	cmp	r3, #2
 8001f5e:	d146      	bne.n	8001fee <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f60:	4b33      	ldr	r3, [pc, #204]	@ (8002030 <HAL_RCC_OscConfig+0x4cc>)
 8001f62:	2200      	movs	r2, #0
 8001f64:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f66:	f7fe fe93 	bl	8000c90 <HAL_GetTick>
 8001f6a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f6c:	e008      	b.n	8001f80 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f6e:	f7fe fe8f 	bl	8000c90 <HAL_GetTick>
 8001f72:	4602      	mov	r2, r0
 8001f74:	693b      	ldr	r3, [r7, #16]
 8001f76:	1ad3      	subs	r3, r2, r3
 8001f78:	2b02      	cmp	r3, #2
 8001f7a:	d901      	bls.n	8001f80 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001f7c:	2303      	movs	r3, #3
 8001f7e:	e06d      	b.n	800205c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f80:	4b29      	ldr	r3, [pc, #164]	@ (8002028 <HAL_RCC_OscConfig+0x4c4>)
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d1f0      	bne.n	8001f6e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	6a1b      	ldr	r3, [r3, #32]
 8001f90:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001f94:	d108      	bne.n	8001fa8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001f96:	4b24      	ldr	r3, [pc, #144]	@ (8002028 <HAL_RCC_OscConfig+0x4c4>)
 8001f98:	685b      	ldr	r3, [r3, #4]
 8001f9a:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	689b      	ldr	r3, [r3, #8]
 8001fa2:	4921      	ldr	r1, [pc, #132]	@ (8002028 <HAL_RCC_OscConfig+0x4c4>)
 8001fa4:	4313      	orrs	r3, r2
 8001fa6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001fa8:	4b1f      	ldr	r3, [pc, #124]	@ (8002028 <HAL_RCC_OscConfig+0x4c4>)
 8001faa:	685b      	ldr	r3, [r3, #4]
 8001fac:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	6a19      	ldr	r1, [r3, #32]
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fb8:	430b      	orrs	r3, r1
 8001fba:	491b      	ldr	r1, [pc, #108]	@ (8002028 <HAL_RCC_OscConfig+0x4c4>)
 8001fbc:	4313      	orrs	r3, r2
 8001fbe:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001fc0:	4b1b      	ldr	r3, [pc, #108]	@ (8002030 <HAL_RCC_OscConfig+0x4cc>)
 8001fc2:	2201      	movs	r2, #1
 8001fc4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fc6:	f7fe fe63 	bl	8000c90 <HAL_GetTick>
 8001fca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001fcc:	e008      	b.n	8001fe0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001fce:	f7fe fe5f 	bl	8000c90 <HAL_GetTick>
 8001fd2:	4602      	mov	r2, r0
 8001fd4:	693b      	ldr	r3, [r7, #16]
 8001fd6:	1ad3      	subs	r3, r2, r3
 8001fd8:	2b02      	cmp	r3, #2
 8001fda:	d901      	bls.n	8001fe0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001fdc:	2303      	movs	r3, #3
 8001fde:	e03d      	b.n	800205c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001fe0:	4b11      	ldr	r3, [pc, #68]	@ (8002028 <HAL_RCC_OscConfig+0x4c4>)
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d0f0      	beq.n	8001fce <HAL_RCC_OscConfig+0x46a>
 8001fec:	e035      	b.n	800205a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001fee:	4b10      	ldr	r3, [pc, #64]	@ (8002030 <HAL_RCC_OscConfig+0x4cc>)
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ff4:	f7fe fe4c 	bl	8000c90 <HAL_GetTick>
 8001ff8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ffa:	e008      	b.n	800200e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ffc:	f7fe fe48 	bl	8000c90 <HAL_GetTick>
 8002000:	4602      	mov	r2, r0
 8002002:	693b      	ldr	r3, [r7, #16]
 8002004:	1ad3      	subs	r3, r2, r3
 8002006:	2b02      	cmp	r3, #2
 8002008:	d901      	bls.n	800200e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800200a:	2303      	movs	r3, #3
 800200c:	e026      	b.n	800205c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800200e:	4b06      	ldr	r3, [pc, #24]	@ (8002028 <HAL_RCC_OscConfig+0x4c4>)
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002016:	2b00      	cmp	r3, #0
 8002018:	d1f0      	bne.n	8001ffc <HAL_RCC_OscConfig+0x498>
 800201a:	e01e      	b.n	800205a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	69db      	ldr	r3, [r3, #28]
 8002020:	2b01      	cmp	r3, #1
 8002022:	d107      	bne.n	8002034 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002024:	2301      	movs	r3, #1
 8002026:	e019      	b.n	800205c <HAL_RCC_OscConfig+0x4f8>
 8002028:	40021000 	.word	0x40021000
 800202c:	40007000 	.word	0x40007000
 8002030:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002034:	4b0b      	ldr	r3, [pc, #44]	@ (8002064 <HAL_RCC_OscConfig+0x500>)
 8002036:	685b      	ldr	r3, [r3, #4]
 8002038:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	6a1b      	ldr	r3, [r3, #32]
 8002044:	429a      	cmp	r2, r3
 8002046:	d106      	bne.n	8002056 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002052:	429a      	cmp	r2, r3
 8002054:	d001      	beq.n	800205a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002056:	2301      	movs	r3, #1
 8002058:	e000      	b.n	800205c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800205a:	2300      	movs	r3, #0
}
 800205c:	4618      	mov	r0, r3
 800205e:	3718      	adds	r7, #24
 8002060:	46bd      	mov	sp, r7
 8002062:	bd80      	pop	{r7, pc}
 8002064:	40021000 	.word	0x40021000

08002068 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002068:	b580      	push	{r7, lr}
 800206a:	b084      	sub	sp, #16
 800206c:	af00      	add	r7, sp, #0
 800206e:	6078      	str	r0, [r7, #4]
 8002070:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	2b00      	cmp	r3, #0
 8002076:	d101      	bne.n	800207c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002078:	2301      	movs	r3, #1
 800207a:	e0d0      	b.n	800221e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800207c:	4b6a      	ldr	r3, [pc, #424]	@ (8002228 <HAL_RCC_ClockConfig+0x1c0>)
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	f003 0307 	and.w	r3, r3, #7
 8002084:	683a      	ldr	r2, [r7, #0]
 8002086:	429a      	cmp	r2, r3
 8002088:	d910      	bls.n	80020ac <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800208a:	4b67      	ldr	r3, [pc, #412]	@ (8002228 <HAL_RCC_ClockConfig+0x1c0>)
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	f023 0207 	bic.w	r2, r3, #7
 8002092:	4965      	ldr	r1, [pc, #404]	@ (8002228 <HAL_RCC_ClockConfig+0x1c0>)
 8002094:	683b      	ldr	r3, [r7, #0]
 8002096:	4313      	orrs	r3, r2
 8002098:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800209a:	4b63      	ldr	r3, [pc, #396]	@ (8002228 <HAL_RCC_ClockConfig+0x1c0>)
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	f003 0307 	and.w	r3, r3, #7
 80020a2:	683a      	ldr	r2, [r7, #0]
 80020a4:	429a      	cmp	r2, r3
 80020a6:	d001      	beq.n	80020ac <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80020a8:	2301      	movs	r3, #1
 80020aa:	e0b8      	b.n	800221e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	f003 0302 	and.w	r3, r3, #2
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d020      	beq.n	80020fa <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	f003 0304 	and.w	r3, r3, #4
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d005      	beq.n	80020d0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80020c4:	4b59      	ldr	r3, [pc, #356]	@ (800222c <HAL_RCC_ClockConfig+0x1c4>)
 80020c6:	685b      	ldr	r3, [r3, #4]
 80020c8:	4a58      	ldr	r2, [pc, #352]	@ (800222c <HAL_RCC_ClockConfig+0x1c4>)
 80020ca:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80020ce:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	f003 0308 	and.w	r3, r3, #8
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d005      	beq.n	80020e8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80020dc:	4b53      	ldr	r3, [pc, #332]	@ (800222c <HAL_RCC_ClockConfig+0x1c4>)
 80020de:	685b      	ldr	r3, [r3, #4]
 80020e0:	4a52      	ldr	r2, [pc, #328]	@ (800222c <HAL_RCC_ClockConfig+0x1c4>)
 80020e2:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80020e6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80020e8:	4b50      	ldr	r3, [pc, #320]	@ (800222c <HAL_RCC_ClockConfig+0x1c4>)
 80020ea:	685b      	ldr	r3, [r3, #4]
 80020ec:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	689b      	ldr	r3, [r3, #8]
 80020f4:	494d      	ldr	r1, [pc, #308]	@ (800222c <HAL_RCC_ClockConfig+0x1c4>)
 80020f6:	4313      	orrs	r3, r2
 80020f8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	f003 0301 	and.w	r3, r3, #1
 8002102:	2b00      	cmp	r3, #0
 8002104:	d040      	beq.n	8002188 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	685b      	ldr	r3, [r3, #4]
 800210a:	2b01      	cmp	r3, #1
 800210c:	d107      	bne.n	800211e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800210e:	4b47      	ldr	r3, [pc, #284]	@ (800222c <HAL_RCC_ClockConfig+0x1c4>)
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002116:	2b00      	cmp	r3, #0
 8002118:	d115      	bne.n	8002146 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800211a:	2301      	movs	r3, #1
 800211c:	e07f      	b.n	800221e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	685b      	ldr	r3, [r3, #4]
 8002122:	2b02      	cmp	r3, #2
 8002124:	d107      	bne.n	8002136 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002126:	4b41      	ldr	r3, [pc, #260]	@ (800222c <HAL_RCC_ClockConfig+0x1c4>)
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800212e:	2b00      	cmp	r3, #0
 8002130:	d109      	bne.n	8002146 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002132:	2301      	movs	r3, #1
 8002134:	e073      	b.n	800221e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002136:	4b3d      	ldr	r3, [pc, #244]	@ (800222c <HAL_RCC_ClockConfig+0x1c4>)
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	f003 0302 	and.w	r3, r3, #2
 800213e:	2b00      	cmp	r3, #0
 8002140:	d101      	bne.n	8002146 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002142:	2301      	movs	r3, #1
 8002144:	e06b      	b.n	800221e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002146:	4b39      	ldr	r3, [pc, #228]	@ (800222c <HAL_RCC_ClockConfig+0x1c4>)
 8002148:	685b      	ldr	r3, [r3, #4]
 800214a:	f023 0203 	bic.w	r2, r3, #3
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	685b      	ldr	r3, [r3, #4]
 8002152:	4936      	ldr	r1, [pc, #216]	@ (800222c <HAL_RCC_ClockConfig+0x1c4>)
 8002154:	4313      	orrs	r3, r2
 8002156:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002158:	f7fe fd9a 	bl	8000c90 <HAL_GetTick>
 800215c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800215e:	e00a      	b.n	8002176 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002160:	f7fe fd96 	bl	8000c90 <HAL_GetTick>
 8002164:	4602      	mov	r2, r0
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	1ad3      	subs	r3, r2, r3
 800216a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800216e:	4293      	cmp	r3, r2
 8002170:	d901      	bls.n	8002176 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002172:	2303      	movs	r3, #3
 8002174:	e053      	b.n	800221e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002176:	4b2d      	ldr	r3, [pc, #180]	@ (800222c <HAL_RCC_ClockConfig+0x1c4>)
 8002178:	685b      	ldr	r3, [r3, #4]
 800217a:	f003 020c 	and.w	r2, r3, #12
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	685b      	ldr	r3, [r3, #4]
 8002182:	009b      	lsls	r3, r3, #2
 8002184:	429a      	cmp	r2, r3
 8002186:	d1eb      	bne.n	8002160 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002188:	4b27      	ldr	r3, [pc, #156]	@ (8002228 <HAL_RCC_ClockConfig+0x1c0>)
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	f003 0307 	and.w	r3, r3, #7
 8002190:	683a      	ldr	r2, [r7, #0]
 8002192:	429a      	cmp	r2, r3
 8002194:	d210      	bcs.n	80021b8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002196:	4b24      	ldr	r3, [pc, #144]	@ (8002228 <HAL_RCC_ClockConfig+0x1c0>)
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	f023 0207 	bic.w	r2, r3, #7
 800219e:	4922      	ldr	r1, [pc, #136]	@ (8002228 <HAL_RCC_ClockConfig+0x1c0>)
 80021a0:	683b      	ldr	r3, [r7, #0]
 80021a2:	4313      	orrs	r3, r2
 80021a4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80021a6:	4b20      	ldr	r3, [pc, #128]	@ (8002228 <HAL_RCC_ClockConfig+0x1c0>)
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	f003 0307 	and.w	r3, r3, #7
 80021ae:	683a      	ldr	r2, [r7, #0]
 80021b0:	429a      	cmp	r2, r3
 80021b2:	d001      	beq.n	80021b8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80021b4:	2301      	movs	r3, #1
 80021b6:	e032      	b.n	800221e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	f003 0304 	and.w	r3, r3, #4
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d008      	beq.n	80021d6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80021c4:	4b19      	ldr	r3, [pc, #100]	@ (800222c <HAL_RCC_ClockConfig+0x1c4>)
 80021c6:	685b      	ldr	r3, [r3, #4]
 80021c8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	68db      	ldr	r3, [r3, #12]
 80021d0:	4916      	ldr	r1, [pc, #88]	@ (800222c <HAL_RCC_ClockConfig+0x1c4>)
 80021d2:	4313      	orrs	r3, r2
 80021d4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f003 0308 	and.w	r3, r3, #8
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d009      	beq.n	80021f6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80021e2:	4b12      	ldr	r3, [pc, #72]	@ (800222c <HAL_RCC_ClockConfig+0x1c4>)
 80021e4:	685b      	ldr	r3, [r3, #4]
 80021e6:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	691b      	ldr	r3, [r3, #16]
 80021ee:	00db      	lsls	r3, r3, #3
 80021f0:	490e      	ldr	r1, [pc, #56]	@ (800222c <HAL_RCC_ClockConfig+0x1c4>)
 80021f2:	4313      	orrs	r3, r2
 80021f4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80021f6:	f000 f821 	bl	800223c <HAL_RCC_GetSysClockFreq>
 80021fa:	4602      	mov	r2, r0
 80021fc:	4b0b      	ldr	r3, [pc, #44]	@ (800222c <HAL_RCC_ClockConfig+0x1c4>)
 80021fe:	685b      	ldr	r3, [r3, #4]
 8002200:	091b      	lsrs	r3, r3, #4
 8002202:	f003 030f 	and.w	r3, r3, #15
 8002206:	490a      	ldr	r1, [pc, #40]	@ (8002230 <HAL_RCC_ClockConfig+0x1c8>)
 8002208:	5ccb      	ldrb	r3, [r1, r3]
 800220a:	fa22 f303 	lsr.w	r3, r2, r3
 800220e:	4a09      	ldr	r2, [pc, #36]	@ (8002234 <HAL_RCC_ClockConfig+0x1cc>)
 8002210:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002212:	4b09      	ldr	r3, [pc, #36]	@ (8002238 <HAL_RCC_ClockConfig+0x1d0>)
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	4618      	mov	r0, r3
 8002218:	f7fe fcf8 	bl	8000c0c <HAL_InitTick>

  return HAL_OK;
 800221c:	2300      	movs	r3, #0
}
 800221e:	4618      	mov	r0, r3
 8002220:	3710      	adds	r7, #16
 8002222:	46bd      	mov	sp, r7
 8002224:	bd80      	pop	{r7, pc}
 8002226:	bf00      	nop
 8002228:	40022000 	.word	0x40022000
 800222c:	40021000 	.word	0x40021000
 8002230:	080031e0 	.word	0x080031e0
 8002234:	20000008 	.word	0x20000008
 8002238:	2000000c 	.word	0x2000000c

0800223c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800223c:	b480      	push	{r7}
 800223e:	b087      	sub	sp, #28
 8002240:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002242:	2300      	movs	r3, #0
 8002244:	60fb      	str	r3, [r7, #12]
 8002246:	2300      	movs	r3, #0
 8002248:	60bb      	str	r3, [r7, #8]
 800224a:	2300      	movs	r3, #0
 800224c:	617b      	str	r3, [r7, #20]
 800224e:	2300      	movs	r3, #0
 8002250:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002252:	2300      	movs	r3, #0
 8002254:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002256:	4b1e      	ldr	r3, [pc, #120]	@ (80022d0 <HAL_RCC_GetSysClockFreq+0x94>)
 8002258:	685b      	ldr	r3, [r3, #4]
 800225a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	f003 030c 	and.w	r3, r3, #12
 8002262:	2b04      	cmp	r3, #4
 8002264:	d002      	beq.n	800226c <HAL_RCC_GetSysClockFreq+0x30>
 8002266:	2b08      	cmp	r3, #8
 8002268:	d003      	beq.n	8002272 <HAL_RCC_GetSysClockFreq+0x36>
 800226a:	e027      	b.n	80022bc <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800226c:	4b19      	ldr	r3, [pc, #100]	@ (80022d4 <HAL_RCC_GetSysClockFreq+0x98>)
 800226e:	613b      	str	r3, [r7, #16]
      break;
 8002270:	e027      	b.n	80022c2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	0c9b      	lsrs	r3, r3, #18
 8002276:	f003 030f 	and.w	r3, r3, #15
 800227a:	4a17      	ldr	r2, [pc, #92]	@ (80022d8 <HAL_RCC_GetSysClockFreq+0x9c>)
 800227c:	5cd3      	ldrb	r3, [r2, r3]
 800227e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002286:	2b00      	cmp	r3, #0
 8002288:	d010      	beq.n	80022ac <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800228a:	4b11      	ldr	r3, [pc, #68]	@ (80022d0 <HAL_RCC_GetSysClockFreq+0x94>)
 800228c:	685b      	ldr	r3, [r3, #4]
 800228e:	0c5b      	lsrs	r3, r3, #17
 8002290:	f003 0301 	and.w	r3, r3, #1
 8002294:	4a11      	ldr	r2, [pc, #68]	@ (80022dc <HAL_RCC_GetSysClockFreq+0xa0>)
 8002296:	5cd3      	ldrb	r3, [r2, r3]
 8002298:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	4a0d      	ldr	r2, [pc, #52]	@ (80022d4 <HAL_RCC_GetSysClockFreq+0x98>)
 800229e:	fb03 f202 	mul.w	r2, r3, r2
 80022a2:	68bb      	ldr	r3, [r7, #8]
 80022a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80022a8:	617b      	str	r3, [r7, #20]
 80022aa:	e004      	b.n	80022b6 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	4a0c      	ldr	r2, [pc, #48]	@ (80022e0 <HAL_RCC_GetSysClockFreq+0xa4>)
 80022b0:	fb02 f303 	mul.w	r3, r2, r3
 80022b4:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80022b6:	697b      	ldr	r3, [r7, #20]
 80022b8:	613b      	str	r3, [r7, #16]
      break;
 80022ba:	e002      	b.n	80022c2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80022bc:	4b05      	ldr	r3, [pc, #20]	@ (80022d4 <HAL_RCC_GetSysClockFreq+0x98>)
 80022be:	613b      	str	r3, [r7, #16]
      break;
 80022c0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80022c2:	693b      	ldr	r3, [r7, #16]
}
 80022c4:	4618      	mov	r0, r3
 80022c6:	371c      	adds	r7, #28
 80022c8:	46bd      	mov	sp, r7
 80022ca:	bc80      	pop	{r7}
 80022cc:	4770      	bx	lr
 80022ce:	bf00      	nop
 80022d0:	40021000 	.word	0x40021000
 80022d4:	007a1200 	.word	0x007a1200
 80022d8:	080031f8 	.word	0x080031f8
 80022dc:	08003208 	.word	0x08003208
 80022e0:	003d0900 	.word	0x003d0900

080022e4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80022e4:	b480      	push	{r7}
 80022e6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80022e8:	4b02      	ldr	r3, [pc, #8]	@ (80022f4 <HAL_RCC_GetHCLKFreq+0x10>)
 80022ea:	681b      	ldr	r3, [r3, #0]
}
 80022ec:	4618      	mov	r0, r3
 80022ee:	46bd      	mov	sp, r7
 80022f0:	bc80      	pop	{r7}
 80022f2:	4770      	bx	lr
 80022f4:	20000008 	.word	0x20000008

080022f8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80022f8:	b580      	push	{r7, lr}
 80022fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80022fc:	f7ff fff2 	bl	80022e4 <HAL_RCC_GetHCLKFreq>
 8002300:	4602      	mov	r2, r0
 8002302:	4b05      	ldr	r3, [pc, #20]	@ (8002318 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002304:	685b      	ldr	r3, [r3, #4]
 8002306:	0adb      	lsrs	r3, r3, #11
 8002308:	f003 0307 	and.w	r3, r3, #7
 800230c:	4903      	ldr	r1, [pc, #12]	@ (800231c <HAL_RCC_GetPCLK2Freq+0x24>)
 800230e:	5ccb      	ldrb	r3, [r1, r3]
 8002310:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002314:	4618      	mov	r0, r3
 8002316:	bd80      	pop	{r7, pc}
 8002318:	40021000 	.word	0x40021000
 800231c:	080031f0 	.word	0x080031f0

08002320 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002320:	b480      	push	{r7}
 8002322:	b085      	sub	sp, #20
 8002324:	af00      	add	r7, sp, #0
 8002326:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002328:	4b0a      	ldr	r3, [pc, #40]	@ (8002354 <RCC_Delay+0x34>)
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	4a0a      	ldr	r2, [pc, #40]	@ (8002358 <RCC_Delay+0x38>)
 800232e:	fba2 2303 	umull	r2, r3, r2, r3
 8002332:	0a5b      	lsrs	r3, r3, #9
 8002334:	687a      	ldr	r2, [r7, #4]
 8002336:	fb02 f303 	mul.w	r3, r2, r3
 800233a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800233c:	bf00      	nop
  }
  while (Delay --);
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	1e5a      	subs	r2, r3, #1
 8002342:	60fa      	str	r2, [r7, #12]
 8002344:	2b00      	cmp	r3, #0
 8002346:	d1f9      	bne.n	800233c <RCC_Delay+0x1c>
}
 8002348:	bf00      	nop
 800234a:	bf00      	nop
 800234c:	3714      	adds	r7, #20
 800234e:	46bd      	mov	sp, r7
 8002350:	bc80      	pop	{r7}
 8002352:	4770      	bx	lr
 8002354:	20000008 	.word	0x20000008
 8002358:	10624dd3 	.word	0x10624dd3

0800235c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800235c:	b580      	push	{r7, lr}
 800235e:	b086      	sub	sp, #24
 8002360:	af00      	add	r7, sp, #0
 8002362:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8002364:	2300      	movs	r3, #0
 8002366:	613b      	str	r3, [r7, #16]
 8002368:	2300      	movs	r3, #0
 800236a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	f003 0301 	and.w	r3, r3, #1
 8002374:	2b00      	cmp	r3, #0
 8002376:	d07d      	beq.n	8002474 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8002378:	2300      	movs	r3, #0
 800237a:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800237c:	4b4f      	ldr	r3, [pc, #316]	@ (80024bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800237e:	69db      	ldr	r3, [r3, #28]
 8002380:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002384:	2b00      	cmp	r3, #0
 8002386:	d10d      	bne.n	80023a4 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002388:	4b4c      	ldr	r3, [pc, #304]	@ (80024bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800238a:	69db      	ldr	r3, [r3, #28]
 800238c:	4a4b      	ldr	r2, [pc, #300]	@ (80024bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800238e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002392:	61d3      	str	r3, [r2, #28]
 8002394:	4b49      	ldr	r3, [pc, #292]	@ (80024bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002396:	69db      	ldr	r3, [r3, #28]
 8002398:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800239c:	60bb      	str	r3, [r7, #8]
 800239e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80023a0:	2301      	movs	r3, #1
 80023a2:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023a4:	4b46      	ldr	r3, [pc, #280]	@ (80024c0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d118      	bne.n	80023e2 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80023b0:	4b43      	ldr	r3, [pc, #268]	@ (80024c0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	4a42      	ldr	r2, [pc, #264]	@ (80024c0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80023b6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80023ba:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80023bc:	f7fe fc68 	bl	8000c90 <HAL_GetTick>
 80023c0:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023c2:	e008      	b.n	80023d6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80023c4:	f7fe fc64 	bl	8000c90 <HAL_GetTick>
 80023c8:	4602      	mov	r2, r0
 80023ca:	693b      	ldr	r3, [r7, #16]
 80023cc:	1ad3      	subs	r3, r2, r3
 80023ce:	2b64      	cmp	r3, #100	@ 0x64
 80023d0:	d901      	bls.n	80023d6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80023d2:	2303      	movs	r3, #3
 80023d4:	e06d      	b.n	80024b2 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023d6:	4b3a      	ldr	r3, [pc, #232]	@ (80024c0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d0f0      	beq.n	80023c4 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80023e2:	4b36      	ldr	r3, [pc, #216]	@ (80024bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80023e4:	6a1b      	ldr	r3, [r3, #32]
 80023e6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80023ea:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d02e      	beq.n	8002450 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	685b      	ldr	r3, [r3, #4]
 80023f6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80023fa:	68fa      	ldr	r2, [r7, #12]
 80023fc:	429a      	cmp	r2, r3
 80023fe:	d027      	beq.n	8002450 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002400:	4b2e      	ldr	r3, [pc, #184]	@ (80024bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002402:	6a1b      	ldr	r3, [r3, #32]
 8002404:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002408:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800240a:	4b2e      	ldr	r3, [pc, #184]	@ (80024c4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800240c:	2201      	movs	r2, #1
 800240e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002410:	4b2c      	ldr	r3, [pc, #176]	@ (80024c4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002412:	2200      	movs	r2, #0
 8002414:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002416:	4a29      	ldr	r2, [pc, #164]	@ (80024bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	f003 0301 	and.w	r3, r3, #1
 8002422:	2b00      	cmp	r3, #0
 8002424:	d014      	beq.n	8002450 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002426:	f7fe fc33 	bl	8000c90 <HAL_GetTick>
 800242a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800242c:	e00a      	b.n	8002444 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800242e:	f7fe fc2f 	bl	8000c90 <HAL_GetTick>
 8002432:	4602      	mov	r2, r0
 8002434:	693b      	ldr	r3, [r7, #16]
 8002436:	1ad3      	subs	r3, r2, r3
 8002438:	f241 3288 	movw	r2, #5000	@ 0x1388
 800243c:	4293      	cmp	r3, r2
 800243e:	d901      	bls.n	8002444 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002440:	2303      	movs	r3, #3
 8002442:	e036      	b.n	80024b2 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002444:	4b1d      	ldr	r3, [pc, #116]	@ (80024bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002446:	6a1b      	ldr	r3, [r3, #32]
 8002448:	f003 0302 	and.w	r3, r3, #2
 800244c:	2b00      	cmp	r3, #0
 800244e:	d0ee      	beq.n	800242e <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002450:	4b1a      	ldr	r3, [pc, #104]	@ (80024bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002452:	6a1b      	ldr	r3, [r3, #32]
 8002454:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	685b      	ldr	r3, [r3, #4]
 800245c:	4917      	ldr	r1, [pc, #92]	@ (80024bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800245e:	4313      	orrs	r3, r2
 8002460:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002462:	7dfb      	ldrb	r3, [r7, #23]
 8002464:	2b01      	cmp	r3, #1
 8002466:	d105      	bne.n	8002474 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002468:	4b14      	ldr	r3, [pc, #80]	@ (80024bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800246a:	69db      	ldr	r3, [r3, #28]
 800246c:	4a13      	ldr	r2, [pc, #76]	@ (80024bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800246e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002472:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	f003 0302 	and.w	r3, r3, #2
 800247c:	2b00      	cmp	r3, #0
 800247e:	d008      	beq.n	8002492 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002480:	4b0e      	ldr	r3, [pc, #56]	@ (80024bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002482:	685b      	ldr	r3, [r3, #4]
 8002484:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	689b      	ldr	r3, [r3, #8]
 800248c:	490b      	ldr	r1, [pc, #44]	@ (80024bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800248e:	4313      	orrs	r3, r2
 8002490:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	f003 0310 	and.w	r3, r3, #16
 800249a:	2b00      	cmp	r3, #0
 800249c:	d008      	beq.n	80024b0 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800249e:	4b07      	ldr	r3, [pc, #28]	@ (80024bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80024a0:	685b      	ldr	r3, [r3, #4]
 80024a2:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	68db      	ldr	r3, [r3, #12]
 80024aa:	4904      	ldr	r1, [pc, #16]	@ (80024bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80024ac:	4313      	orrs	r3, r2
 80024ae:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80024b0:	2300      	movs	r3, #0
}
 80024b2:	4618      	mov	r0, r3
 80024b4:	3718      	adds	r7, #24
 80024b6:	46bd      	mov	sp, r7
 80024b8:	bd80      	pop	{r7, pc}
 80024ba:	bf00      	nop
 80024bc:	40021000 	.word	0x40021000
 80024c0:	40007000 	.word	0x40007000
 80024c4:	42420440 	.word	0x42420440

080024c8 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80024c8:	b580      	push	{r7, lr}
 80024ca:	b088      	sub	sp, #32
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 80024d0:	2300      	movs	r3, #0
 80024d2:	617b      	str	r3, [r7, #20]
 80024d4:	2300      	movs	r3, #0
 80024d6:	61fb      	str	r3, [r7, #28]
 80024d8:	2300      	movs	r3, #0
 80024da:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 80024dc:	2300      	movs	r3, #0
 80024de:	60fb      	str	r3, [r7, #12]
 80024e0:	2300      	movs	r3, #0
 80024e2:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	2b10      	cmp	r3, #16
 80024e8:	d00a      	beq.n	8002500 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	2b10      	cmp	r3, #16
 80024ee:	f200 808a 	bhi.w	8002606 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	2b01      	cmp	r3, #1
 80024f6:	d045      	beq.n	8002584 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	2b02      	cmp	r3, #2
 80024fc:	d075      	beq.n	80025ea <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 80024fe:	e082      	b.n	8002606 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 8002500:	4b46      	ldr	r3, [pc, #280]	@ (800261c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002502:	685b      	ldr	r3, [r3, #4]
 8002504:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8002506:	4b45      	ldr	r3, [pc, #276]	@ (800261c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800250e:	2b00      	cmp	r3, #0
 8002510:	d07b      	beq.n	800260a <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	0c9b      	lsrs	r3, r3, #18
 8002516:	f003 030f 	and.w	r3, r3, #15
 800251a:	4a41      	ldr	r2, [pc, #260]	@ (8002620 <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 800251c:	5cd3      	ldrb	r3, [r2, r3]
 800251e:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002526:	2b00      	cmp	r3, #0
 8002528:	d015      	beq.n	8002556 <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800252a:	4b3c      	ldr	r3, [pc, #240]	@ (800261c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800252c:	685b      	ldr	r3, [r3, #4]
 800252e:	0c5b      	lsrs	r3, r3, #17
 8002530:	f003 0301 	and.w	r3, r3, #1
 8002534:	4a3b      	ldr	r2, [pc, #236]	@ (8002624 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 8002536:	5cd3      	ldrb	r3, [r2, r3]
 8002538:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002540:	2b00      	cmp	r3, #0
 8002542:	d00d      	beq.n	8002560 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8002544:	4a38      	ldr	r2, [pc, #224]	@ (8002628 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 8002546:	697b      	ldr	r3, [r7, #20]
 8002548:	fbb2 f2f3 	udiv	r2, r2, r3
 800254c:	693b      	ldr	r3, [r7, #16]
 800254e:	fb02 f303 	mul.w	r3, r2, r3
 8002552:	61fb      	str	r3, [r7, #28]
 8002554:	e004      	b.n	8002560 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002556:	693b      	ldr	r3, [r7, #16]
 8002558:	4a34      	ldr	r2, [pc, #208]	@ (800262c <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 800255a:	fb02 f303 	mul.w	r3, r2, r3
 800255e:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8002560:	4b2e      	ldr	r3, [pc, #184]	@ (800261c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002562:	685b      	ldr	r3, [r3, #4]
 8002564:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002568:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800256c:	d102      	bne.n	8002574 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 800256e:	69fb      	ldr	r3, [r7, #28]
 8002570:	61bb      	str	r3, [r7, #24]
      break;
 8002572:	e04a      	b.n	800260a <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 8002574:	69fb      	ldr	r3, [r7, #28]
 8002576:	005b      	lsls	r3, r3, #1
 8002578:	4a2d      	ldr	r2, [pc, #180]	@ (8002630 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 800257a:	fba2 2303 	umull	r2, r3, r2, r3
 800257e:	085b      	lsrs	r3, r3, #1
 8002580:	61bb      	str	r3, [r7, #24]
      break;
 8002582:	e042      	b.n	800260a <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 8002584:	4b25      	ldr	r3, [pc, #148]	@ (800261c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002586:	6a1b      	ldr	r3, [r3, #32]
 8002588:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002590:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002594:	d108      	bne.n	80025a8 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	f003 0302 	and.w	r3, r3, #2
 800259c:	2b00      	cmp	r3, #0
 800259e:	d003      	beq.n	80025a8 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 80025a0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80025a4:	61bb      	str	r3, [r7, #24]
 80025a6:	e01f      	b.n	80025e8 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80025ae:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80025b2:	d109      	bne.n	80025c8 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 80025b4:	4b19      	ldr	r3, [pc, #100]	@ (800261c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80025b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025b8:	f003 0302 	and.w	r3, r3, #2
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d003      	beq.n	80025c8 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 80025c0:	f649 4340 	movw	r3, #40000	@ 0x9c40
 80025c4:	61bb      	str	r3, [r7, #24]
 80025c6:	e00f      	b.n	80025e8 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80025ce:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80025d2:	d11c      	bne.n	800260e <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 80025d4:	4b11      	ldr	r3, [pc, #68]	@ (800261c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d016      	beq.n	800260e <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 80025e0:	f24f 4324 	movw	r3, #62500	@ 0xf424
 80025e4:	61bb      	str	r3, [r7, #24]
      break;
 80025e6:	e012      	b.n	800260e <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 80025e8:	e011      	b.n	800260e <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 80025ea:	f7ff fe85 	bl	80022f8 <HAL_RCC_GetPCLK2Freq>
 80025ee:	4602      	mov	r2, r0
 80025f0:	4b0a      	ldr	r3, [pc, #40]	@ (800261c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80025f2:	685b      	ldr	r3, [r3, #4]
 80025f4:	0b9b      	lsrs	r3, r3, #14
 80025f6:	f003 0303 	and.w	r3, r3, #3
 80025fa:	3301      	adds	r3, #1
 80025fc:	005b      	lsls	r3, r3, #1
 80025fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8002602:	61bb      	str	r3, [r7, #24]
      break;
 8002604:	e004      	b.n	8002610 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8002606:	bf00      	nop
 8002608:	e002      	b.n	8002610 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 800260a:	bf00      	nop
 800260c:	e000      	b.n	8002610 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 800260e:	bf00      	nop
    }
  }
  return (frequency);
 8002610:	69bb      	ldr	r3, [r7, #24]
}
 8002612:	4618      	mov	r0, r3
 8002614:	3720      	adds	r7, #32
 8002616:	46bd      	mov	sp, r7
 8002618:	bd80      	pop	{r7, pc}
 800261a:	bf00      	nop
 800261c:	40021000 	.word	0x40021000
 8002620:	0800320c 	.word	0x0800320c
 8002624:	0800321c 	.word	0x0800321c
 8002628:	007a1200 	.word	0x007a1200
 800262c:	003d0900 	.word	0x003d0900
 8002630:	aaaaaaab 	.word	0xaaaaaaab

08002634 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002634:	b580      	push	{r7, lr}
 8002636:	b082      	sub	sp, #8
 8002638:	af00      	add	r7, sp, #0
 800263a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	2b00      	cmp	r3, #0
 8002640:	d101      	bne.n	8002646 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002642:	2301      	movs	r3, #1
 8002644:	e076      	b.n	8002734 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800264a:	2b00      	cmp	r3, #0
 800264c:	d108      	bne.n	8002660 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	685b      	ldr	r3, [r3, #4]
 8002652:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002656:	d009      	beq.n	800266c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	2200      	movs	r2, #0
 800265c:	61da      	str	r2, [r3, #28]
 800265e:	e005      	b.n	800266c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	2200      	movs	r2, #0
 8002664:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	2200      	movs	r2, #0
 800266a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	2200      	movs	r2, #0
 8002670:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002678:	b2db      	uxtb	r3, r3
 800267a:	2b00      	cmp	r3, #0
 800267c:	d106      	bne.n	800268c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	2200      	movs	r2, #0
 8002682:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002686:	6878      	ldr	r0, [r7, #4]
 8002688:	f7fe fa00 	bl	8000a8c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	2202      	movs	r2, #2
 8002690:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	681a      	ldr	r2, [r3, #0]
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80026a2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	685b      	ldr	r3, [r3, #4]
 80026a8:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	689b      	ldr	r3, [r3, #8]
 80026b0:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80026b4:	431a      	orrs	r2, r3
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	68db      	ldr	r3, [r3, #12]
 80026ba:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80026be:	431a      	orrs	r2, r3
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	691b      	ldr	r3, [r3, #16]
 80026c4:	f003 0302 	and.w	r3, r3, #2
 80026c8:	431a      	orrs	r2, r3
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	695b      	ldr	r3, [r3, #20]
 80026ce:	f003 0301 	and.w	r3, r3, #1
 80026d2:	431a      	orrs	r2, r3
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	699b      	ldr	r3, [r3, #24]
 80026d8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80026dc:	431a      	orrs	r2, r3
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	69db      	ldr	r3, [r3, #28]
 80026e2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80026e6:	431a      	orrs	r2, r3
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	6a1b      	ldr	r3, [r3, #32]
 80026ec:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80026f0:	ea42 0103 	orr.w	r1, r2, r3
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80026f8:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	430a      	orrs	r2, r1
 8002702:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	699b      	ldr	r3, [r3, #24]
 8002708:	0c1a      	lsrs	r2, r3, #16
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	f002 0204 	and.w	r2, r2, #4
 8002712:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	69da      	ldr	r2, [r3, #28]
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002722:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	2200      	movs	r2, #0
 8002728:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	2201      	movs	r2, #1
 800272e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8002732:	2300      	movs	r3, #0
}
 8002734:	4618      	mov	r0, r3
 8002736:	3708      	adds	r7, #8
 8002738:	46bd      	mov	sp, r7
 800273a:	bd80      	pop	{r7, pc}

0800273c <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800273c:	b580      	push	{r7, lr}
 800273e:	b088      	sub	sp, #32
 8002740:	af00      	add	r7, sp, #0
 8002742:	60f8      	str	r0, [r7, #12]
 8002744:	60b9      	str	r1, [r7, #8]
 8002746:	603b      	str	r3, [r7, #0]
 8002748:	4613      	mov	r3, r2
 800274a:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800274c:	f7fe faa0 	bl	8000c90 <HAL_GetTick>
 8002750:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8002752:	88fb      	ldrh	r3, [r7, #6]
 8002754:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800275c:	b2db      	uxtb	r3, r3
 800275e:	2b01      	cmp	r3, #1
 8002760:	d001      	beq.n	8002766 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8002762:	2302      	movs	r3, #2
 8002764:	e12a      	b.n	80029bc <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8002766:	68bb      	ldr	r3, [r7, #8]
 8002768:	2b00      	cmp	r3, #0
 800276a:	d002      	beq.n	8002772 <HAL_SPI_Transmit+0x36>
 800276c:	88fb      	ldrh	r3, [r7, #6]
 800276e:	2b00      	cmp	r3, #0
 8002770:	d101      	bne.n	8002776 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8002772:	2301      	movs	r3, #1
 8002774:	e122      	b.n	80029bc <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800277c:	2b01      	cmp	r3, #1
 800277e:	d101      	bne.n	8002784 <HAL_SPI_Transmit+0x48>
 8002780:	2302      	movs	r3, #2
 8002782:	e11b      	b.n	80029bc <HAL_SPI_Transmit+0x280>
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	2201      	movs	r2, #1
 8002788:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	2203      	movs	r2, #3
 8002790:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	2200      	movs	r2, #0
 8002798:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	68ba      	ldr	r2, [r7, #8]
 800279e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	88fa      	ldrh	r2, [r7, #6]
 80027a4:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	88fa      	ldrh	r2, [r7, #6]
 80027aa:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	2200      	movs	r2, #0
 80027b0:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	2200      	movs	r2, #0
 80027b6:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	2200      	movs	r2, #0
 80027bc:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	2200      	movs	r2, #0
 80027c2:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	2200      	movs	r2, #0
 80027c8:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	689b      	ldr	r3, [r3, #8]
 80027ce:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80027d2:	d10f      	bne.n	80027f4 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	681a      	ldr	r2, [r3, #0]
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80027e2:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	681a      	ldr	r2, [r3, #0]
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80027f2:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80027fe:	2b40      	cmp	r3, #64	@ 0x40
 8002800:	d007      	beq.n	8002812 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	681a      	ldr	r2, [r3, #0]
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002810:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	68db      	ldr	r3, [r3, #12]
 8002816:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800281a:	d152      	bne.n	80028c2 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	685b      	ldr	r3, [r3, #4]
 8002820:	2b00      	cmp	r3, #0
 8002822:	d002      	beq.n	800282a <HAL_SPI_Transmit+0xee>
 8002824:	8b7b      	ldrh	r3, [r7, #26]
 8002826:	2b01      	cmp	r3, #1
 8002828:	d145      	bne.n	80028b6 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800282e:	881a      	ldrh	r2, [r3, #0]
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800283a:	1c9a      	adds	r2, r3, #2
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002844:	b29b      	uxth	r3, r3
 8002846:	3b01      	subs	r3, #1
 8002848:	b29a      	uxth	r2, r3
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800284e:	e032      	b.n	80028b6 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	689b      	ldr	r3, [r3, #8]
 8002856:	f003 0302 	and.w	r3, r3, #2
 800285a:	2b02      	cmp	r3, #2
 800285c:	d112      	bne.n	8002884 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002862:	881a      	ldrh	r2, [r3, #0]
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800286e:	1c9a      	adds	r2, r3, #2
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002878:	b29b      	uxth	r3, r3
 800287a:	3b01      	subs	r3, #1
 800287c:	b29a      	uxth	r2, r3
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	86da      	strh	r2, [r3, #54]	@ 0x36
 8002882:	e018      	b.n	80028b6 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002884:	f7fe fa04 	bl	8000c90 <HAL_GetTick>
 8002888:	4602      	mov	r2, r0
 800288a:	69fb      	ldr	r3, [r7, #28]
 800288c:	1ad3      	subs	r3, r2, r3
 800288e:	683a      	ldr	r2, [r7, #0]
 8002890:	429a      	cmp	r2, r3
 8002892:	d803      	bhi.n	800289c <HAL_SPI_Transmit+0x160>
 8002894:	683b      	ldr	r3, [r7, #0]
 8002896:	f1b3 3fff 	cmp.w	r3, #4294967295
 800289a:	d102      	bne.n	80028a2 <HAL_SPI_Transmit+0x166>
 800289c:	683b      	ldr	r3, [r7, #0]
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d109      	bne.n	80028b6 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	2201      	movs	r2, #1
 80028a6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	2200      	movs	r2, #0
 80028ae:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80028b2:	2303      	movs	r3, #3
 80028b4:	e082      	b.n	80029bc <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80028ba:	b29b      	uxth	r3, r3
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d1c7      	bne.n	8002850 <HAL_SPI_Transmit+0x114>
 80028c0:	e053      	b.n	800296a <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	685b      	ldr	r3, [r3, #4]
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d002      	beq.n	80028d0 <HAL_SPI_Transmit+0x194>
 80028ca:	8b7b      	ldrh	r3, [r7, #26]
 80028cc:	2b01      	cmp	r3, #1
 80028ce:	d147      	bne.n	8002960 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	330c      	adds	r3, #12
 80028da:	7812      	ldrb	r2, [r2, #0]
 80028dc:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028e2:	1c5a      	adds	r2, r3, #1
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80028ec:	b29b      	uxth	r3, r3
 80028ee:	3b01      	subs	r3, #1
 80028f0:	b29a      	uxth	r2, r3
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 80028f6:	e033      	b.n	8002960 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	689b      	ldr	r3, [r3, #8]
 80028fe:	f003 0302 	and.w	r3, r3, #2
 8002902:	2b02      	cmp	r3, #2
 8002904:	d113      	bne.n	800292e <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	330c      	adds	r3, #12
 8002910:	7812      	ldrb	r2, [r2, #0]
 8002912:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002918:	1c5a      	adds	r2, r3, #1
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002922:	b29b      	uxth	r3, r3
 8002924:	3b01      	subs	r3, #1
 8002926:	b29a      	uxth	r2, r3
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	86da      	strh	r2, [r3, #54]	@ 0x36
 800292c:	e018      	b.n	8002960 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800292e:	f7fe f9af 	bl	8000c90 <HAL_GetTick>
 8002932:	4602      	mov	r2, r0
 8002934:	69fb      	ldr	r3, [r7, #28]
 8002936:	1ad3      	subs	r3, r2, r3
 8002938:	683a      	ldr	r2, [r7, #0]
 800293a:	429a      	cmp	r2, r3
 800293c:	d803      	bhi.n	8002946 <HAL_SPI_Transmit+0x20a>
 800293e:	683b      	ldr	r3, [r7, #0]
 8002940:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002944:	d102      	bne.n	800294c <HAL_SPI_Transmit+0x210>
 8002946:	683b      	ldr	r3, [r7, #0]
 8002948:	2b00      	cmp	r3, #0
 800294a:	d109      	bne.n	8002960 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	2201      	movs	r2, #1
 8002950:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	2200      	movs	r2, #0
 8002958:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800295c:	2303      	movs	r3, #3
 800295e:	e02d      	b.n	80029bc <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002964:	b29b      	uxth	r3, r3
 8002966:	2b00      	cmp	r3, #0
 8002968:	d1c6      	bne.n	80028f8 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800296a:	69fa      	ldr	r2, [r7, #28]
 800296c:	6839      	ldr	r1, [r7, #0]
 800296e:	68f8      	ldr	r0, [r7, #12]
 8002970:	f000 fbc4 	bl	80030fc <SPI_EndRxTxTransaction>
 8002974:	4603      	mov	r3, r0
 8002976:	2b00      	cmp	r3, #0
 8002978:	d002      	beq.n	8002980 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	2220      	movs	r2, #32
 800297e:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	689b      	ldr	r3, [r3, #8]
 8002984:	2b00      	cmp	r3, #0
 8002986:	d10a      	bne.n	800299e <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002988:	2300      	movs	r3, #0
 800298a:	617b      	str	r3, [r7, #20]
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	68db      	ldr	r3, [r3, #12]
 8002992:	617b      	str	r3, [r7, #20]
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	689b      	ldr	r3, [r3, #8]
 800299a:	617b      	str	r3, [r7, #20]
 800299c:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	2201      	movs	r2, #1
 80029a2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	2200      	movs	r2, #0
 80029aa:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d001      	beq.n	80029ba <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 80029b6:	2301      	movs	r3, #1
 80029b8:	e000      	b.n	80029bc <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 80029ba:	2300      	movs	r3, #0
  }
}
 80029bc:	4618      	mov	r0, r3
 80029be:	3720      	adds	r7, #32
 80029c0:	46bd      	mov	sp, r7
 80029c2:	bd80      	pop	{r7, pc}

080029c4 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80029c4:	b580      	push	{r7, lr}
 80029c6:	b088      	sub	sp, #32
 80029c8:	af02      	add	r7, sp, #8
 80029ca:	60f8      	str	r0, [r7, #12]
 80029cc:	60b9      	str	r1, [r7, #8]
 80029ce:	603b      	str	r3, [r7, #0]
 80029d0:	4613      	mov	r3, r2
 80029d2:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80029da:	b2db      	uxtb	r3, r3
 80029dc:	2b01      	cmp	r3, #1
 80029de:	d001      	beq.n	80029e4 <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 80029e0:	2302      	movs	r3, #2
 80029e2:	e104      	b.n	8002bee <HAL_SPI_Receive+0x22a>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	685b      	ldr	r3, [r3, #4]
 80029e8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80029ec:	d112      	bne.n	8002a14 <HAL_SPI_Receive+0x50>
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	689b      	ldr	r3, [r3, #8]
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d10e      	bne.n	8002a14 <HAL_SPI_Receive+0x50>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	2204      	movs	r2, #4
 80029fa:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80029fe:	88fa      	ldrh	r2, [r7, #6]
 8002a00:	683b      	ldr	r3, [r7, #0]
 8002a02:	9300      	str	r3, [sp, #0]
 8002a04:	4613      	mov	r3, r2
 8002a06:	68ba      	ldr	r2, [r7, #8]
 8002a08:	68b9      	ldr	r1, [r7, #8]
 8002a0a:	68f8      	ldr	r0, [r7, #12]
 8002a0c:	f000 f8f3 	bl	8002bf6 <HAL_SPI_TransmitReceive>
 8002a10:	4603      	mov	r3, r0
 8002a12:	e0ec      	b.n	8002bee <HAL_SPI_Receive+0x22a>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002a14:	f7fe f93c 	bl	8000c90 <HAL_GetTick>
 8002a18:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 8002a1a:	68bb      	ldr	r3, [r7, #8]
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d002      	beq.n	8002a26 <HAL_SPI_Receive+0x62>
 8002a20:	88fb      	ldrh	r3, [r7, #6]
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d101      	bne.n	8002a2a <HAL_SPI_Receive+0x66>
  {
    return HAL_ERROR;
 8002a26:	2301      	movs	r3, #1
 8002a28:	e0e1      	b.n	8002bee <HAL_SPI_Receive+0x22a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002a30:	2b01      	cmp	r3, #1
 8002a32:	d101      	bne.n	8002a38 <HAL_SPI_Receive+0x74>
 8002a34:	2302      	movs	r3, #2
 8002a36:	e0da      	b.n	8002bee <HAL_SPI_Receive+0x22a>
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	2201      	movs	r2, #1
 8002a3c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	2204      	movs	r2, #4
 8002a44:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	2200      	movs	r2, #0
 8002a4c:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	68ba      	ldr	r2, [r7, #8]
 8002a52:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	88fa      	ldrh	r2, [r7, #6]
 8002a58:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	88fa      	ldrh	r2, [r7, #6]
 8002a5e:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	2200      	movs	r2, #0
 8002a64:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	2200      	movs	r2, #0
 8002a6a:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	2200      	movs	r2, #0
 8002a70:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	2200      	movs	r2, #0
 8002a76:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	2200      	movs	r2, #0
 8002a7c:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	689b      	ldr	r3, [r3, #8]
 8002a82:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002a86:	d10f      	bne.n	8002aa8 <HAL_SPI_Receive+0xe4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	681a      	ldr	r2, [r3, #0]
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002a96:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	681a      	ldr	r2, [r3, #0]
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8002aa6:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002ab2:	2b40      	cmp	r3, #64	@ 0x40
 8002ab4:	d007      	beq.n	8002ac6 <HAL_SPI_Receive+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	681a      	ldr	r2, [r3, #0]
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002ac4:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	68db      	ldr	r3, [r3, #12]
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d170      	bne.n	8002bb0 <HAL_SPI_Receive+0x1ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8002ace:	e035      	b.n	8002b3c <HAL_SPI_Receive+0x178>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	689b      	ldr	r3, [r3, #8]
 8002ad6:	f003 0301 	and.w	r3, r3, #1
 8002ada:	2b01      	cmp	r3, #1
 8002adc:	d115      	bne.n	8002b0a <HAL_SPI_Receive+0x146>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	f103 020c 	add.w	r2, r3, #12
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002aea:	7812      	ldrb	r2, [r2, #0]
 8002aec:	b2d2      	uxtb	r2, r2
 8002aee:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002af4:	1c5a      	adds	r2, r3, #1
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002afe:	b29b      	uxth	r3, r3
 8002b00:	3b01      	subs	r3, #1
 8002b02:	b29a      	uxth	r2, r3
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002b08:	e018      	b.n	8002b3c <HAL_SPI_Receive+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002b0a:	f7fe f8c1 	bl	8000c90 <HAL_GetTick>
 8002b0e:	4602      	mov	r2, r0
 8002b10:	697b      	ldr	r3, [r7, #20]
 8002b12:	1ad3      	subs	r3, r2, r3
 8002b14:	683a      	ldr	r2, [r7, #0]
 8002b16:	429a      	cmp	r2, r3
 8002b18:	d803      	bhi.n	8002b22 <HAL_SPI_Receive+0x15e>
 8002b1a:	683b      	ldr	r3, [r7, #0]
 8002b1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b20:	d102      	bne.n	8002b28 <HAL_SPI_Receive+0x164>
 8002b22:	683b      	ldr	r3, [r7, #0]
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d109      	bne.n	8002b3c <HAL_SPI_Receive+0x178>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	2201      	movs	r2, #1
 8002b2c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	2200      	movs	r2, #0
 8002b34:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8002b38:	2303      	movs	r3, #3
 8002b3a:	e058      	b.n	8002bee <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002b40:	b29b      	uxth	r3, r3
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d1c4      	bne.n	8002ad0 <HAL_SPI_Receive+0x10c>
 8002b46:	e038      	b.n	8002bba <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	689b      	ldr	r3, [r3, #8]
 8002b4e:	f003 0301 	and.w	r3, r3, #1
 8002b52:	2b01      	cmp	r3, #1
 8002b54:	d113      	bne.n	8002b7e <HAL_SPI_Receive+0x1ba>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	68da      	ldr	r2, [r3, #12]
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b60:	b292      	uxth	r2, r2
 8002b62:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b68:	1c9a      	adds	r2, r3, #2
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002b72:	b29b      	uxth	r3, r3
 8002b74:	3b01      	subs	r3, #1
 8002b76:	b29a      	uxth	r2, r3
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002b7c:	e018      	b.n	8002bb0 <HAL_SPI_Receive+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002b7e:	f7fe f887 	bl	8000c90 <HAL_GetTick>
 8002b82:	4602      	mov	r2, r0
 8002b84:	697b      	ldr	r3, [r7, #20]
 8002b86:	1ad3      	subs	r3, r2, r3
 8002b88:	683a      	ldr	r2, [r7, #0]
 8002b8a:	429a      	cmp	r2, r3
 8002b8c:	d803      	bhi.n	8002b96 <HAL_SPI_Receive+0x1d2>
 8002b8e:	683b      	ldr	r3, [r7, #0]
 8002b90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b94:	d102      	bne.n	8002b9c <HAL_SPI_Receive+0x1d8>
 8002b96:	683b      	ldr	r3, [r7, #0]
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d109      	bne.n	8002bb0 <HAL_SPI_Receive+0x1ec>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	2201      	movs	r2, #1
 8002ba0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	2200      	movs	r2, #0
 8002ba8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8002bac:	2303      	movs	r3, #3
 8002bae:	e01e      	b.n	8002bee <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002bb4:	b29b      	uxth	r3, r3
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d1c6      	bne.n	8002b48 <HAL_SPI_Receive+0x184>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002bba:	697a      	ldr	r2, [r7, #20]
 8002bbc:	6839      	ldr	r1, [r7, #0]
 8002bbe:	68f8      	ldr	r0, [r7, #12]
 8002bc0:	f000 fa4a 	bl	8003058 <SPI_EndRxTransaction>
 8002bc4:	4603      	mov	r3, r0
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d002      	beq.n	8002bd0 <HAL_SPI_Receive+0x20c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	2220      	movs	r2, #32
 8002bce:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	2201      	movs	r2, #1
 8002bd4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	2200      	movs	r2, #0
 8002bdc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d001      	beq.n	8002bec <HAL_SPI_Receive+0x228>
  {
    return HAL_ERROR;
 8002be8:	2301      	movs	r3, #1
 8002bea:	e000      	b.n	8002bee <HAL_SPI_Receive+0x22a>
  }
  else
  {
    return HAL_OK;
 8002bec:	2300      	movs	r3, #0
  }
}
 8002bee:	4618      	mov	r0, r3
 8002bf0:	3718      	adds	r7, #24
 8002bf2:	46bd      	mov	sp, r7
 8002bf4:	bd80      	pop	{r7, pc}

08002bf6 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8002bf6:	b580      	push	{r7, lr}
 8002bf8:	b08a      	sub	sp, #40	@ 0x28
 8002bfa:	af00      	add	r7, sp, #0
 8002bfc:	60f8      	str	r0, [r7, #12]
 8002bfe:	60b9      	str	r1, [r7, #8]
 8002c00:	607a      	str	r2, [r7, #4]
 8002c02:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002c04:	2301      	movs	r3, #1
 8002c06:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002c08:	f7fe f842 	bl	8000c90 <HAL_GetTick>
 8002c0c:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002c14:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	685b      	ldr	r3, [r3, #4]
 8002c1a:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8002c1c:	887b      	ldrh	r3, [r7, #2]
 8002c1e:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002c20:	7ffb      	ldrb	r3, [r7, #31]
 8002c22:	2b01      	cmp	r3, #1
 8002c24:	d00c      	beq.n	8002c40 <HAL_SPI_TransmitReceive+0x4a>
 8002c26:	69bb      	ldr	r3, [r7, #24]
 8002c28:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002c2c:	d106      	bne.n	8002c3c <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	689b      	ldr	r3, [r3, #8]
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d102      	bne.n	8002c3c <HAL_SPI_TransmitReceive+0x46>
 8002c36:	7ffb      	ldrb	r3, [r7, #31]
 8002c38:	2b04      	cmp	r3, #4
 8002c3a:	d001      	beq.n	8002c40 <HAL_SPI_TransmitReceive+0x4a>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8002c3c:	2302      	movs	r3, #2
 8002c3e:	e17f      	b.n	8002f40 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002c40:	68bb      	ldr	r3, [r7, #8]
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d005      	beq.n	8002c52 <HAL_SPI_TransmitReceive+0x5c>
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d002      	beq.n	8002c52 <HAL_SPI_TransmitReceive+0x5c>
 8002c4c:	887b      	ldrh	r3, [r7, #2]
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d101      	bne.n	8002c56 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 8002c52:	2301      	movs	r3, #1
 8002c54:	e174      	b.n	8002f40 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002c5c:	2b01      	cmp	r3, #1
 8002c5e:	d101      	bne.n	8002c64 <HAL_SPI_TransmitReceive+0x6e>
 8002c60:	2302      	movs	r3, #2
 8002c62:	e16d      	b.n	8002f40 <HAL_SPI_TransmitReceive+0x34a>
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	2201      	movs	r2, #1
 8002c68:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002c72:	b2db      	uxtb	r3, r3
 8002c74:	2b04      	cmp	r3, #4
 8002c76:	d003      	beq.n	8002c80 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	2205      	movs	r2, #5
 8002c7c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	2200      	movs	r2, #0
 8002c84:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	687a      	ldr	r2, [r7, #4]
 8002c8a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	887a      	ldrh	r2, [r7, #2]
 8002c90:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	887a      	ldrh	r2, [r7, #2]
 8002c96:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	68ba      	ldr	r2, [r7, #8]
 8002c9c:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	887a      	ldrh	r2, [r7, #2]
 8002ca2:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	887a      	ldrh	r2, [r7, #2]
 8002ca8:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	2200      	movs	r2, #0
 8002cae:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	2200      	movs	r2, #0
 8002cb4:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002cc0:	2b40      	cmp	r3, #64	@ 0x40
 8002cc2:	d007      	beq.n	8002cd4 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	681a      	ldr	r2, [r3, #0]
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002cd2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	68db      	ldr	r3, [r3, #12]
 8002cd8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002cdc:	d17e      	bne.n	8002ddc <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	685b      	ldr	r3, [r3, #4]
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d002      	beq.n	8002cec <HAL_SPI_TransmitReceive+0xf6>
 8002ce6:	8afb      	ldrh	r3, [r7, #22]
 8002ce8:	2b01      	cmp	r3, #1
 8002cea:	d16c      	bne.n	8002dc6 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cf0:	881a      	ldrh	r2, [r3, #0]
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cfc:	1c9a      	adds	r2, r3, #2
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002d06:	b29b      	uxth	r3, r3
 8002d08:	3b01      	subs	r3, #1
 8002d0a:	b29a      	uxth	r2, r3
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002d10:	e059      	b.n	8002dc6 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	689b      	ldr	r3, [r3, #8]
 8002d18:	f003 0302 	and.w	r3, r3, #2
 8002d1c:	2b02      	cmp	r3, #2
 8002d1e:	d11b      	bne.n	8002d58 <HAL_SPI_TransmitReceive+0x162>
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002d24:	b29b      	uxth	r3, r3
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d016      	beq.n	8002d58 <HAL_SPI_TransmitReceive+0x162>
 8002d2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d2c:	2b01      	cmp	r3, #1
 8002d2e:	d113      	bne.n	8002d58 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d34:	881a      	ldrh	r2, [r3, #0]
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d40:	1c9a      	adds	r2, r3, #2
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002d4a:	b29b      	uxth	r3, r3
 8002d4c:	3b01      	subs	r3, #1
 8002d4e:	b29a      	uxth	r2, r3
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002d54:	2300      	movs	r3, #0
 8002d56:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	689b      	ldr	r3, [r3, #8]
 8002d5e:	f003 0301 	and.w	r3, r3, #1
 8002d62:	2b01      	cmp	r3, #1
 8002d64:	d119      	bne.n	8002d9a <HAL_SPI_TransmitReceive+0x1a4>
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002d6a:	b29b      	uxth	r3, r3
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d014      	beq.n	8002d9a <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	68da      	ldr	r2, [r3, #12]
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d7a:	b292      	uxth	r2, r2
 8002d7c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d82:	1c9a      	adds	r2, r3, #2
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002d8c:	b29b      	uxth	r3, r3
 8002d8e:	3b01      	subs	r3, #1
 8002d90:	b29a      	uxth	r2, r3
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002d96:	2301      	movs	r3, #1
 8002d98:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002d9a:	f7fd ff79 	bl	8000c90 <HAL_GetTick>
 8002d9e:	4602      	mov	r2, r0
 8002da0:	6a3b      	ldr	r3, [r7, #32]
 8002da2:	1ad3      	subs	r3, r2, r3
 8002da4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002da6:	429a      	cmp	r2, r3
 8002da8:	d80d      	bhi.n	8002dc6 <HAL_SPI_TransmitReceive+0x1d0>
 8002daa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002dac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002db0:	d009      	beq.n	8002dc6 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	2201      	movs	r2, #1
 8002db6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	2200      	movs	r2, #0
 8002dbe:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8002dc2:	2303      	movs	r3, #3
 8002dc4:	e0bc      	b.n	8002f40 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002dca:	b29b      	uxth	r3, r3
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d1a0      	bne.n	8002d12 <HAL_SPI_TransmitReceive+0x11c>
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002dd4:	b29b      	uxth	r3, r3
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d19b      	bne.n	8002d12 <HAL_SPI_TransmitReceive+0x11c>
 8002dda:	e082      	b.n	8002ee2 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	685b      	ldr	r3, [r3, #4]
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d002      	beq.n	8002dea <HAL_SPI_TransmitReceive+0x1f4>
 8002de4:	8afb      	ldrh	r3, [r7, #22]
 8002de6:	2b01      	cmp	r3, #1
 8002de8:	d171      	bne.n	8002ece <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	330c      	adds	r3, #12
 8002df4:	7812      	ldrb	r2, [r2, #0]
 8002df6:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002dfc:	1c5a      	adds	r2, r3, #1
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002e06:	b29b      	uxth	r3, r3
 8002e08:	3b01      	subs	r3, #1
 8002e0a:	b29a      	uxth	r2, r3
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002e10:	e05d      	b.n	8002ece <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	689b      	ldr	r3, [r3, #8]
 8002e18:	f003 0302 	and.w	r3, r3, #2
 8002e1c:	2b02      	cmp	r3, #2
 8002e1e:	d11c      	bne.n	8002e5a <HAL_SPI_TransmitReceive+0x264>
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002e24:	b29b      	uxth	r3, r3
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d017      	beq.n	8002e5a <HAL_SPI_TransmitReceive+0x264>
 8002e2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e2c:	2b01      	cmp	r3, #1
 8002e2e:	d114      	bne.n	8002e5a <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	330c      	adds	r3, #12
 8002e3a:	7812      	ldrb	r2, [r2, #0]
 8002e3c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e42:	1c5a      	adds	r2, r3, #1
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002e4c:	b29b      	uxth	r3, r3
 8002e4e:	3b01      	subs	r3, #1
 8002e50:	b29a      	uxth	r2, r3
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002e56:	2300      	movs	r3, #0
 8002e58:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	689b      	ldr	r3, [r3, #8]
 8002e60:	f003 0301 	and.w	r3, r3, #1
 8002e64:	2b01      	cmp	r3, #1
 8002e66:	d119      	bne.n	8002e9c <HAL_SPI_TransmitReceive+0x2a6>
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002e6c:	b29b      	uxth	r3, r3
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d014      	beq.n	8002e9c <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	68da      	ldr	r2, [r3, #12]
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e7c:	b2d2      	uxtb	r2, r2
 8002e7e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e84:	1c5a      	adds	r2, r3, #1
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002e8e:	b29b      	uxth	r3, r3
 8002e90:	3b01      	subs	r3, #1
 8002e92:	b29a      	uxth	r2, r3
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002e98:	2301      	movs	r3, #1
 8002e9a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002e9c:	f7fd fef8 	bl	8000c90 <HAL_GetTick>
 8002ea0:	4602      	mov	r2, r0
 8002ea2:	6a3b      	ldr	r3, [r7, #32]
 8002ea4:	1ad3      	subs	r3, r2, r3
 8002ea6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002ea8:	429a      	cmp	r2, r3
 8002eaa:	d803      	bhi.n	8002eb4 <HAL_SPI_TransmitReceive+0x2be>
 8002eac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002eae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002eb2:	d102      	bne.n	8002eba <HAL_SPI_TransmitReceive+0x2c4>
 8002eb4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d109      	bne.n	8002ece <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	2201      	movs	r2, #1
 8002ebe:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	2200      	movs	r2, #0
 8002ec6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8002eca:	2303      	movs	r3, #3
 8002ecc:	e038      	b.n	8002f40 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002ed2:	b29b      	uxth	r3, r3
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d19c      	bne.n	8002e12 <HAL_SPI_TransmitReceive+0x21c>
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002edc:	b29b      	uxth	r3, r3
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d197      	bne.n	8002e12 <HAL_SPI_TransmitReceive+0x21c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002ee2:	6a3a      	ldr	r2, [r7, #32]
 8002ee4:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8002ee6:	68f8      	ldr	r0, [r7, #12]
 8002ee8:	f000 f908 	bl	80030fc <SPI_EndRxTxTransaction>
 8002eec:	4603      	mov	r3, r0
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d008      	beq.n	8002f04 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	2220      	movs	r2, #32
 8002ef6:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	2200      	movs	r2, #0
 8002efc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8002f00:	2301      	movs	r3, #1
 8002f02:	e01d      	b.n	8002f40 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	689b      	ldr	r3, [r3, #8]
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d10a      	bne.n	8002f22 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002f0c:	2300      	movs	r3, #0
 8002f0e:	613b      	str	r3, [r7, #16]
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	68db      	ldr	r3, [r3, #12]
 8002f16:	613b      	str	r3, [r7, #16]
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	689b      	ldr	r3, [r3, #8]
 8002f1e:	613b      	str	r3, [r7, #16]
 8002f20:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	2201      	movs	r2, #1
 8002f26:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	2200      	movs	r2, #0
 8002f2e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d001      	beq.n	8002f3e <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8002f3a:	2301      	movs	r3, #1
 8002f3c:	e000      	b.n	8002f40 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8002f3e:	2300      	movs	r3, #0
  }
}
 8002f40:	4618      	mov	r0, r3
 8002f42:	3728      	adds	r7, #40	@ 0x28
 8002f44:	46bd      	mov	sp, r7
 8002f46:	bd80      	pop	{r7, pc}

08002f48 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002f48:	b580      	push	{r7, lr}
 8002f4a:	b088      	sub	sp, #32
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	60f8      	str	r0, [r7, #12]
 8002f50:	60b9      	str	r1, [r7, #8]
 8002f52:	603b      	str	r3, [r7, #0]
 8002f54:	4613      	mov	r3, r2
 8002f56:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002f58:	f7fd fe9a 	bl	8000c90 <HAL_GetTick>
 8002f5c:	4602      	mov	r2, r0
 8002f5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f60:	1a9b      	subs	r3, r3, r2
 8002f62:	683a      	ldr	r2, [r7, #0]
 8002f64:	4413      	add	r3, r2
 8002f66:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002f68:	f7fd fe92 	bl	8000c90 <HAL_GetTick>
 8002f6c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002f6e:	4b39      	ldr	r3, [pc, #228]	@ (8003054 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	015b      	lsls	r3, r3, #5
 8002f74:	0d1b      	lsrs	r3, r3, #20
 8002f76:	69fa      	ldr	r2, [r7, #28]
 8002f78:	fb02 f303 	mul.w	r3, r2, r3
 8002f7c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002f7e:	e054      	b.n	800302a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002f80:	683b      	ldr	r3, [r7, #0]
 8002f82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f86:	d050      	beq.n	800302a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002f88:	f7fd fe82 	bl	8000c90 <HAL_GetTick>
 8002f8c:	4602      	mov	r2, r0
 8002f8e:	69bb      	ldr	r3, [r7, #24]
 8002f90:	1ad3      	subs	r3, r2, r3
 8002f92:	69fa      	ldr	r2, [r7, #28]
 8002f94:	429a      	cmp	r2, r3
 8002f96:	d902      	bls.n	8002f9e <SPI_WaitFlagStateUntilTimeout+0x56>
 8002f98:	69fb      	ldr	r3, [r7, #28]
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d13d      	bne.n	800301a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	685a      	ldr	r2, [r3, #4]
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8002fac:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	685b      	ldr	r3, [r3, #4]
 8002fb2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002fb6:	d111      	bne.n	8002fdc <SPI_WaitFlagStateUntilTimeout+0x94>
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	689b      	ldr	r3, [r3, #8]
 8002fbc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002fc0:	d004      	beq.n	8002fcc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	689b      	ldr	r3, [r3, #8]
 8002fc6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002fca:	d107      	bne.n	8002fdc <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	681a      	ldr	r2, [r3, #0]
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002fda:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002fe0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002fe4:	d10f      	bne.n	8003006 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	681a      	ldr	r2, [r3, #0]
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002ff4:	601a      	str	r2, [r3, #0]
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	681a      	ldr	r2, [r3, #0]
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003004:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	2201      	movs	r2, #1
 800300a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	2200      	movs	r2, #0
 8003012:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8003016:	2303      	movs	r3, #3
 8003018:	e017      	b.n	800304a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800301a:	697b      	ldr	r3, [r7, #20]
 800301c:	2b00      	cmp	r3, #0
 800301e:	d101      	bne.n	8003024 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003020:	2300      	movs	r3, #0
 8003022:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003024:	697b      	ldr	r3, [r7, #20]
 8003026:	3b01      	subs	r3, #1
 8003028:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	689a      	ldr	r2, [r3, #8]
 8003030:	68bb      	ldr	r3, [r7, #8]
 8003032:	4013      	ands	r3, r2
 8003034:	68ba      	ldr	r2, [r7, #8]
 8003036:	429a      	cmp	r2, r3
 8003038:	bf0c      	ite	eq
 800303a:	2301      	moveq	r3, #1
 800303c:	2300      	movne	r3, #0
 800303e:	b2db      	uxtb	r3, r3
 8003040:	461a      	mov	r2, r3
 8003042:	79fb      	ldrb	r3, [r7, #7]
 8003044:	429a      	cmp	r2, r3
 8003046:	d19b      	bne.n	8002f80 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003048:	2300      	movs	r3, #0
}
 800304a:	4618      	mov	r0, r3
 800304c:	3720      	adds	r7, #32
 800304e:	46bd      	mov	sp, r7
 8003050:	bd80      	pop	{r7, pc}
 8003052:	bf00      	nop
 8003054:	20000008 	.word	0x20000008

08003058 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8003058:	b580      	push	{r7, lr}
 800305a:	b086      	sub	sp, #24
 800305c:	af02      	add	r7, sp, #8
 800305e:	60f8      	str	r0, [r7, #12]
 8003060:	60b9      	str	r1, [r7, #8]
 8003062:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	685b      	ldr	r3, [r3, #4]
 8003068:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800306c:	d111      	bne.n	8003092 <SPI_EndRxTransaction+0x3a>
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	689b      	ldr	r3, [r3, #8]
 8003072:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003076:	d004      	beq.n	8003082 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	689b      	ldr	r3, [r3, #8]
 800307c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003080:	d107      	bne.n	8003092 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	681a      	ldr	r2, [r3, #0]
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003090:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	685b      	ldr	r3, [r3, #4]
 8003096:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800309a:	d117      	bne.n	80030cc <SPI_EndRxTransaction+0x74>
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	689b      	ldr	r3, [r3, #8]
 80030a0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80030a4:	d112      	bne.n	80030cc <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	9300      	str	r3, [sp, #0]
 80030aa:	68bb      	ldr	r3, [r7, #8]
 80030ac:	2200      	movs	r2, #0
 80030ae:	2101      	movs	r1, #1
 80030b0:	68f8      	ldr	r0, [r7, #12]
 80030b2:	f7ff ff49 	bl	8002f48 <SPI_WaitFlagStateUntilTimeout>
 80030b6:	4603      	mov	r3, r0
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d01a      	beq.n	80030f2 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80030c0:	f043 0220 	orr.w	r2, r3, #32
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80030c8:	2303      	movs	r3, #3
 80030ca:	e013      	b.n	80030f4 <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	9300      	str	r3, [sp, #0]
 80030d0:	68bb      	ldr	r3, [r7, #8]
 80030d2:	2200      	movs	r2, #0
 80030d4:	2180      	movs	r1, #128	@ 0x80
 80030d6:	68f8      	ldr	r0, [r7, #12]
 80030d8:	f7ff ff36 	bl	8002f48 <SPI_WaitFlagStateUntilTimeout>
 80030dc:	4603      	mov	r3, r0
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d007      	beq.n	80030f2 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80030e6:	f043 0220 	orr.w	r2, r3, #32
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80030ee:	2303      	movs	r3, #3
 80030f0:	e000      	b.n	80030f4 <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 80030f2:	2300      	movs	r3, #0
}
 80030f4:	4618      	mov	r0, r3
 80030f6:	3710      	adds	r7, #16
 80030f8:	46bd      	mov	sp, r7
 80030fa:	bd80      	pop	{r7, pc}

080030fc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80030fc:	b580      	push	{r7, lr}
 80030fe:	b086      	sub	sp, #24
 8003100:	af02      	add	r7, sp, #8
 8003102:	60f8      	str	r0, [r7, #12]
 8003104:	60b9      	str	r1, [r7, #8]
 8003106:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	9300      	str	r3, [sp, #0]
 800310c:	68bb      	ldr	r3, [r7, #8]
 800310e:	2201      	movs	r2, #1
 8003110:	2102      	movs	r1, #2
 8003112:	68f8      	ldr	r0, [r7, #12]
 8003114:	f7ff ff18 	bl	8002f48 <SPI_WaitFlagStateUntilTimeout>
 8003118:	4603      	mov	r3, r0
 800311a:	2b00      	cmp	r3, #0
 800311c:	d007      	beq.n	800312e <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003122:	f043 0220 	orr.w	r2, r3, #32
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 800312a:	2303      	movs	r3, #3
 800312c:	e013      	b.n	8003156 <SPI_EndRxTxTransaction+0x5a>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	9300      	str	r3, [sp, #0]
 8003132:	68bb      	ldr	r3, [r7, #8]
 8003134:	2200      	movs	r2, #0
 8003136:	2180      	movs	r1, #128	@ 0x80
 8003138:	68f8      	ldr	r0, [r7, #12]
 800313a:	f7ff ff05 	bl	8002f48 <SPI_WaitFlagStateUntilTimeout>
 800313e:	4603      	mov	r3, r0
 8003140:	2b00      	cmp	r3, #0
 8003142:	d007      	beq.n	8003154 <SPI_EndRxTxTransaction+0x58>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003148:	f043 0220 	orr.w	r2, r3, #32
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8003150:	2303      	movs	r3, #3
 8003152:	e000      	b.n	8003156 <SPI_EndRxTxTransaction+0x5a>
  }
  return HAL_OK;
 8003154:	2300      	movs	r3, #0
}
 8003156:	4618      	mov	r0, r3
 8003158:	3710      	adds	r7, #16
 800315a:	46bd      	mov	sp, r7
 800315c:	bd80      	pop	{r7, pc}

0800315e <memset>:
 800315e:	4603      	mov	r3, r0
 8003160:	4402      	add	r2, r0
 8003162:	4293      	cmp	r3, r2
 8003164:	d100      	bne.n	8003168 <memset+0xa>
 8003166:	4770      	bx	lr
 8003168:	f803 1b01 	strb.w	r1, [r3], #1
 800316c:	e7f9      	b.n	8003162 <memset+0x4>
	...

08003170 <__libc_init_array>:
 8003170:	b570      	push	{r4, r5, r6, lr}
 8003172:	2600      	movs	r6, #0
 8003174:	4d0c      	ldr	r5, [pc, #48]	@ (80031a8 <__libc_init_array+0x38>)
 8003176:	4c0d      	ldr	r4, [pc, #52]	@ (80031ac <__libc_init_array+0x3c>)
 8003178:	1b64      	subs	r4, r4, r5
 800317a:	10a4      	asrs	r4, r4, #2
 800317c:	42a6      	cmp	r6, r4
 800317e:	d109      	bne.n	8003194 <__libc_init_array+0x24>
 8003180:	f000 f81a 	bl	80031b8 <_init>
 8003184:	2600      	movs	r6, #0
 8003186:	4d0a      	ldr	r5, [pc, #40]	@ (80031b0 <__libc_init_array+0x40>)
 8003188:	4c0a      	ldr	r4, [pc, #40]	@ (80031b4 <__libc_init_array+0x44>)
 800318a:	1b64      	subs	r4, r4, r5
 800318c:	10a4      	asrs	r4, r4, #2
 800318e:	42a6      	cmp	r6, r4
 8003190:	d105      	bne.n	800319e <__libc_init_array+0x2e>
 8003192:	bd70      	pop	{r4, r5, r6, pc}
 8003194:	f855 3b04 	ldr.w	r3, [r5], #4
 8003198:	4798      	blx	r3
 800319a:	3601      	adds	r6, #1
 800319c:	e7ee      	b.n	800317c <__libc_init_array+0xc>
 800319e:	f855 3b04 	ldr.w	r3, [r5], #4
 80031a2:	4798      	blx	r3
 80031a4:	3601      	adds	r6, #1
 80031a6:	e7f2      	b.n	800318e <__libc_init_array+0x1e>
 80031a8:	08003220 	.word	0x08003220
 80031ac:	08003220 	.word	0x08003220
 80031b0:	08003220 	.word	0x08003220
 80031b4:	08003224 	.word	0x08003224

080031b8 <_init>:
 80031b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80031ba:	bf00      	nop
 80031bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80031be:	bc08      	pop	{r3}
 80031c0:	469e      	mov	lr, r3
 80031c2:	4770      	bx	lr

080031c4 <_fini>:
 80031c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80031c6:	bf00      	nop
 80031c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80031ca:	bc08      	pop	{r3}
 80031cc:	469e      	mov	lr, r3
 80031ce:	4770      	bx	lr
